// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hangouts.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from hangouts.proto</summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class HangoutsReflection {

  #region Descriptor
  /// <summary>File descriptor for hangouts.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static HangoutsReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5oYW5nb3V0cy5wcm90byJcChNEb05vdERpc3R1cmJTZXR0aW5nEhYKDmRv",
          "X25vdF9kaXN0dXJiGAEgASgIEhwKFGV4cGlyYXRpb25fdGltZXN0YW1wGAIg",
          "ASgEEg8KB3ZlcnNpb24YAyABKAQiQgoUTm90aWZpY2F0aW9uU2V0dGluZ3MS",
          "KgoMZG5kX3NldHRpbmdzGAEgASgLMhQuRG9Ob3REaXN0dXJiU2V0dGluZyIc",
          "Cg5Db252ZXJzYXRpb25JZBIKCgJpZBgBIAEoCSIxCg1QYXJ0aWNpcGFudElk",
          "Eg8KB2dhaWFfaWQYASABKAkSDwoHY2hhdF9pZBgCIAEoCSI/CgxEZXZpY2VT",
          "dGF0dXMSDgoGbW9iaWxlGAEgASgIEg8KB2Rlc2t0b3AYAiABKAgSDgoGdGFi",
          "bGV0GAMgASgIInoKCFByZXNlbmNlEhEKCXJlYWNoYWJsZRgBIAEoCBIRCglh",
          "dmFpbGFibGUYAiABKAgSJAoNZGV2aWNlX3N0YXR1cxgGIAEoCzINLkRldmlj",
          "ZVN0YXR1cxIiCgxtb29kX3NldHRpbmcYCSABKAsyDC5Nb29kU2V0dGluZyJO",
          "Cg5QcmVzZW5jZVJlc3VsdBIfCgd1c2VyX2lkGAEgASgLMg4uUGFydGljaXBh",
          "bnRJZBIbCghwcmVzZW5jZRgCIAEoCzIJLlByZXNlbmNlIjcKEENsaWVudElk",
          "ZW50aWZpZXISEAoIcmVzb3VyY2UYASABKAkSEQoJaGVhZGVyX2lkGAIgASgJ",
          "ImUKE0NsaWVudFByZXNlbmNlU3RhdGUSJQoKaWRlbnRpZmllchgBIAEoCzIR",
          "LkNsaWVudElkZW50aWZpZXISJwoFc3RhdGUYAiABKA4yGC5DbGllbnRQcmVz",
          "ZW5jZVN0YXRlVHlwZSJ+Cg5Vc2VyRXZlbnRTdGF0ZRIfCgd1c2VyX2lkGAEg",
          "ASgLMg4uUGFydGljaXBhbnRJZBIbChNjbGllbnRfZ2VuZXJhdGVkX2lkGAIg",
          "ASgJEi4KEm5vdGlmaWNhdGlvbl9sZXZlbBgDIAEoDjISLk5vdGlmaWNhdGlv",
          "bkxldmVsIlQKCkZvcm1hdHRpbmcSDAoEYm9sZBgBIAEoCBIOCgZpdGFsaWMY",
          "AiABKAgSFQoNc3RyaWtldGhyb3VnaBgDIAEoCBIRCgl1bmRlcmxpbmUYBCAB",
          "KAgiHwoITGlua0RhdGESEwoLbGlua190YXJnZXQYASABKAkicgoHU2VnbWVu",
          "dBIaCgR0eXBlGAEgASgOMgwuU2VnbWVudFR5cGUSDAoEdGV4dBgCIAEoCRIf",
          "Cgpmb3JtYXR0aW5nGAMgASgLMgsuRm9ybWF0dGluZxIcCglsaW5rX2RhdGEY",
          "BCABKAsyCS5MaW5rRGF0YSKJAwoJUGx1c1Bob3RvEicKCXRodW1ibmFpbBgB",
          "IAEoCzIULlBsdXNQaG90by5UaHVtYm5haWwSGwoTb3duZXJfb2JmdXNjYXRl",
          "ZF9pZBgCIAEoCRIQCghhbGJ1bV9pZBgDIAEoCRIQCghwaG90b19pZBgEIAEo",
          "CRILCgN1cmwYBiABKAkSHAoUb3JpZ2luYWxfY29udGVudF91cmwYCiABKAkS",
          "KAoKbWVkaWFfdHlwZRgNIAEoDjIULlBsdXNQaG90by5NZWRpYVR5cGUSEQoJ",
          "c3RyZWFtX2lkGA4gAygJGlAKCVRodW1ibmFpbBILCgN1cmwYASABKAkSEQoJ",
          "aW1hZ2VfdXJsGAQgASgJEhAKCHdpZHRoX3B4GAogASgEEhEKCWhlaWdodF9w",
          "eBgLIAEoBCJYCglNZWRpYVR5cGUSFgoSTUVESUFfVFlQRV9VTktOT1dOEAAS",
          "FAoQTUVESUFfVFlQRV9QSE9UTxABEh0KGU1FRElBX1RZUEVfQU5JTUFURURf",
          "UEhPVE8QBCKBAQoFUGxhY2USCwoDdXJsGAEgASgJEgwKBG5hbWUYAyABKAkS",
          "OQoUcmVwcmVzZW50YXRpdmVfaW1hZ2UYuQEgASgLMhouUGxhY2UuUmVwcmVz",
          "ZW50YXRpdmVJbWFnZRoiChNSZXByZXNlbnRhdGl2ZUltYWdlEgsKA3VybBgC",
          "IAEoCSJtCglFbWJlZEl0ZW0SFwoEdHlwZRgBIAMoDjIJLkl0ZW1UeXBlEgoK",
          "AmlkGAIgASgJEiEKCnBsdXNfcGhvdG8YlYGXDSABKAsyCi5QbHVzUGhvdG8S",
          "GAoFcGxhY2UY6M+KESABKAsyBi5QbGFjZSIsCgpBdHRhY2htZW50Eh4KCmVt",
          "YmVkX2l0ZW0YASABKAsyCi5FbWJlZEl0ZW0iTAoOTWVzc2FnZUNvbnRlbnQS",
          "GQoHc2VnbWVudBgBIAMoCzIILlNlZ21lbnQSHwoKYXR0YWNobWVudBgCIAMo",
          "CzILLkF0dGFjaG1lbnQiLgoPRXZlbnRBbm5vdGF0aW9uEgwKBHR5cGUYASAB",
          "KAUSDQoFdmFsdWUYAiABKAkiXQoLQ2hhdE1lc3NhZ2USJAoKYW5ub3RhdGlv",
          "bhgCIAMoCzIQLkV2ZW50QW5ub3RhdGlvbhIoCg9tZXNzYWdlX2NvbnRlbnQY",
          "AyABKAsyDy5NZXNzYWdlQ29udGVudCJgChBNZW1iZXJzaGlwQ2hhbmdlEiMK",
          "BHR5cGUYASABKA4yFS5NZW1iZXJzaGlwQ2hhbmdlVHlwZRInCg9wYXJ0aWNp",
          "cGFudF9pZHMYAyADKAsyDi5QYXJ0aWNpcGFudElkIjgKEkNvbnZlcnNhdGlv",
          "blJlbmFtZRIQCghuZXdfbmFtZRgBIAEoCRIQCghvbGRfbmFtZRgCIAEoCSJd",
          "CgxIYW5nb3V0RXZlbnQSJQoKZXZlbnRfdHlwZRgBIAEoDjIRLkhhbmdvdXRF",
          "dmVudFR5cGUSJgoOcGFydGljaXBhbnRfaWQYAiADKAsyDi5QYXJ0aWNpcGFu",
          "dElkIsUBCg9PVFJNb2RpZmljYXRpb24SKwoOb2xkX290cl9zdGF0dXMYASAB",
          "KA4yEy5PZmZUaGVSZWNvcmRTdGF0dXMSKwoObmV3X290cl9zdGF0dXMYAiAB",
          "KA4yEy5PZmZUaGVSZWNvcmRTdGF0dXMSKwoOb2xkX290cl90b2dnbGUYAyAB",
          "KA4yEy5PZmZUaGVSZWNvcmRUb2dnbGUSKwoObmV3X290cl90b2dnbGUYBCAB",
          "KA4yEy5PZmZUaGVSZWNvcmRUb2dnbGUiRQoMSGFzaE1vZGlmaWVyEhEKCXVw",
          "ZGF0ZV9pZBgBIAEoCRIRCgloYXNoX2RpZmYYAiABKAQSDwoHdmVyc2lvbhgE",
          "IAEoBCKaBQoFRXZlbnQSKAoPY29udmVyc2F0aW9uX2lkGAEgASgLMg8uQ29u",
          "dmVyc2F0aW9uSWQSIQoJc2VuZGVyX2lkGAIgASgLMg4uUGFydGljaXBhbnRJ",
          "ZBIRCgl0aW1lc3RhbXAYAyABKAQSKQoQc2VsZl9ldmVudF9zdGF0ZRgEIAEo",
          "CzIPLlVzZXJFdmVudFN0YXRlEiAKC3NvdXJjZV90eXBlGAYgASgOMgsuU291",
          "cmNlVHlwZRIiCgxjaGF0X21lc3NhZ2UYByABKAsyDC5DaGF0TWVzc2FnZRIs",
          "ChFtZW1iZXJzaGlwX2NoYW5nZRgJIAEoCzIRLk1lbWJlcnNoaXBDaGFuZ2US",
          "MAoTY29udmVyc2F0aW9uX3JlbmFtZRgKIAEoCzITLkNvbnZlcnNhdGlvblJl",
          "bmFtZRIkCg1oYW5nb3V0X2V2ZW50GAsgASgLMg0uSGFuZ291dEV2ZW50EhAK",
          "CGV2ZW50X2lkGAwgASgJEhwKFGV4cGlyYXRpb25fdGltZXN0YW1wGA0gASgE",
          "EioKEG90cl9tb2RpZmljYXRpb24YDiABKAsyEC5PVFJNb2RpZmljYXRpb24S",
          "HwoXYWR2YW5jZXNfc29ydF90aW1lc3RhbXAYDyABKAgSJwoKb3RyX3N0YXR1",
          "cxgQIAEoDjITLk9mZlRoZVJlY29yZFN0YXR1cxIRCglwZXJzaXN0ZWQYESAB",
          "KAgSJAoLbWVkaXVtX3R5cGUYFCABKAsyDy5EZWxpdmVyeU1lZGl1bRIeCgpl",
          "dmVudF90eXBlGBcgASgOMgouRXZlbnRUeXBlEhUKDWV2ZW50X3ZlcnNpb24Y",
          "GCABKAQSJAoNaGFzaF9tb2RpZmllchgaIAEoCzINLkhhc2hNb2RpZmllciJW",
          "Cg1Vc2VyUmVhZFN0YXRlEiYKDnBhcnRpY2lwYW50X2lkGAEgASgLMg4uUGFy",
          "dGljaXBhbnRJZBIdChVsYXRlc3RfcmVhZF90aW1lc3RhbXAYAiABKAQiUQoO",
          "RGVsaXZlcnlNZWRpdW0SKAoLbWVkaXVtX3R5cGUYASABKA4yEy5EZWxpdmVy",
          "eU1lZGl1bVR5cGUSFQoFcGhvbmUYAiABKAsyBi5QaG9uZSJZChREZWxpdmVy",
          "eU1lZGl1bU9wdGlvbhIoCg9kZWxpdmVyeV9tZWRpdW0YASABKAsyDy5EZWxp",
          "dmVyeU1lZGl1bRIXCg9jdXJyZW50X2RlZmF1bHQYAiABKAgi+gIKFVVzZXJD",
          "b252ZXJzYXRpb25TdGF0ZRIbChNjbGllbnRfZ2VuZXJhdGVkX2lkGAIgASgJ",
          "EicKD3NlbGZfcmVhZF9zdGF0ZRgHIAEoCzIOLlVzZXJSZWFkU3RhdGUSIwoG",
          "c3RhdHVzGAggASgOMhMuQ29udmVyc2F0aW9uU3RhdHVzEi4KEm5vdGlmaWNh",
          "dGlvbl9sZXZlbBgJIAEoDjISLk5vdGlmaWNhdGlvbkxldmVsEh8KBHZpZXcY",
          "CiADKA4yES5Db252ZXJzYXRpb25WaWV3EiIKCmludml0ZXJfaWQYCyABKAsy",
          "Di5QYXJ0aWNpcGFudElkEhgKEGludml0ZV90aW1lc3RhbXAYDCABKAQSFgoO",
          "c29ydF90aW1lc3RhbXAYDSABKAQSGAoQYWN0aXZlX3RpbWVzdGFtcBgOIAEo",
          "BBI1ChZkZWxpdmVyeV9tZWRpdW1fb3B0aW9uGBEgAygLMhUuRGVsaXZlcnlN",
          "ZWRpdW1PcHRpb24i3AEKG0NvbnZlcnNhdGlvblBhcnRpY2lwYW50RGF0YRIa",
          "CgJpZBgBIAEoCzIOLlBhcnRpY2lwYW50SWQSFQoNZmFsbGJhY2tfbmFtZRgC",
          "IAEoCRIsChFpbnZpdGF0aW9uX3N0YXR1cxgDIAEoDjIRLkludml0YXRpb25T",
          "dGF0dXMSKgoQcGFydGljaXBhbnRfdHlwZRgFIAEoDjIQLlBhcnRpY2lwYW50",
          "VHlwZRIwChVuZXdfaW52aXRhdGlvbl9zdGF0dXMYBiABKA4yES5JbnZpdGF0",
          "aW9uU3RhdHVzIo8ECgxDb252ZXJzYXRpb24SKAoPY29udmVyc2F0aW9uX2lk",
          "GAEgASgLMg8uQ29udmVyc2F0aW9uSWQSHwoEdHlwZRgCIAEoDjIRLkNvbnZl",
          "cnNhdGlvblR5cGUSDAoEbmFtZRgDIAEoCRI3ChdzZWxmX2NvbnZlcnNhdGlv",
          "bl9zdGF0ZRgEIAEoCzIWLlVzZXJDb252ZXJzYXRpb25TdGF0ZRIiCgpyZWFk",
          "X3N0YXRlGAggAygLMg4uVXNlclJlYWRTdGF0ZRIaChJoYXNfYWN0aXZlX2hh",
          "bmdvdXQYCSABKAgSJwoKb3RyX3N0YXR1cxgKIAEoDjITLk9mZlRoZVJlY29y",
          "ZFN0YXR1cxInCgpvdHJfdG9nZ2xlGAsgASgOMhMuT2ZmVGhlUmVjb3JkVG9n",
          "Z2xlEiYKHmNvbnZlcnNhdGlvbl9oaXN0b3J5X3N1cHBvcnRlZBgMIAEoCBIr",
          "ChNjdXJyZW50X3BhcnRpY2lwYW50GA0gAygLMg4uUGFydGljaXBhbnRJZBI2",
          "ChBwYXJ0aWNpcGFudF9kYXRhGA4gAygLMhwuQ29udmVyc2F0aW9uUGFydGlj",
          "aXBhbnREYXRhEiIKDG5ldHdvcmtfdHlwZRgSIAMoDjIMLk5ldHdvcmtUeXBl",
          "EioKE2ZvcmNlX2hpc3Rvcnlfc3RhdGUYEyABKA4yDS5Gb3JjZUhpc3Rvcnki",
          "HAoJRWFzdGVyRWdnEg8KB21lc3NhZ2UYASABKAkiYAoQQmxvY2tTdGF0ZUNo",
          "YW5nZRImCg5wYXJ0aWNpcGFudF9pZBgBIAEoCzIOLlBhcnRpY2lwYW50SWQS",
          "JAoPbmV3X2Jsb2NrX3N0YXRlGAIgASgOMgsuQmxvY2tTdGF0ZSJsCgVQaG90",
          "bxIQCghwaG90b19pZBgBIAEoCRIlCh1kZWxldGVfYWxidW1sZXNzX3NvdXJj",
          "ZV9waG90bxgCIAEoCBIPCgd1c2VyX2lkGAMgASgJEhkKEWlzX2N1c3RvbV91",
          "c2VyX2lkGAQgASgIIiYKDUV4aXN0aW5nTWVkaWESFQoFcGhvdG8YASABKAsy",
          "Bi5QaG90byLQAQoSRXZlbnRSZXF1ZXN0SGVhZGVyEigKD2NvbnZlcnNhdGlv",
          "bl9pZBgBIAEoCzIPLkNvbnZlcnNhdGlvbklkEhsKE2NsaWVudF9nZW5lcmF0",
          "ZWRfaWQYAiABKAQSKQoMZXhwZWN0ZWRfb3RyGAMgASgOMhMuT2ZmVGhlUmVj",
          "b3JkU3RhdHVzEigKD2RlbGl2ZXJ5X21lZGl1bRgEIAEoCzIPLkRlbGl2ZXJ5",
          "TWVkaXVtEh4KCmV2ZW50X3R5cGUYBSABKA4yCi5FdmVudFR5cGUiuQEKDUNs",
          "aWVudFZlcnNpb24SHAoJY2xpZW50X2lkGAEgASgOMgkuQ2xpZW50SWQSJAoK",
          "YnVpbGRfdHlwZRgCIAEoDjIQLkNsaWVudEJ1aWxkVHlwZRIVCg1tYWpvcl92",
          "ZXJzaW9uGAMgASgJEhkKEXZlcnNpb25fdGltZXN0YW1wGAQgASgEEhkKEWRl",
          "dmljZV9vc192ZXJzaW9uGAUgASgJEhcKD2RldmljZV9oYXJkd2FyZRgGIAEo",
          "CSJ8Cg1SZXF1ZXN0SGVhZGVyEiYKDmNsaWVudF92ZXJzaW9uGAEgASgLMg4u",
          "Q2xpZW50VmVyc2lvbhIsChFjbGllbnRfaWRlbnRpZmllchgCIAEoCzIRLkNs",
          "aWVudElkZW50aWZpZXISFQoNbGFuZ3VhZ2VfY29kZRgEIAEoCSKWAQoOUmVz",
          "cG9uc2VIZWFkZXISHwoGc3RhdHVzGAEgASgOMg8uUmVzcG9uc2VTdGF0dXMS",
          "GQoRZXJyb3JfZGVzY3JpcHRpb24YAiABKAkSEQoJZGVidWdfdXJsGAMgASgJ",
          "EhgKEHJlcXVlc3RfdHJhY2VfaWQYBCABKAkSGwoTY3VycmVudF9zZXJ2ZXJf",
          "dGltZRgFIAEoBCLPAgoGRW50aXR5EhoKAmlkGAkgASgLMg4uUGFydGljaXBh",
          "bnRJZBIbCghwcmVzZW5jZRgIIAEoCzIJLlByZXNlbmNlEiUKCnByb3BlcnRp",
          "ZXMYCiABKAsyES5FbnRpdHlQcm9wZXJ0aWVzEiUKC2VudGl0eV90eXBlGA0g",
          "ASgOMhAuUGFydGljaXBhbnRUeXBlEjgKFmhhZF9wYXN0X2hhbmdvdXRfc3Rh",
          "dGUYECABKA4yGC5FbnRpdHkuUGFzdEhhbmdvdXRTdGF0ZSKDAQoQUGFzdEhh",
          "bmdvdXRTdGF0ZRIeChpQQVNUX0hBTkdPVVRfU1RBVEVfVU5LTk9XThAAEicK",
          "I1BBU1RfSEFOR09VVF9TVEFURV9IQURfUEFTVF9IQU5HT1VUEAESJgoiUEFT",
          "VF9IQU5HT1VUX1NUQVRFX05PX1BBU1RfSEFOR09VVBACIv8BChBFbnRpdHlQ",
          "cm9wZXJ0aWVzEhoKBHR5cGUYASABKA4yDC5Qcm9maWxlVHlwZRIUCgxkaXNw",
          "bGF5X25hbWUYAiABKAkSEgoKZmlyc3RfbmFtZRgDIAEoCRIRCglwaG90b191",
          "cmwYBCABKAkSDQoFZW1haWwYBSADKAkSDQoFcGhvbmUYBiADKAkSFwoPaW5f",
          "dXNlcnNfZG9tYWluGAogASgIEhcKBmdlbmRlchgLIAEoDjIHLkdlbmRlchIp",
          "ChBwaG90b191cmxfc3RhdHVzGAwgASgOMg8uUGhvdG9VcmxTdGF0dXMSFwoP",
          "Y2Fub25pY2FsX2VtYWlsGA8gASgJIrQBChFDb252ZXJzYXRpb25TdGF0ZRIo",
          "Cg9jb252ZXJzYXRpb25faWQYASABKAsyDy5Db252ZXJzYXRpb25JZBIjCgxj",
          "b252ZXJzYXRpb24YAiABKAsyDS5Db252ZXJzYXRpb24SFQoFZXZlbnQYAyAD",
          "KAsyBi5FdmVudBI5ChhldmVudF9jb250aW51YXRpb25fdG9rZW4YBSABKAsy",
          "Fy5FdmVudENvbnRpbnVhdGlvblRva2VuImcKFkV2ZW50Q29udGludWF0aW9u",
          "VG9rZW4SEAoIZXZlbnRfaWQYASABKAkSIgoac3RvcmFnZV9jb250aW51YXRp",
          "b25fdG9rZW4YAiABKAwSFwoPZXZlbnRfdGltZXN0YW1wGAMgASgEIiMKEEVu",
          "dGl0eUxvb2t1cFNwZWMSDwoHZ2FpYV9pZBgBIAEoCSJYChBDb25maWd1cmF0",
          "aW9uQml0EjUKFmNvbmZpZ3VyYXRpb25fYml0X3R5cGUYASABKA4yFS5Db25m",
          "aWd1cmF0aW9uQml0VHlwZRINCgV2YWx1ZRgCIAEoCCJXChFSaWNoUHJlc2Vu",
          "Y2VTdGF0ZRJCCh9nZXRfcmljaF9wcmVzZW5jZV9lbmFibGVkX3N0YXRlGAMg",
          "AygLMhkuUmljaFByZXNlbmNlRW5hYmxlZFN0YXRlIkwKGFJpY2hQcmVzZW5j",
          "ZUVuYWJsZWRTdGF0ZRIfCgR0eXBlGAEgASgOMhEuUmljaFByZXNlbmNlVHlw",
          "ZRIPCgdlbmFibGVkGAIgASgIIigKEURlc2t0b3BPZmZTZXR0aW5nEhMKC2Rl",
          "c2t0b3Bfb2ZmGAEgASgIIjcKD0Rlc2t0b3BPZmZTdGF0ZRITCgtkZXNrdG9w",
          "X29mZhgBIAEoCBIPCgd2ZXJzaW9uGAIgASgEIjoKCkRuZFNldHRpbmcSFgoO",
          "ZG9fbm90X2Rpc3R1cmIYASABKAgSFAoMdGltZW91dF9zZWNzGAIgASgEIlQK",
          "FFByZXNlbmNlU3RhdGVTZXR0aW5nEhQKDHRpbWVvdXRfc2VjcxgBIAEoBBIm",
          "CgR0eXBlGAIgASgOMhguQ2xpZW50UHJlc2VuY2VTdGF0ZVR5cGUiMQoLTW9v",
          "ZE1lc3NhZ2USIgoMbW9vZF9jb250ZW50GAEgASgLMgwuTW9vZENvbnRlbnQi",
          "KAoLTW9vZENvbnRlbnQSGQoHc2VnbWVudBgBIAMoCzIILlNlZ21lbnQiMQoL",
          "TW9vZFNldHRpbmcSIgoMbW9vZF9tZXNzYWdlGAEgASgLMgwuTW9vZE1lc3Nh",
          "Z2UiLwoJTW9vZFN0YXRlEiIKDG1vb2Rfc2V0dGluZxgEIAEoCzIMLk1vb2RT",
          "ZXR0aW5nIncKDERlbGV0ZUFjdGlvbhIfChdkZWxldGVfYWN0aW9uX3RpbWVz",
          "dGFtcBgBIAEoBBIkChxkZWxldGVfdXBwZXJfYm91bmRfdGltZXN0YW1wGAIg",
          "ASgEEiAKC2RlbGV0ZV90eXBlGAMgASgOMgsuRGVsZXRlVHlwZSIzCglJbnZp",
          "dGVlSUQSDwoHZ2FpYV9pZBgBIAEoCRIVCg1mYWxsYmFja19uYW1lGAQgASgJ",
          "IjQKB0NvdW50cnkSEwoLcmVnaW9uX2NvZGUYASABKAkSFAoMY291bnRyeV9j",
          "b2RlGAIgASgEIm4KE0Rlc2t0b3BTb3VuZFNldHRpbmcSKAoTZGVza3RvcF9z",
          "b3VuZF9zdGF0ZRgBIAEoDjILLlNvdW5kU3RhdGUSLQoYZGVza3RvcF9yaW5n",
          "X3NvdW5kX3N0YXRlGAIgASgOMgsuU291bmRTdGF0ZSJaCglQaG9uZURhdGES",
          "FQoFcGhvbmUYASADKAsyBi5QaG9uZRI2ChdjYWxsZXJfaWRfc2V0dGluZ3Nf",
          "bWFzaxgDIAEoDjIVLkNhbGxlcklkU2V0dGluZ3NNYXNrItwBCgVQaG9uZRIi",
          "CgxwaG9uZV9udW1iZXIYASABKAsyDC5QaG9uZU51bWJlchIUCgxnb29nbGVf",
          "dm9pY2UYAiABKAgSNQoTdmVyaWZpY2F0aW9uX3N0YXR1cxgDIAEoDjIYLlBo",
          "b25lVmVyaWZpY2F0aW9uU3RhdHVzEhQKDGRpc2NvdmVyYWJsZRgEIAEoCBI7",
          "ChZkaXNjb3ZlcmFiaWxpdHlfc3RhdHVzGAUgASgOMhsuUGhvbmVEaXNjb3Zl",
          "cmFiaWxpdHlTdGF0dXMSDwoHcHJpbWFyeRgGIAEoCCKxAQoISTE4bkRhdGES",
          "FwoPbmF0aW9uYWxfbnVtYmVyGAEgASgJEhwKFGludGVybmF0aW9uYWxfbnVt",
          "YmVyGAIgASgJEhQKDGNvdW50cnlfY29kZRgDIAEoBBITCgtyZWdpb25fY29k",
          "ZRgEIAEoCRIQCghpc192YWxpZBgFIAEoCBIxChF2YWxpZGF0aW9uX3Jlc3Vs",
          "dBgGIAEoDjIWLlBob25lVmFsaWRhdGlvblJlc3VsdCI5CgtQaG9uZU51bWJl",
          "chIMCgRlMTY0GAEgASgJEhwKCWkxOG5fZGF0YRgCIAEoCzIJLkkxOG5EYXRh",
          "Ij4KGVN1Z2dlc3RlZENvbnRhY3RHcm91cEhhc2gSEwoLbWF4X3Jlc3VsdHMY",
          "ASABKAQSDAoEaGFzaBgCIAEoDCJZChBTdWdnZXN0ZWRDb250YWN0EhcKBmVu",
          "dGl0eRgBIAEoCzIHLkVudGl0eRIsChFpbnZpdGF0aW9uX3N0YXR1cxgCIAEo",
          "DjIRLkludml0YXRpb25TdGF0dXMiXwoVU3VnZ2VzdGVkQ29udGFjdEdyb3Vw",
          "EhQKDGhhc2hfbWF0Y2hlZBgBIAEoCBIMCgRoYXNoGAIgASgMEiIKB2NvbnRh",
          "Y3QYAyADKAsyES5TdWdnZXN0ZWRDb250YWN0IvIHCgtTdGF0ZVVwZGF0ZRIv",
          "ChNzdGF0ZV91cGRhdGVfaGVhZGVyGAEgASgLMhIuU3RhdGVVcGRhdGVIZWFk",
          "ZXISIwoMY29udmVyc2F0aW9uGA0gASgLMg0uQ29udmVyc2F0aW9uEjAKEmV2",
          "ZW50X25vdGlmaWNhdGlvbhgDIAEoCzISLkV2ZW50Tm90aWZpY2F0aW9uSAAS",
          "MwoSZm9jdXNfbm90aWZpY2F0aW9uGAQgASgLMhUuU2V0Rm9jdXNOb3RpZmlj",
          "YXRpb25IABI1ChN0eXBpbmdfbm90aWZpY2F0aW9uGAUgASgLMhYuU2V0VHlw",
          "aW5nTm90aWZpY2F0aW9uSAASWAofbm90aWZpY2F0aW9uX2xldmVsX25vdGlm",
          "aWNhdGlvbhgGIAEoCzItLlNldENvbnZlcnNhdGlvbk5vdGlmaWNhdGlvbkxl",
          "dmVsTm90aWZpY2F0aW9uSAASQgoccmVwbHlfdG9faW52aXRlX25vdGlmaWNh",
          "dGlvbhgHIAEoCzIaLlJlcGx5VG9JbnZpdGVOb3RpZmljYXRpb25IABI4ChZ3",
          "YXRlcm1hcmtfbm90aWZpY2F0aW9uGAggASgLMhYuV2F0ZXJtYXJrTm90aWZp",
          "Y2F0aW9uSAASOgoRdmlld19tb2RpZmljYXRpb24YCyABKAsyHS5Db252ZXJz",
          "YXRpb25WaWV3TW9kaWZpY2F0aW9uSAASOQoXZWFzdGVyX2VnZ19ub3RpZmlj",
          "YXRpb24YDCABKAsyFi5FYXN0ZXJFZ2dOb3RpZmljYXRpb25IABI/ChpzZWxm",
          "X3ByZXNlbmNlX25vdGlmaWNhdGlvbhgOIAEoCzIZLlNlbGZQcmVzZW5jZU5v",
          "dGlmaWNhdGlvbkgAEjgKE2RlbGV0ZV9ub3RpZmljYXRpb24YDyABKAsyGS5E",
          "ZWxldGVBY3Rpb25Ob3RpZmljYXRpb25IABI2ChVwcmVzZW5jZV9ub3RpZmlj",
          "YXRpb24YECABKAsyFS5QcmVzZW5jZU5vdGlmaWNhdGlvbkgAEjAKEmJsb2Nr",
          "X25vdGlmaWNhdGlvbhgRIAEoCzISLkJsb2NrTm90aWZpY2F0aW9uSAASUAoh",
          "bm90aWZpY2F0aW9uX3NldHRpbmdfbm90aWZpY2F0aW9uGBMgASgLMiMuU2V0",
          "Tm90aWZpY2F0aW9uU2V0dGluZ05vdGlmaWNhdGlvbkgAElkKKHJpY2hfcHJl",
          "c2VuY2VfZW5hYmxlZF9zdGF0ZV9ub3RpZmljYXRpb24YFCABKAsyJS5SaWNo",
          "UHJlc2VuY2VFbmFibGVkU3RhdGVOb3RpZmljYXRpb25IAEIOCgxzdGF0ZV91",
          "cGRhdGUisQEKEVN0YXRlVXBkYXRlSGVhZGVyEi8KE2FjdGl2ZV9jbGllbnRf",
          "c3RhdGUYASABKA4yEi5BY3RpdmVDbGllbnRTdGF0ZRIYChByZXF1ZXN0X3Ry",
          "YWNlX2lkGAMgASgJEjQKFW5vdGlmaWNhdGlvbl9zZXR0aW5ncxgEIAEoCzIV",
          "Lk5vdGlmaWNhdGlvblNldHRpbmdzEhsKE2N1cnJlbnRfc2VydmVyX3RpbWUY",
          "BSABKAQiMQoLQmF0Y2hVcGRhdGUSIgoMc3RhdGVfdXBkYXRlGAEgAygLMgwu",
          "U3RhdGVVcGRhdGUiKgoRRXZlbnROb3RpZmljYXRpb24SFQoFZXZlbnQYASAB",
          "KAsyBi5FdmVudCKuAQoUU2V0Rm9jdXNOb3RpZmljYXRpb24SKAoPY29udmVy",
          "c2F0aW9uX2lkGAEgASgLMg8uQ29udmVyc2F0aW9uSWQSIQoJc2VuZGVyX2lk",
          "GAIgASgLMg4uUGFydGljaXBhbnRJZBIRCgl0aW1lc3RhbXAYAyABKAQSGAoE",
          "dHlwZRgEIAEoDjIKLkZvY3VzVHlwZRIcCgZkZXZpY2UYBSABKA4yDC5Gb2N1",
          "c0RldmljZSKSAQoVU2V0VHlwaW5nTm90aWZpY2F0aW9uEigKD2NvbnZlcnNh",
          "dGlvbl9pZBgBIAEoCzIPLkNvbnZlcnNhdGlvbklkEiEKCXNlbmRlcl9pZBgC",
          "IAEoCzIOLlBhcnRpY2lwYW50SWQSEQoJdGltZXN0YW1wGAMgASgEEhkKBHR5",
          "cGUYBCABKA4yCy5UeXBpbmdUeXBlIo4BCixTZXRDb252ZXJzYXRpb25Ob3Rp",
          "ZmljYXRpb25MZXZlbE5vdGlmaWNhdGlvbhIoCg9jb252ZXJzYXRpb25faWQY",
          "ASABKAsyDy5Db252ZXJzYXRpb25JZBIhCgVsZXZlbBgCIAEoDjISLk5vdGlm",
          "aWNhdGlvbkxldmVsEhEKCXRpbWVzdGFtcBgEIAEoBCJnChlSZXBseVRvSW52",
          "aXRlTm90aWZpY2F0aW9uEigKD2NvbnZlcnNhdGlvbl9pZBgBIAEoCzIPLkNv",
          "bnZlcnNhdGlvbklkEiAKBHR5cGUYAiABKA4yEi5SZXBseVRvSW52aXRlVHlw",
          "ZSKDAQoVV2F0ZXJtYXJrTm90aWZpY2F0aW9uEiEKCXNlbmRlcl9pZBgBIAEo",
          "CzIOLlBhcnRpY2lwYW50SWQSKAoPY29udmVyc2F0aW9uX2lkGAIgASgLMg8u",
          "Q29udmVyc2F0aW9uSWQSHQoVbGF0ZXN0X3JlYWRfdGltZXN0YW1wGAMgASgE",
          "IpIBChxDb252ZXJzYXRpb25WaWV3TW9kaWZpY2F0aW9uEigKD2NvbnZlcnNh",
          "dGlvbl9pZBgBIAEoCzIPLkNvbnZlcnNhdGlvbklkEiMKCG9sZF92aWV3GAIg",
          "ASgOMhEuQ29udmVyc2F0aW9uVmlldxIjCghuZXdfdmlldxgDIAEoDjIRLkNv",
          "bnZlcnNhdGlvblZpZXcihAEKFUVhc3RlckVnZ05vdGlmaWNhdGlvbhIhCglz",
          "ZW5kZXJfaWQYASABKAsyDi5QYXJ0aWNpcGFudElkEigKD2NvbnZlcnNhdGlv",
          "bl9pZBgCIAEoCzIPLkNvbnZlcnNhdGlvbklkEh4KCmVhc3Rlcl9lZ2cYAyAB",
          "KAsyCi5FYXN0ZXJFZ2cigwIKGFNlbGZQcmVzZW5jZU5vdGlmaWNhdGlvbhIz",
          "ChVjbGllbnRfcHJlc2VuY2Vfc3RhdGUYASABKAsyFC5DbGllbnRQcmVzZW5j",
          "ZVN0YXRlEjQKFmRvX25vdF9kaXN0dXJiX3NldHRpbmcYAyABKAsyFC5Eb05v",
          "dERpc3R1cmJTZXR0aW5nEi8KE2Rlc2t0b3Bfb2ZmX3NldHRpbmcYBCABKAsy",
          "Ei5EZXNrdG9wT2ZmU2V0dGluZxIrChFkZXNrdG9wX29mZl9zdGF0ZRgFIAEo",
          "CzIQLkRlc2t0b3BPZmZTdGF0ZRIeCgptb29kX3N0YXRlGAYgASgLMgouTW9v",
          "ZFN0YXRlImoKGERlbGV0ZUFjdGlvbk5vdGlmaWNhdGlvbhIoCg9jb252ZXJz",
          "YXRpb25faWQYASABKAsyDy5Db252ZXJzYXRpb25JZBIkCg1kZWxldGVfYWN0",
          "aW9uGAIgASgLMg0uRGVsZXRlQWN0aW9uIjkKFFByZXNlbmNlTm90aWZpY2F0",
          "aW9uEiEKCHByZXNlbmNlGAEgAygLMg8uUHJlc2VuY2VSZXN1bHQiQgoRQmxv",
          "Y2tOb3RpZmljYXRpb24SLQoSYmxvY2tfc3RhdGVfY2hhbmdlGAEgAygLMhEu",
          "QmxvY2tTdGF0ZUNoYW5nZSJZCiJTZXROb3RpZmljYXRpb25TZXR0aW5nTm90",
          "aWZpY2F0aW9uEjMKFWRlc2t0b3Bfc291bmRfc2V0dGluZxgCIAEoCzIULkRl",
          "c2t0b3BTb3VuZFNldHRpbmciZgokUmljaFByZXNlbmNlRW5hYmxlZFN0YXRl",
          "Tm90aWZpY2F0aW9uEj4KG3JpY2hfcHJlc2VuY2VfZW5hYmxlZF9zdGF0ZRgB",
          "IAMoCzIZLlJpY2hQcmVzZW5jZUVuYWJsZWRTdGF0ZSI8ChBDb252ZXJzYXRp",
          "b25TcGVjEigKD2NvbnZlcnNhdGlvbl9pZBgBIAEoCzIPLkNvbnZlcnNhdGlv",
          "bklkIosBCg5BZGRVc2VyUmVxdWVzdBImCg5yZXF1ZXN0X2hlYWRlchgBIAEo",
          "CzIOLlJlcXVlc3RIZWFkZXISHgoKaW52aXRlZV9pZBgDIAMoCzIKLkludml0",
          "ZWVJRBIxChRldmVudF9yZXF1ZXN0X2hlYWRlchgFIAEoCzITLkV2ZW50UmVx",
          "dWVzdEhlYWRlciJaCg9BZGRVc2VyUmVzcG9uc2USKAoPcmVzcG9uc2VfaGVh",
          "ZGVyGAEgASgLMg8uUmVzcG9uc2VIZWFkZXISHQoNY3JlYXRlZF9ldmVudBgF",
          "IAEoCzIGLkV2ZW50Iq8BChlDcmVhdGVDb252ZXJzYXRpb25SZXF1ZXN0EiYK",
          "DnJlcXVlc3RfaGVhZGVyGAEgASgLMg4uUmVxdWVzdEhlYWRlchIfCgR0eXBl",
          "GAIgASgOMhEuQ29udmVyc2F0aW9uVHlwZRIbChNjbGllbnRfZ2VuZXJhdGVk",
          "X2lkGAMgASgEEgwKBG5hbWUYBCABKAkSHgoKaW52aXRlZV9pZBgFIAMoCzIK",
          "Lkludml0ZWVJRCKNAQoaQ3JlYXRlQ29udmVyc2F0aW9uUmVzcG9uc2USKAoP",
          "cmVzcG9uc2VfaGVhZGVyGAEgASgLMg8uUmVzcG9uc2VIZWFkZXISIwoMY29u",
          "dmVyc2F0aW9uGAIgASgLMg0uQ29udmVyc2F0aW9uEiAKGG5ld19jb252ZXJz",
          "YXRpb25fY3JlYXRlZBgHIAEoCCKTAQoZRGVsZXRlQ29udmVyc2F0aW9uUmVx",
          "dWVzdBImCg5yZXF1ZXN0X2hlYWRlchgBIAEoCzIOLlJlcXVlc3RIZWFkZXIS",
          "KAoPY29udmVyc2F0aW9uX2lkGAIgASgLMg8uQ29udmVyc2F0aW9uSWQSJAoc",
          "ZGVsZXRlX3VwcGVyX2JvdW5kX3RpbWVzdGFtcBgDIAEoBCJsChpEZWxldGVD",
          "b252ZXJzYXRpb25SZXNwb25zZRIoCg9yZXNwb25zZV9oZWFkZXIYASABKAsy",
          "Dy5SZXNwb25zZUhlYWRlchIkCg1kZWxldGVfYWN0aW9uGAIgASgLMg0uRGVs",
          "ZXRlQWN0aW9uIoQBChBFYXN0ZXJFZ2dSZXF1ZXN0EiYKDnJlcXVlc3RfaGVh",
          "ZGVyGAEgASgLMg4uUmVxdWVzdEhlYWRlchIoCg9jb252ZXJzYXRpb25faWQY",
          "AiABKAsyDy5Db252ZXJzYXRpb25JZBIeCgplYXN0ZXJfZWdnGAMgASgLMgou",
          "RWFzdGVyRWdnIlAKEUVhc3RlckVnZ1Jlc3BvbnNlEigKD3Jlc3BvbnNlX2hl",
          "YWRlchgBIAEoCzIPLlJlc3BvbnNlSGVhZGVyEhEKCXRpbWVzdGFtcBgCIAEo",
          "BCLlAQoWR2V0Q29udmVyc2F0aW9uUmVxdWVzdBImCg5yZXF1ZXN0X2hlYWRl",
          "chgBIAEoCzIOLlJlcXVlc3RIZWFkZXISLAoRY29udmVyc2F0aW9uX3NwZWMY",
          "AiABKAsyES5Db252ZXJzYXRpb25TcGVjEhUKDWluY2x1ZGVfZXZlbnQYBCAB",
          "KAgSIwobbWF4X2V2ZW50c19wZXJfY29udmVyc2F0aW9uGAYgASgEEjkKGGV2",
          "ZW50X2NvbnRpbnVhdGlvbl90b2tlbhgHIAEoCzIXLkV2ZW50Q29udGludWF0",
          "aW9uVG9rZW4icwoXR2V0Q29udmVyc2F0aW9uUmVzcG9uc2USKAoPcmVzcG9u",
          "c2VfaGVhZGVyGAEgASgLMg8uUmVzcG9uc2VIZWFkZXISLgoSY29udmVyc2F0",
          "aW9uX3N0YXRlGAIgASgLMhIuQ29udmVyc2F0aW9uU3RhdGUibAoUR2V0RW50",
          "aXR5QnlJZFJlcXVlc3QSJgoOcmVxdWVzdF9oZWFkZXIYASABKAsyDi5SZXF1",
          "ZXN0SGVhZGVyEiwKEWJhdGNoX2xvb2t1cF9zcGVjGAMgAygLMhEuRW50aXR5",
          "TG9va3VwU3BlYyJaChVHZXRFbnRpdHlCeUlkUmVzcG9uc2USKAoPcmVzcG9u",
          "c2VfaGVhZGVyGAEgASgLMg8uUmVzcG9uc2VIZWFkZXISFwoGZW50aXR5GAIg",
          "AygLMgcuRW50aXR5IpUDChtHZXRTdWdnZXN0ZWRFbnRpdGllc1JlcXVlc3QS",
          "JgoOcmVxdWVzdF9oZWFkZXIYASABKAsyDi5SZXF1ZXN0SGVhZGVyEi0KCWZh",
          "dm9yaXRlcxgIIAEoCzIaLlN1Z2dlc3RlZENvbnRhY3RHcm91cEhhc2gSPQoZ",
          "Y29udGFjdHNfeW91X2hhbmdvdXRfd2l0aBgJIAEoCzIaLlN1Z2dlc3RlZENv",
          "bnRhY3RHcm91cEhhc2gSPgoab3RoZXJfY29udGFjdHNfb25faGFuZ291dHMY",
          "CiABKAsyGi5TdWdnZXN0ZWRDb250YWN0R3JvdXBIYXNoEjIKDm90aGVyX2Nv",
          "bnRhY3RzGAsgASgLMhouU3VnZ2VzdGVkQ29udGFjdEdyb3VwSGFzaBI2ChJk",
          "aXNtaXNzZWRfY29udGFjdHMYDCABKAsyGi5TdWdnZXN0ZWRDb250YWN0R3Jv",
          "dXBIYXNoEjQKEHBpbm5lZF9mYXZvcml0ZXMYDSABKAsyGi5TdWdnZXN0ZWRD",
          "b250YWN0R3JvdXBIYXNoIpkDChxHZXRTdWdnZXN0ZWRFbnRpdGllc1Jlc3Bv",
          "bnNlEigKD3Jlc3BvbnNlX2hlYWRlchgBIAEoCzIPLlJlc3BvbnNlSGVhZGVy",
          "EhcKBmVudGl0eRgCIAMoCzIHLkVudGl0eRIpCglmYXZvcml0ZXMYBCABKAsy",
          "Fi5TdWdnZXN0ZWRDb250YWN0R3JvdXASOQoZY29udGFjdHNfeW91X2hhbmdv",
          "dXRfd2l0aBgFIAEoCzIWLlN1Z2dlc3RlZENvbnRhY3RHcm91cBI6ChpvdGhl",
          "cl9jb250YWN0c19vbl9oYW5nb3V0cxgGIAEoCzIWLlN1Z2dlc3RlZENvbnRh",
          "Y3RHcm91cBIuCg5vdGhlcl9jb250YWN0cxgHIAEoCzIWLlN1Z2dlc3RlZENv",
          "bnRhY3RHcm91cBIyChJkaXNtaXNzZWRfY29udGFjdHMYCCABKAsyFi5TdWdn",
          "ZXN0ZWRDb250YWN0R3JvdXASMAoQcGlubmVkX2Zhdm9yaXRlcxgJIAEoCzIW",
          "LlN1Z2dlc3RlZENvbnRhY3RHcm91cCI8ChJHZXRTZWxmSW5mb1JlcXVlc3QS",
          "JgoOcmVxdWVzdF9oZWFkZXIYASABKAsyDi5SZXF1ZXN0SGVhZGVyIu0DChNH",
          "ZXRTZWxmSW5mb1Jlc3BvbnNlEigKD3Jlc3BvbnNlX2hlYWRlchgBIAEoCzIP",
          "LlJlc3BvbnNlSGVhZGVyEhwKC3NlbGZfZW50aXR5GAIgASgLMgcuRW50aXR5",
          "EhYKDmlzX2tub3duX21pbm9yGAMgASgIEicKCWRuZF9zdGF0ZRgFIAEoCzIU",
          "LkRvTm90RGlzdHVyYlNldHRpbmcSLwoTZGVza3RvcF9vZmZfc2V0dGluZxgG",
          "IAEoCzISLkRlc2t0b3BPZmZTZXR0aW5nEh4KCnBob25lX2RhdGEYByABKAsy",
          "Ci5QaG9uZURhdGESLAoRY29uZmlndXJhdGlvbl9iaXQYCCADKAsyES5Db25m",
          "aWd1cmF0aW9uQml0EisKEWRlc2t0b3Bfb2ZmX3N0YXRlGAkgASgLMhAuRGVz",
          "a3RvcE9mZlN0YXRlEhgKEGdvb2dsZV9wbHVzX3VzZXIYCiABKAgSMwoVZGVz",
          "a3RvcF9zb3VuZF9zZXR0aW5nGAsgASgLMhQuRGVza3RvcFNvdW5kU2V0dGlu",
          "ZxIvChNyaWNoX3ByZXNlbmNlX3N0YXRlGAwgASgLMhIuUmljaFByZXNlbmNl",
          "U3RhdGUSIQoPZGVmYXVsdF9jb3VudHJ5GBMgASgLMgguQ291bnRyeSKGAQoU",
          "UXVlcnlQcmVzZW5jZVJlcXVlc3QSJgoOcmVxdWVzdF9oZWFkZXIYASABKAsy",
          "Di5SZXF1ZXN0SGVhZGVyEiYKDnBhcnRpY2lwYW50X2lkGAIgAygLMg4uUGFy",
          "dGljaXBhbnRJZBIeCgpmaWVsZF9tYXNrGAMgAygOMgouRmllbGRNYXNrImsK",
          "FVF1ZXJ5UHJlc2VuY2VSZXNwb25zZRIoCg9yZXNwb25zZV9oZWFkZXIYASAB",
          "KAsyDy5SZXNwb25zZUhlYWRlchIoCg9wcmVzZW5jZV9yZXN1bHQYAiADKAsy",
          "Dy5QcmVzZW5jZVJlc3VsdCJuChFSZW1vdmVVc2VyUmVxdWVzdBImCg5yZXF1",
          "ZXN0X2hlYWRlchgBIAEoCzIOLlJlcXVlc3RIZWFkZXISMQoUZXZlbnRfcmVx",
          "dWVzdF9oZWFkZXIYBSABKAsyEy5FdmVudFJlcXVlc3RIZWFkZXIiXQoSUmVt",
          "b3ZlVXNlclJlc3BvbnNlEigKD3Jlc3BvbnNlX2hlYWRlchgBIAEoCzIPLlJl",
          "c3BvbnNlSGVhZGVyEh0KDWNyZWF0ZWRfZXZlbnQYBCABKAsyBi5FdmVudCKI",
          "AQoZUmVuYW1lQ29udmVyc2F0aW9uUmVxdWVzdBImCg5yZXF1ZXN0X2hlYWRl",
          "chgBIAEoCzIOLlJlcXVlc3RIZWFkZXISEAoIbmV3X25hbWUYAyABKAkSMQoU",
          "ZXZlbnRfcmVxdWVzdF9oZWFkZXIYBSABKAsyEy5FdmVudFJlcXVlc3RIZWFk",
          "ZXIiZQoaUmVuYW1lQ29udmVyc2F0aW9uUmVzcG9uc2USKAoPcmVzcG9uc2Vf",
          "aGVhZGVyGAEgASgLMg8uUmVzcG9uc2VIZWFkZXISHQoNY3JlYXRlZF9ldmVu",
          "dBgEIAEoCzIGLkV2ZW50ImEKFVNlYXJjaEVudGl0aWVzUmVxdWVzdBImCg5y",
          "ZXF1ZXN0X2hlYWRlchgBIAEoCzIOLlJlcXVlc3RIZWFkZXISDQoFcXVlcnkY",
          "AyABKAkSEQoJbWF4X2NvdW50GAQgASgEIlsKFlNlYXJjaEVudGl0aWVzUmVz",
          "cG9uc2USKAoPcmVzcG9uc2VfaGVhZGVyGAEgASgLMg8uUmVzcG9uc2VIZWFk",
          "ZXISFwoGZW50aXR5GAIgAygLMgcuRW50aXR5IusBChZTZW5kQ2hhdE1lc3Nh",
          "Z2VSZXF1ZXN0EiYKDnJlcXVlc3RfaGVhZGVyGAEgASgLMg4uUmVxdWVzdEhl",
          "YWRlchIkCgphbm5vdGF0aW9uGAUgAygLMhAuRXZlbnRBbm5vdGF0aW9uEigK",
          "D21lc3NhZ2VfY29udGVudBgGIAEoCzIPLk1lc3NhZ2VDb250ZW50EiYKDmV4",
          "aXN0aW5nX21lZGlhGAcgASgLMg4uRXhpc3RpbmdNZWRpYRIxChRldmVudF9y",
          "ZXF1ZXN0X2hlYWRlchgIIAEoCzITLkV2ZW50UmVxdWVzdEhlYWRlciJiChdT",
          "ZW5kQ2hhdE1lc3NhZ2VSZXNwb25zZRIoCg9yZXNwb25zZV9oZWFkZXIYASAB",
          "KAsyDy5SZXNwb25zZUhlYWRlchIdCg1jcmVhdGVkX2V2ZW50GAYgASgLMgYu",
          "RXZlbnQiewoWU2V0QWN0aXZlQ2xpZW50UmVxdWVzdBImCg5yZXF1ZXN0X2hl",
          "YWRlchgBIAEoCzIOLlJlcXVlc3RIZWFkZXISEQoJaXNfYWN0aXZlGAIgASgI",
          "EhAKCGZ1bGxfamlkGAMgASgJEhQKDHRpbWVvdXRfc2VjcxgEIAEoBCJDChdT",
          "ZXRBY3RpdmVDbGllbnRSZXNwb25zZRIoCg9yZXNwb25zZV9oZWFkZXIYASAB",
          "KAsyDy5SZXNwb25zZUhlYWRlciJFChtTZXRDb252ZXJzYXRpb25MZXZlbFJl",
          "cXVlc3QSJgoOcmVxdWVzdF9oZWFkZXIYASABKAsyDi5SZXF1ZXN0SGVhZGVy",
          "IkgKHFNldENvbnZlcnNhdGlvbkxldmVsUmVzcG9uc2USKAoPcmVzcG9uc2Vf",
          "aGVhZGVyGAEgASgLMg8uUmVzcG9uc2VIZWFkZXIingEKJ1NldENvbnZlcnNh",
          "dGlvbk5vdGlmaWNhdGlvbkxldmVsUmVxdWVzdBImCg5yZXF1ZXN0X2hlYWRl",
          "chgBIAEoCzIOLlJlcXVlc3RIZWFkZXISKAoPY29udmVyc2F0aW9uX2lkGAIg",
          "ASgLMg8uQ29udmVyc2F0aW9uSWQSIQoFbGV2ZWwYAyABKA4yEi5Ob3RpZmlj",
          "YXRpb25MZXZlbCJnCihTZXRDb252ZXJzYXRpb25Ob3RpZmljYXRpb25MZXZl",
          "bFJlc3BvbnNlEigKD3Jlc3BvbnNlX2hlYWRlchgBIAEoCzIPLlJlc3BvbnNl",
          "SGVhZGVyEhEKCXRpbWVzdGFtcBgCIAEoBCKTAQoPU2V0Rm9jdXNSZXF1ZXN0",
          "EiYKDnJlcXVlc3RfaGVhZGVyGAEgASgLMg4uUmVxdWVzdEhlYWRlchIoCg9j",
          "b252ZXJzYXRpb25faWQYAiABKAsyDy5Db252ZXJzYXRpb25JZBIYCgR0eXBl",
          "GAMgASgOMgouRm9jdXNUeXBlEhQKDHRpbWVvdXRfc2VjcxgEIAEoDSJPChBT",
          "ZXRGb2N1c1Jlc3BvbnNlEigKD3Jlc3BvbnNlX2hlYWRlchgBIAEoCzIPLlJl",
          "c3BvbnNlSGVhZGVyEhEKCXRpbWVzdGFtcBgCIAEoBCLqAQoSU2V0UHJlc2Vu",
          "Y2VSZXF1ZXN0EiYKDnJlcXVlc3RfaGVhZGVyGAEgASgLMg4uUmVxdWVzdEhl",
          "YWRlchI1ChZwcmVzZW5jZV9zdGF0ZV9zZXR0aW5nGAIgASgLMhUuUHJlc2Vu",
          "Y2VTdGF0ZVNldHRpbmcSIAoLZG5kX3NldHRpbmcYAyABKAsyCy5EbmRTZXR0",
          "aW5nEi8KE2Rlc2t0b3Bfb2ZmX3NldHRpbmcYBSABKAsyEi5EZXNrdG9wT2Zm",
          "U2V0dGluZxIiCgxtb29kX3NldHRpbmcYCCABKAsyDC5Nb29kU2V0dGluZyI/",
          "ChNTZXRQcmVzZW5jZVJlc3BvbnNlEigKD3Jlc3BvbnNlX2hlYWRlchgBIAEo",
          "CzIPLlJlc3BvbnNlSGVhZGVyIn8KEFNldFR5cGluZ1JlcXVlc3QSJgoOcmVx",
          "dWVzdF9oZWFkZXIYASABKAsyDi5SZXF1ZXN0SGVhZGVyEigKD2NvbnZlcnNh",
          "dGlvbl9pZBgCIAEoCzIPLkNvbnZlcnNhdGlvbklkEhkKBHR5cGUYAyABKA4y",
          "Cy5UeXBpbmdUeXBlIlAKEVNldFR5cGluZ1Jlc3BvbnNlEigKD3Jlc3BvbnNl",
          "X2hlYWRlchgBIAEoCzIPLlJlc3BvbnNlSGVhZGVyEhEKCXRpbWVzdGFtcBgC",
          "IAEoBCJ/ChdTeW5jQWxsTmV3RXZlbnRzUmVxdWVzdBImCg5yZXF1ZXN0X2hl",
          "YWRlchgBIAEoCzIOLlJlcXVlc3RIZWFkZXISGwoTbGFzdF9zeW5jX3RpbWVz",
          "dGFtcBgCIAEoBBIfChdtYXhfcmVzcG9uc2Vfc2l6ZV9ieXRlcxgIIAEoBCKM",
          "AQoYU3luY0FsbE5ld0V2ZW50c1Jlc3BvbnNlEigKD3Jlc3BvbnNlX2hlYWRl",
          "chgBIAEoCzIPLlJlc3BvbnNlSGVhZGVyEhYKDnN5bmNfdGltZXN0YW1wGAIg",
          "ASgEEi4KEmNvbnZlcnNhdGlvbl9zdGF0ZRgDIAMoCzISLkNvbnZlcnNhdGlv",
          "blN0YXRlIqoBCh5TeW5jUmVjZW50Q29udmVyc2F0aW9uc1JlcXVlc3QSJgoO",
          "cmVxdWVzdF9oZWFkZXIYASABKAsyDi5SZXF1ZXN0SGVhZGVyEhkKEW1heF9j",
          "b252ZXJzYXRpb25zGAMgASgEEiMKG21heF9ldmVudHNfcGVyX2NvbnZlcnNh",
          "dGlvbhgEIAEoBBIgCgtzeW5jX2ZpbHRlchgFIAMoDjILLlN5bmNGaWx0ZXIi",
          "kwEKH1N5bmNSZWNlbnRDb252ZXJzYXRpb25zUmVzcG9uc2USKAoPcmVzcG9u",
          "c2VfaGVhZGVyGAEgASgLMg8uUmVzcG9uc2VIZWFkZXISFgoOc3luY190aW1l",
          "c3RhbXAYAiABKAQSLgoSY29udmVyc2F0aW9uX3N0YXRlGAMgAygLMhIuQ29u",
          "dmVyc2F0aW9uU3RhdGUihwEKFlVwZGF0ZVdhdGVybWFya1JlcXVlc3QSJgoO",
          "cmVxdWVzdF9oZWFkZXIYASABKAsyDi5SZXF1ZXN0SGVhZGVyEigKD2NvbnZl",
          "cnNhdGlvbl9pZBgCIAEoCzIPLkNvbnZlcnNhdGlvbklkEhsKE2xhc3RfcmVh",
          "ZF90aW1lc3RhbXAYAyABKAQiQwoXVXBkYXRlV2F0ZXJtYXJrUmVzcG9uc2US",
          "KAoPcmVzcG9uc2VfaGVhZGVyGAEgASgLMg8uUmVzcG9uc2VIZWFkZXIqfwoR",
          "QWN0aXZlQ2xpZW50U3RhdGUSIQodQUNUSVZFX0NMSUVOVF9TVEFURV9OT19B",
          "Q1RJVkUQABIhCh1BQ1RJVkVfQ0xJRU5UX1NUQVRFX0lTX0FDVElWRRABEiQK",
          "IEFDVElWRV9DTElFTlRfU1RBVEVfT1RIRVJfQUNUSVZFEAIqVQoJRm9jdXNU",
          "eXBlEhYKEkZPQ1VTX1RZUEVfVU5LTk9XThAAEhYKEkZPQ1VTX1RZUEVfRk9D",
          "VVNFRBABEhgKFEZPQ1VTX1RZUEVfVU5GT0NVU0VEEAIqXwoLRm9jdXNEZXZp",
          "Y2USHAoYRk9DVVNfREVWSUNFX1VOU1BFQ0lGSUVEEAASGAoURk9DVVNfREVW",
          "SUNFX0RFU0tUT1AQFBIYChNGT0NVU19ERVZJQ0VfTU9CSUxFEKwCKm8KClR5",
          "cGluZ1R5cGUSFwoTVFlQSU5HX1RZUEVfVU5LTk9XThAAEhcKE1RZUElOR19U",
          "WVBFX1NUQVJURUQQARIWChJUWVBJTkdfVFlQRV9QQVVTRUQQAhIXChNUWVBJ",
          "TkdfVFlQRV9TVE9QUEVEEAMqrgEKF0NsaWVudFByZXNlbmNlU3RhdGVUeXBl",
          "EiEKHUNMSUVOVF9QUkVTRU5DRV9TVEFURV9VTktOT1dOEAASHgoaQ0xJRU5U",
          "X1BSRVNFTkNFX1NUQVRFX05PTkUQARImCiJDTElFTlRfUFJFU0VOQ0VfU1RB",
          "VEVfREVTS1RPUF9JRExFEB4SKAokQ0xJRU5UX1BSRVNFTkNFX1NUQVRFX0RF",
          "U0tUT1BfQUNUSVZFECgqbgoRTm90aWZpY2F0aW9uTGV2ZWwSHgoaTk9USUZJ",
          "Q0FUSU9OX0xFVkVMX1VOS05PV04QABIcChhOT1RJRklDQVRJT05fTEVWRUxf",
          "UVVJRVQQChIbChdOT1RJRklDQVRJT05fTEVWRUxfUklORxAeKlgKC1NlZ21l",
          "bnRUeXBlEhUKEVNFR01FTlRfVFlQRV9URVhUEAASGwoXU0VHTUVOVF9UWVBF",
          "X0xJTkVfQlJFQUsQARIVChFTRUdNRU5UX1RZUEVfTElOSxACKmkKCEl0ZW1U",
          "eXBlEhMKD0lURU1fVFlQRV9USElORxAAEhkKFElURU1fVFlQRV9QTFVTX1BI",
          "T1RPEPkBEhQKD0lURU1fVFlQRV9QTEFDRRDPAhIXChJJVEVNX1RZUEVfUExB",
          "Q0VfVjIQ1AIqfgoUTWVtYmVyc2hpcENoYW5nZVR5cGUSIwofTUVNQkVSU0hJ",
          "UF9DSEFOR0VfVFlQRV9SRVNFUlZFRBAAEh8KG01FTUJFUlNISVBfQ0hBTkdF",
          "X1RZUEVfSk9JThABEiAKHE1FTUJFUlNISVBfQ0hBTkdFX1RZUEVfTEVBVkUQ",
          "AirrAQoQSGFuZ291dEV2ZW50VHlwZRIeChpIQU5HT1VUX0VWRU5UX1RZUEVf",
          "VU5LTk9XThAAEhwKGEhBTkdPVVRfRVZFTlRfVFlQRV9TVEFSVBABEhoKFkhB",
          "TkdPVVRfRVZFTlRfVFlQRV9FTkQQAhIbChdIQU5HT1VUX0VWRU5UX1RZUEVf",
          "Sk9JThADEhwKGEhBTkdPVVRfRVZFTlRfVFlQRV9MRUFWRRAEEiIKHkhBTkdP",
          "VVRfRVZFTlRfVFlQRV9DT01JTkdfU09PThAFEh4KGkhBTkdPVVRfRVZFTlRf",
          "VFlQRV9PTkdPSU5HEAYqfgoST2ZmVGhlUmVjb3JkVG9nZ2xlEiEKHU9GRl9U",
          "SEVfUkVDT1JEX1RPR0dMRV9VTktOT1dOEAASIQodT0ZGX1RIRV9SRUNPUkRf",
          "VE9HR0xFX0VOQUJMRUQQARIiCh5PRkZfVEhFX1JFQ09SRF9UT0dHTEVfRElT",
          "QUJMRUQQAiqKAQoST2ZmVGhlUmVjb3JkU3RhdHVzEiEKHU9GRl9USEVfUkVD",
          "T1JEX1NUQVRVU19VTktOT1dOEAASKAokT0ZGX1RIRV9SRUNPUkRfU1RBVFVT",
          "X09GRl9USEVfUkVDT1JEEAESJwojT0ZGX1RIRV9SRUNPUkRfU1RBVFVTX09O",
          "X1RIRV9SRUNPUkQQAiolCgpTb3VyY2VUeXBlEhcKE1NPVVJDRV9UWVBFX1VO",
          "S05PV04QACrzAgoJRXZlbnRUeXBlEhYKEkVWRU5UX1RZUEVfVU5LTk9XThAA",
          "EiMKH0VWRU5UX1RZUEVfUkVHVUxBUl9DSEFUX01FU1NBR0UQARISCg5FVkVO",
          "VF9UWVBFX1NNUxACEhgKFEVWRU5UX1RZUEVfVk9JQ0VNQUlMEAMSFwoTRVZF",
          "TlRfVFlQRV9BRERfVVNFUhAEEhoKFkVWRU5UX1RZUEVfUkVNT1ZFX1VTRVIQ",
          "BRIiCh5FVkVOVF9UWVBFX0NPTlZFUlNBVElPTl9SRU5BTUUQBhIWChJFVkVO",
          "VF9UWVBFX0hBTkdPVVQQBxIZChVFVkVOVF9UWVBFX1BIT05FX0NBTEwQCBIf",
          "ChtFVkVOVF9UWVBFX09UUl9NT0RJRklDQVRJT04QCRIcChhFVkVOVF9UWVBF",
          "X1BMQU5fTVVUQVRJT04QChISCg5FVkVOVF9UWVBFX01NUxALEhwKGEVWRU5U",
          "X1RZUEVfREVQUkVDQVRFRF8xMhAMKnAKEENvbnZlcnNhdGlvblR5cGUSHQoZ",
          "Q09OVkVSU0FUSU9OX1RZUEVfVU5LTk9XThAAEiAKHENPTlZFUlNBVElPTl9U",
          "WVBFX09ORV9UT19PTkUQARIbChdDT05WRVJTQVRJT05fVFlQRV9HUk9VUBAC",
          "KpQBChJDb252ZXJzYXRpb25TdGF0dXMSHwobQ09OVkVSU0FUSU9OX1NUQVRV",
          "U19VTktOT1dOEAASHwobQ09OVkVSU0FUSU9OX1NUQVRVU19JTlZJVEVEEAES",
          "HgoaQ09OVkVSU0FUSU9OX1NUQVRVU19BQ1RJVkUQAhIcChhDT05WRVJTQVRJ",
          "T05fU1RBVFVTX0xFRlQQAypuChBDb252ZXJzYXRpb25WaWV3Eh0KGUNPTlZF",
          "UlNBVElPTl9WSUVXX1VOS05PV04QABIbChdDT05WRVJTQVRJT05fVklFV19J",
          "TkJPWBABEh4KGkNPTlZFUlNBVElPTl9WSUVXX0FSQ0hJVkVEEAIqjQEKEkRl",
          "bGl2ZXJ5TWVkaXVtVHlwZRIbChdERUxJVkVSWV9NRURJVU1fVU5LTk9XThAA",
          "EhkKFURFTElWRVJZX01FRElVTV9CQUJFTBABEiAKHERFTElWRVJZX01FRElV",
          "TV9HT09HTEVfVk9JQ0UQAhIdChlERUxJVkVSWV9NRURJVU1fTE9DQUxfU01T",
          "EAMqSgoPUGFydGljaXBhbnRUeXBlEhwKGFBBUlRJQ0lQQU5UX1RZUEVfVU5L",
          "Tk9XThAAEhkKFVBBUlRJQ0lQQU5UX1RZUEVfR0FJQRACKnAKEEludml0YXRp",
          "b25TdGF0dXMSHQoZSU5WSVRBVElPTl9TVEFUVVNfVU5LTk9XThAAEh0KGUlO",
          "VklUQVRJT05fU1RBVFVTX1BFTkRJTkcQARIeChpJTlZJVEFUSU9OX1NUQVRV",
          "U19BQ0NFUFRFRBACKj8KDEZvcmNlSGlzdG9yeRIZChVGT1JDRV9ISVNUT1JZ",
          "X1VOS05PV04QABIUChBGT1JDRV9ISVNUT1JZX05PEAEqPwoLTmV0d29ya1R5",
          "cGUSGAoUTkVUV09SS19UWVBFX1VOS05PV04QABIWChJORVRXT1JLX1RZUEVf",
          "QkFCRUwQASpVCgpCbG9ja1N0YXRlEhcKE0JMT0NLX1NUQVRFX1VOS05PV04Q",
          "ABIVChFCTE9DS19TVEFURV9CTE9DSxABEhcKE0JMT0NLX1NUQVRFX1VOQkxP",
          "Q0sQAip4ChFSZXBseVRvSW52aXRlVHlwZRIgChxSRVBMWV9UT19JTlZJVEVf",
          "VFlQRV9VTktOT1dOEAASHwobUkVQTFlfVE9fSU5WSVRFX1RZUEVfQUNDRVBU",
          "EAESIAocUkVQTFlfVE9fSU5WSVRFX1RZUEVfREVDTElORRACKq4BCghDbGll",
          "bnRJZBIVChFDTElFTlRfSURfVU5LTk9XThAAEhUKEUNMSUVOVF9JRF9BTkRS",
          "T0lEEAESEQoNQ0xJRU5UX0lEX0lPUxACEhQKEENMSUVOVF9JRF9DSFJPTUUQ",
          "AxIXChNDTElFTlRfSURfV0VCX0dQTFVTEAUSFwoTQ0xJRU5UX0lEX1dFQl9H",
          "TUFJTBAGEhkKFUNMSUVOVF9JRF9VTFRSQVZJT0xFVBANKmcKD0NsaWVudEJ1",
          "aWxkVHlwZRIWChJCVUlMRF9UWVBFX1VOS05PV04QABIdChlCVUlMRF9UWVBF",
          "X1BST0RVQ1RJT05fV0VCEAESHQoZQlVJTERfVFlQRV9QUk9EVUNUSU9OX0FQ",
          "UBADKpABCg5SZXNwb25zZVN0YXR1cxIbChdSRVNQT05TRV9TVEFUVVNfVU5L",
          "Tk9XThAAEhYKElJFU1BPTlNFX1NUQVRVU19PSxABEiQKIFJFU1BPTlNFX1NU",
          "QVRVU19VTkVYUEVDVEVEX0VSUk9SEAMSIwofUkVTUE9OU0VfU1RBVFVTX0lO",
          "VkFMSURfUkVRVUVTVBAEKnEKDlBob3RvVXJsU3RhdHVzEhwKGFBIT1RPX1VS",
          "TF9TVEFUVVNfVU5LTk9XThAAEiAKHFBIT1RPX1VSTF9TVEFUVVNfUExBQ0VI",
          "T0xERVIQARIfChtQSE9UT19VUkxfU1RBVFVTX1VTRVJfUEhPVE8QAipACgZH",
          "ZW5kZXISEgoOR0VOREVSX1VOS05PV04QABIPCgtHRU5ERVJfTUFMRRABEhEK",
          "DUdFTkRFUl9GRU1BTEUQAio+CgtQcm9maWxlVHlwZRIVChFQUk9GSUxFX1RZ",
          "UEVfTk9ORRAAEhgKFFBST0ZJTEVfVFlQRV9FU19VU0VSEAEqrQsKFENvbmZp",
          "Z3VyYXRpb25CaXRUeXBlEiIKHkNPTkZJR1VSQVRJT05fQklUX1RZUEVfVU5L",
          "Tk9XThAAEiQKIENPTkZJR1VSQVRJT05fQklUX1RZUEVfVU5LTk9XTl8xEAES",
          "JAogQ09ORklHVVJBVElPTl9CSVRfVFlQRV9VTktOT1dOXzIQAhIkCiBDT05G",
          "SUdVUkFUSU9OX0JJVF9UWVBFX1VOS05PV05fMxADEiQKIENPTkZJR1VSQVRJ",
          "T05fQklUX1RZUEVfVU5LTk9XTl80EAQSJAogQ09ORklHVVJBVElPTl9CSVRf",
          "VFlQRV9VTktOT1dOXzUQBRIkCiBDT05GSUdVUkFUSU9OX0JJVF9UWVBFX1VO",
          "S05PV05fNhAGEiQKIENPTkZJR1VSQVRJT05fQklUX1RZUEVfVU5LTk9XTl83",
          "EAcSJAogQ09ORklHVVJBVElPTl9CSVRfVFlQRV9VTktOT1dOXzgQCBIkCiBD",
          "T05GSUdVUkFUSU9OX0JJVF9UWVBFX1VOS05PV05fORAJEiUKIUNPTkZJR1VS",
          "QVRJT05fQklUX1RZUEVfVU5LTk9XTl8xMBAKEiUKIUNPTkZJR1VSQVRJT05f",
          "QklUX1RZUEVfVU5LTk9XTl8xMRALEiUKIUNPTkZJR1VSQVRJT05fQklUX1RZ",
          "UEVfVU5LTk9XTl8xMhAMEiUKIUNPTkZJR1VSQVRJT05fQklUX1RZUEVfVU5L",
          "Tk9XTl8xMxANEiUKIUNPTkZJR1VSQVRJT05fQklUX1RZUEVfVU5LTk9XTl8x",
          "NBAOEiUKIUNPTkZJR1VSQVRJT05fQklUX1RZUEVfVU5LTk9XTl8xNRAPEiUK",
          "IUNPTkZJR1VSQVRJT05fQklUX1RZUEVfVU5LTk9XTl8xNhAQEiUKIUNPTkZJ",
          "R1VSQVRJT05fQklUX1RZUEVfVU5LTk9XTl8xNxAREiUKIUNPTkZJR1VSQVRJ",
          "T05fQklUX1RZUEVfVU5LTk9XTl8xOBASEiUKIUNPTkZJR1VSQVRJT05fQklU",
          "X1RZUEVfVU5LTk9XTl8xORATEiUKIUNPTkZJR1VSQVRJT05fQklUX1RZUEVf",
          "VU5LTk9XTl8yMBAUEiUKIUNPTkZJR1VSQVRJT05fQklUX1RZUEVfVU5LTk9X",
          "Tl8yMRAVEiUKIUNPTkZJR1VSQVRJT05fQklUX1RZUEVfVU5LTk9XTl8yMhAW",
          "EiUKIUNPTkZJR1VSQVRJT05fQklUX1RZUEVfVU5LTk9XTl8yMxAXEiUKIUNP",
          "TkZJR1VSQVRJT05fQklUX1RZUEVfVU5LTk9XTl8yNBAYEiUKIUNPTkZJR1VS",
          "QVRJT05fQklUX1RZUEVfVU5LTk9XTl8yNRAZEiUKIUNPTkZJR1VSQVRJT05f",
          "QklUX1RZUEVfVU5LTk9XTl8yNhAaEiUKIUNPTkZJR1VSQVRJT05fQklUX1RZ",
          "UEVfVU5LTk9XTl8yNxAbEiUKIUNPTkZJR1VSQVRJT05fQklUX1RZUEVfVU5L",
          "Tk9XTl8yOBAcEiUKIUNPTkZJR1VSQVRJT05fQklUX1RZUEVfVU5LTk9XTl8y",
          "ORAdEiUKIUNPTkZJR1VSQVRJT05fQklUX1RZUEVfVU5LTk9XTl8zMBAeEiUK",
          "IUNPTkZJR1VSQVRJT05fQklUX1RZUEVfVU5LTk9XTl8zMRAfEiUKIUNPTkZJ",
          "R1VSQVRJT05fQklUX1RZUEVfVU5LTk9XTl8zMhAgEiUKIUNPTkZJR1VSQVRJ",
          "T05fQklUX1RZUEVfVU5LTk9XTl8zMxAhEiUKIUNPTkZJR1VSQVRJT05fQklU",
          "X1RZUEVfVU5LTk9XTl8zNBAiEiUKIUNPTkZJR1VSQVRJT05fQklUX1RZUEVf",
          "VU5LTk9XTl8zNRAjEiUKIUNPTkZJR1VSQVRJT05fQklUX1RZUEVfVU5LTk9X",
          "Tl8zNhAkKv8BChBSaWNoUHJlc2VuY2VUeXBlEh4KGlJJQ0hfUFJFU0VOQ0Vf",
          "VFlQRV9VTktOT1dOEAASJAogUklDSF9QUkVTRU5DRV9UWVBFX0lOX0NBTExf",
          "U1RBVEUQARIgChxSSUNIX1BSRVNFTkNFX1RZUEVfVU5LTk9XTl8zEAMSIAoc",
          "UklDSF9QUkVTRU5DRV9UWVBFX1VOS05PV05fNBAEEiAKHFJJQ0hfUFJFU0VO",
          "Q0VfVFlQRV9VTktOT1dOXzUQBRIdChlSSUNIX1BSRVNFTkNFX1RZUEVfREVW",
          "SUNFEAISIAocUklDSF9QUkVTRU5DRV9UWVBFX0xBU1RfU0VFThAGKm8KCUZp",
          "ZWxkTWFzaxIXChNGSUVMRF9NQVNLX1JFU0VSVkVEEAASGAoURklFTERfTUFT",
          "S19SRUFDSEFCTEUQARIYChRGSUVMRF9NQVNLX0FWQUlMQUJMRRACEhUKEUZJ",
          "RUxEX01BU0tfREVWSUNFEAcqQgoKRGVsZXRlVHlwZRIXChNERUxFVEVfVFlQ",
          "RV9VTktOT1dOEAASGwoXREVMRVRFX1RZUEVfVVBQRVJfQk9VTkQQASpWCgpT",
          "eW5jRmlsdGVyEhcKE1NZTkNfRklMVEVSX1VOS05PV04QABIVChFTWU5DX0ZJ",
          "TFRFUl9JTkJPWBABEhgKFFNZTkNfRklMVEVSX0FSQ0hJVkVEEAIqTgoKU291",
          "bmRTdGF0ZRIXChNTT1VORF9TVEFURV9VTktOT1dOEAASEgoOU09VTkRfU1RB",
          "VEVfT04QARITCg9TT1VORF9TVEFURV9PRkYQAiphChRDYWxsZXJJZFNldHRp",
          "bmdzTWFzaxIjCh9DQUxMRVJfSURfU0VUVElOR1NfTUFTS19VTktOT1dOEAAS",
          "JAogQ0FMTEVSX0lEX1NFVFRJTkdTX01BU0tfUFJPVklERUQQASpoChdQaG9u",
          "ZVZlcmlmaWNhdGlvblN0YXR1cxIlCiFQSE9ORV9WRVJJRklDQVRJT05fU1RB",
          "VFVTX1VOS05PV04QABImCiJQSE9ORV9WRVJJRklDQVRJT05fU1RBVFVTX1ZF",
          "UklGSUVEEAEqhgEKGlBob25lRGlzY292ZXJhYmlsaXR5U3RhdHVzEigKJFBI",
          "T05FX0RJU0NPVkVSQUJJTElUWV9TVEFUVVNfVU5LTk9XThAAEj4KOlBIT05F",
          "X0RJU0NPVkVSQUJJTElUWV9TVEFUVVNfT1BURURfSU5fQlVUX05PVF9ESVND",
          "T1ZFUkFCTEUQAipAChVQaG9uZVZhbGlkYXRpb25SZXN1bHQSJwojUEhPTkVf",
          "VkFMSURBVElPTl9SRVNVTFRfSVNfUE9TU0lCTEUQAGIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedCodeInfo(new[] {typeof(global::ActiveClientState), typeof(global::FocusType), typeof(global::FocusDevice), typeof(global::TypingType), typeof(global::ClientPresenceStateType), typeof(global::NotificationLevel), typeof(global::SegmentType), typeof(global::ItemType), typeof(global::MembershipChangeType), typeof(global::HangoutEventType), typeof(global::OffTheRecordToggle), typeof(global::OffTheRecordStatus), typeof(global::SourceType), typeof(global::EventType), typeof(global::ConversationType), typeof(global::ConversationStatus), typeof(global::ConversationView), typeof(global::DeliveryMediumType), typeof(global::ParticipantType), typeof(global::InvitationStatus), typeof(global::ForceHistory), typeof(global::NetworkType), typeof(global::BlockState), typeof(global::ReplyToInviteType), typeof(global::ClientId), typeof(global::ClientBuildType), typeof(global::ResponseStatus), typeof(global::PhotoUrlStatus), typeof(global::Gender), typeof(global::ProfileType), typeof(global::ConfigurationBitType), typeof(global::RichPresenceType), typeof(global::FieldMask), typeof(global::DeleteType), typeof(global::SyncFilter), typeof(global::SoundState), typeof(global::CallerIdSettingsMask), typeof(global::PhoneVerificationStatus), typeof(global::PhoneDiscoverabilityStatus), typeof(global::PhoneValidationResult), }, new pbr::GeneratedCodeInfo[] {
          new pbr::GeneratedCodeInfo(typeof(global::DoNotDisturbSetting), global::DoNotDisturbSetting.Parser, new[]{ "DoNotDisturb", "ExpirationTimestamp", "Version" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::NotificationSettings), global::NotificationSettings.Parser, new[]{ "DndSettings" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::ConversationId), global::ConversationId.Parser, new[]{ "Id" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::ParticipantId), global::ParticipantId.Parser, new[]{ "GaiaId", "ChatId" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::DeviceStatus), global::DeviceStatus.Parser, new[]{ "Mobile", "Desktop", "Tablet" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::Presence), global::Presence.Parser, new[]{ "Reachable", "Available", "DeviceStatus", "MoodSetting" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::PresenceResult), global::PresenceResult.Parser, new[]{ "UserId", "Presence" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::ClientIdentifier), global::ClientIdentifier.Parser, new[]{ "Resource", "HeaderId" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::ClientPresenceState), global::ClientPresenceState.Parser, new[]{ "Identifier", "State" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::UserEventState), global::UserEventState.Parser, new[]{ "UserId", "ClientGeneratedId", "NotificationLevel" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::Formatting), global::Formatting.Parser, new[]{ "Bold", "Italic", "Strikethrough", "Underline" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::LinkData), global::LinkData.Parser, new[]{ "LinkTarget" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::Segment), global::Segment.Parser, new[]{ "Type", "Text", "Formatting", "LinkData" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::PlusPhoto), global::PlusPhoto.Parser, new[]{ "Thumbnail", "OwnerObfuscatedId", "AlbumId", "PhotoId", "Url", "OriginalContentUrl", "MediaType", "StreamId" }, null, new[]{ typeof(global::PlusPhoto.Types.MediaType) }, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::PlusPhoto.Types.Thumbnail), global::PlusPhoto.Types.Thumbnail.Parser, new[]{ "Url", "ImageUrl", "WidthPx", "HeightPx" }, null, null, null)}),
          new pbr::GeneratedCodeInfo(typeof(global::Place), global::Place.Parser, new[]{ "Url", "Name", "RepresentativeImage" }, null, null, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::Place.Types.RepresentativeImage), global::Place.Types.RepresentativeImage.Parser, new[]{ "Url" }, null, null, null)}),
          new pbr::GeneratedCodeInfo(typeof(global::EmbedItem), global::EmbedItem.Parser, new[]{ "Type", "Id", "PlusPhoto", "Place" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::Attachment), global::Attachment.Parser, new[]{ "EmbedItem" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::MessageContent), global::MessageContent.Parser, new[]{ "Segment", "Attachment" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::EventAnnotation), global::EventAnnotation.Parser, new[]{ "Type", "Value" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::ChatMessage), global::ChatMessage.Parser, new[]{ "Annotation", "MessageContent" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::MembershipChange), global::MembershipChange.Parser, new[]{ "Type", "ParticipantIds" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::ConversationRename), global::ConversationRename.Parser, new[]{ "NewName", "OldName" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::HangoutEvent), global::HangoutEvent.Parser, new[]{ "EventType", "ParticipantId" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::OTRModification), global::OTRModification.Parser, new[]{ "OldOtrStatus", "NewOtrStatus", "OldOtrToggle", "NewOtrToggle" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::HashModifier), global::HashModifier.Parser, new[]{ "UpdateId", "HashDiff", "Version" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::Event), global::Event.Parser, new[]{ "ConversationId", "SenderId", "Timestamp", "SelfEventState", "SourceType", "ChatMessage", "MembershipChange", "ConversationRename", "HangoutEvent", "EventId", "ExpirationTimestamp", "OtrModification", "AdvancesSortTimestamp", "OtrStatus", "Persisted", "MediumType", "EventType", "EventVersion", "HashModifier" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::UserReadState), global::UserReadState.Parser, new[]{ "ParticipantId", "LatestReadTimestamp" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::DeliveryMedium), global::DeliveryMedium.Parser, new[]{ "MediumType", "Phone" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::DeliveryMediumOption), global::DeliveryMediumOption.Parser, new[]{ "DeliveryMedium", "CurrentDefault" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::UserConversationState), global::UserConversationState.Parser, new[]{ "ClientGeneratedId", "SelfReadState", "Status", "NotificationLevel", "View", "InviterId", "InviteTimestamp", "SortTimestamp", "ActiveTimestamp", "DeliveryMediumOption" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::ConversationParticipantData), global::ConversationParticipantData.Parser, new[]{ "Id", "FallbackName", "InvitationStatus", "ParticipantType", "NewInvitationStatus" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::Conversation), global::Conversation.Parser, new[]{ "ConversationId", "Type", "Name", "SelfConversationState", "ReadState", "HasActiveHangout", "OtrStatus", "OtrToggle", "ConversationHistorySupported", "CurrentParticipant", "ParticipantData", "NetworkType", "ForceHistoryState" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::EasterEgg), global::EasterEgg.Parser, new[]{ "Message" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::BlockStateChange), global::BlockStateChange.Parser, new[]{ "ParticipantId", "NewBlockState" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::Photo), global::Photo.Parser, new[]{ "PhotoId", "DeleteAlbumlessSourcePhoto", "UserId", "IsCustomUserId" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::ExistingMedia), global::ExistingMedia.Parser, new[]{ "Photo" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::EventRequestHeader), global::EventRequestHeader.Parser, new[]{ "ConversationId", "ClientGeneratedId", "ExpectedOtr", "DeliveryMedium", "EventType" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::ClientVersion), global::ClientVersion.Parser, new[]{ "ClientId", "BuildType", "MajorVersion", "VersionTimestamp", "DeviceOsVersion", "DeviceHardware" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::RequestHeader), global::RequestHeader.Parser, new[]{ "ClientVersion", "ClientIdentifier", "LanguageCode" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::ResponseHeader), global::ResponseHeader.Parser, new[]{ "Status", "ErrorDescription", "DebugUrl", "RequestTraceId", "CurrentServerTime" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::Entity), global::Entity.Parser, new[]{ "Id", "Presence", "Properties", "EntityType", "HadPastHangoutState" }, null, new[]{ typeof(global::Entity.Types.PastHangoutState) }, null),
          new pbr::GeneratedCodeInfo(typeof(global::EntityProperties), global::EntityProperties.Parser, new[]{ "Type", "DisplayName", "FirstName", "PhotoUrl", "Email", "Phone", "InUsersDomain", "Gender", "PhotoUrlStatus", "CanonicalEmail" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::ConversationState), global::ConversationState.Parser, new[]{ "ConversationId", "Conversation", "Event", "EventContinuationToken" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::EventContinuationToken), global::EventContinuationToken.Parser, new[]{ "EventId", "StorageContinuationToken", "EventTimestamp" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::EntityLookupSpec), global::EntityLookupSpec.Parser, new[]{ "GaiaId" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::ConfigurationBit), global::ConfigurationBit.Parser, new[]{ "ConfigurationBitType", "Value" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::RichPresenceState), global::RichPresenceState.Parser, new[]{ "GetRichPresenceEnabledState" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::RichPresenceEnabledState), global::RichPresenceEnabledState.Parser, new[]{ "Type", "Enabled" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::DesktopOffSetting), global::DesktopOffSetting.Parser, new[]{ "DesktopOff" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::DesktopOffState), global::DesktopOffState.Parser, new[]{ "DesktopOff", "Version" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::DndSetting), global::DndSetting.Parser, new[]{ "DoNotDisturb", "TimeoutSecs" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::PresenceStateSetting), global::PresenceStateSetting.Parser, new[]{ "TimeoutSecs", "Type" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::MoodMessage), global::MoodMessage.Parser, new[]{ "MoodContent" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::MoodContent), global::MoodContent.Parser, new[]{ "Segment" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::MoodSetting), global::MoodSetting.Parser, new[]{ "MoodMessage" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::MoodState), global::MoodState.Parser, new[]{ "MoodSetting" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::DeleteAction), global::DeleteAction.Parser, new[]{ "DeleteActionTimestamp", "DeleteUpperBoundTimestamp", "DeleteType" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::InviteeID), global::InviteeID.Parser, new[]{ "GaiaId", "FallbackName" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::Country), global::Country.Parser, new[]{ "RegionCode", "CountryCode" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::DesktopSoundSetting), global::DesktopSoundSetting.Parser, new[]{ "DesktopSoundState", "DesktopRingSoundState" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::PhoneData), global::PhoneData.Parser, new[]{ "Phone", "CallerIdSettingsMask" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::Phone), global::Phone.Parser, new[]{ "PhoneNumber", "GoogleVoice", "VerificationStatus", "Discoverable", "DiscoverabilityStatus", "Primary" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::I18nData), global::I18nData.Parser, new[]{ "NationalNumber", "InternationalNumber", "CountryCode", "RegionCode", "IsValid", "ValidationResult" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::PhoneNumber), global::PhoneNumber.Parser, new[]{ "E164", "I18NData" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SuggestedContactGroupHash), global::SuggestedContactGroupHash.Parser, new[]{ "MaxResults", "Hash" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SuggestedContact), global::SuggestedContact.Parser, new[]{ "Entity", "InvitationStatus" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SuggestedContactGroup), global::SuggestedContactGroup.Parser, new[]{ "HashMatched", "Hash", "Contact" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::StateUpdate), global::StateUpdate.Parser, new[]{ "StateUpdateHeader", "Conversation", "EventNotification", "FocusNotification", "TypingNotification", "NotificationLevelNotification", "ReplyToInviteNotification", "WatermarkNotification", "ViewModification", "EasterEggNotification", "SelfPresenceNotification", "DeleteNotification", "PresenceNotification", "BlockNotification", "NotificationSettingNotification", "RichPresenceEnabledStateNotification" }, new[]{ "StateUpdate" }, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::StateUpdateHeader), global::StateUpdateHeader.Parser, new[]{ "ActiveClientState", "RequestTraceId", "NotificationSettings", "CurrentServerTime" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::BatchUpdate), global::BatchUpdate.Parser, new[]{ "StateUpdate" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::EventNotification), global::EventNotification.Parser, new[]{ "Event" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SetFocusNotification), global::SetFocusNotification.Parser, new[]{ "ConversationId", "SenderId", "Timestamp", "Type", "Device" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SetTypingNotification), global::SetTypingNotification.Parser, new[]{ "ConversationId", "SenderId", "Timestamp", "Type" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SetConversationNotificationLevelNotification), global::SetConversationNotificationLevelNotification.Parser, new[]{ "ConversationId", "Level", "Timestamp" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::ReplyToInviteNotification), global::ReplyToInviteNotification.Parser, new[]{ "ConversationId", "Type" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::WatermarkNotification), global::WatermarkNotification.Parser, new[]{ "SenderId", "ConversationId", "LatestReadTimestamp" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::ConversationViewModification), global::ConversationViewModification.Parser, new[]{ "ConversationId", "OldView", "NewView" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::EasterEggNotification), global::EasterEggNotification.Parser, new[]{ "SenderId", "ConversationId", "EasterEgg" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SelfPresenceNotification), global::SelfPresenceNotification.Parser, new[]{ "ClientPresenceState", "DoNotDisturbSetting", "DesktopOffSetting", "DesktopOffState", "MoodState" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::DeleteActionNotification), global::DeleteActionNotification.Parser, new[]{ "ConversationId", "DeleteAction" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::PresenceNotification), global::PresenceNotification.Parser, new[]{ "Presence" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::BlockNotification), global::BlockNotification.Parser, new[]{ "BlockStateChange" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SetNotificationSettingNotification), global::SetNotificationSettingNotification.Parser, new[]{ "DesktopSoundSetting" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::RichPresenceEnabledStateNotification), global::RichPresenceEnabledStateNotification.Parser, new[]{ "RichPresenceEnabledState" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::ConversationSpec), global::ConversationSpec.Parser, new[]{ "ConversationId" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::AddUserRequest), global::AddUserRequest.Parser, new[]{ "RequestHeader", "InviteeId", "EventRequestHeader" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::AddUserResponse), global::AddUserResponse.Parser, new[]{ "ResponseHeader", "CreatedEvent" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CreateConversationRequest), global::CreateConversationRequest.Parser, new[]{ "RequestHeader", "Type", "ClientGeneratedId", "Name", "InviteeId" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CreateConversationResponse), global::CreateConversationResponse.Parser, new[]{ "ResponseHeader", "Conversation", "NewConversationCreated" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::DeleteConversationRequest), global::DeleteConversationRequest.Parser, new[]{ "RequestHeader", "ConversationId", "DeleteUpperBoundTimestamp" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::DeleteConversationResponse), global::DeleteConversationResponse.Parser, new[]{ "ResponseHeader", "DeleteAction" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::EasterEggRequest), global::EasterEggRequest.Parser, new[]{ "RequestHeader", "ConversationId", "EasterEgg" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::EasterEggResponse), global::EasterEggResponse.Parser, new[]{ "ResponseHeader", "Timestamp" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::GetConversationRequest), global::GetConversationRequest.Parser, new[]{ "RequestHeader", "ConversationSpec", "IncludeEvent", "MaxEventsPerConversation", "EventContinuationToken" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::GetConversationResponse), global::GetConversationResponse.Parser, new[]{ "ResponseHeader", "ConversationState" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::GetEntityByIdRequest), global::GetEntityByIdRequest.Parser, new[]{ "RequestHeader", "BatchLookupSpec" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::GetEntityByIdResponse), global::GetEntityByIdResponse.Parser, new[]{ "ResponseHeader", "Entity" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::GetSuggestedEntitiesRequest), global::GetSuggestedEntitiesRequest.Parser, new[]{ "RequestHeader", "Favorites", "ContactsYouHangoutWith", "OtherContactsOnHangouts", "OtherContacts", "DismissedContacts", "PinnedFavorites" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::GetSuggestedEntitiesResponse), global::GetSuggestedEntitiesResponse.Parser, new[]{ "ResponseHeader", "Entity", "Favorites", "ContactsYouHangoutWith", "OtherContactsOnHangouts", "OtherContacts", "DismissedContacts", "PinnedFavorites" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::GetSelfInfoRequest), global::GetSelfInfoRequest.Parser, new[]{ "RequestHeader" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::GetSelfInfoResponse), global::GetSelfInfoResponse.Parser, new[]{ "ResponseHeader", "SelfEntity", "IsKnownMinor", "DndState", "DesktopOffSetting", "PhoneData", "ConfigurationBit", "DesktopOffState", "GooglePlusUser", "DesktopSoundSetting", "RichPresenceState", "DefaultCountry" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::QueryPresenceRequest), global::QueryPresenceRequest.Parser, new[]{ "RequestHeader", "ParticipantId", "FieldMask" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::QueryPresenceResponse), global::QueryPresenceResponse.Parser, new[]{ "ResponseHeader", "PresenceResult" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::RemoveUserRequest), global::RemoveUserRequest.Parser, new[]{ "RequestHeader", "EventRequestHeader" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::RemoveUserResponse), global::RemoveUserResponse.Parser, new[]{ "ResponseHeader", "CreatedEvent" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::RenameConversationRequest), global::RenameConversationRequest.Parser, new[]{ "RequestHeader", "NewName", "EventRequestHeader" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::RenameConversationResponse), global::RenameConversationResponse.Parser, new[]{ "ResponseHeader", "CreatedEvent" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SearchEntitiesRequest), global::SearchEntitiesRequest.Parser, new[]{ "RequestHeader", "Query", "MaxCount" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SearchEntitiesResponse), global::SearchEntitiesResponse.Parser, new[]{ "ResponseHeader", "Entity" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SendChatMessageRequest), global::SendChatMessageRequest.Parser, new[]{ "RequestHeader", "Annotation", "MessageContent", "ExistingMedia", "EventRequestHeader" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SendChatMessageResponse), global::SendChatMessageResponse.Parser, new[]{ "ResponseHeader", "CreatedEvent" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SetActiveClientRequest), global::SetActiveClientRequest.Parser, new[]{ "RequestHeader", "IsActive", "FullJid", "TimeoutSecs" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SetActiveClientResponse), global::SetActiveClientResponse.Parser, new[]{ "ResponseHeader" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SetConversationLevelRequest), global::SetConversationLevelRequest.Parser, new[]{ "RequestHeader" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SetConversationLevelResponse), global::SetConversationLevelResponse.Parser, new[]{ "ResponseHeader" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SetConversationNotificationLevelRequest), global::SetConversationNotificationLevelRequest.Parser, new[]{ "RequestHeader", "ConversationId", "Level" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SetConversationNotificationLevelResponse), global::SetConversationNotificationLevelResponse.Parser, new[]{ "ResponseHeader", "Timestamp" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SetFocusRequest), global::SetFocusRequest.Parser, new[]{ "RequestHeader", "ConversationId", "Type", "TimeoutSecs" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SetFocusResponse), global::SetFocusResponse.Parser, new[]{ "ResponseHeader", "Timestamp" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SetPresenceRequest), global::SetPresenceRequest.Parser, new[]{ "RequestHeader", "PresenceStateSetting", "DndSetting", "DesktopOffSetting", "MoodSetting" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SetPresenceResponse), global::SetPresenceResponse.Parser, new[]{ "ResponseHeader" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SetTypingRequest), global::SetTypingRequest.Parser, new[]{ "RequestHeader", "ConversationId", "Type" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SetTypingResponse), global::SetTypingResponse.Parser, new[]{ "ResponseHeader", "Timestamp" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SyncAllNewEventsRequest), global::SyncAllNewEventsRequest.Parser, new[]{ "RequestHeader", "LastSyncTimestamp", "MaxResponseSizeBytes" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SyncAllNewEventsResponse), global::SyncAllNewEventsResponse.Parser, new[]{ "ResponseHeader", "SyncTimestamp", "ConversationState" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SyncRecentConversationsRequest), global::SyncRecentConversationsRequest.Parser, new[]{ "RequestHeader", "MaxConversations", "MaxEventsPerConversation", "SyncFilter" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::SyncRecentConversationsResponse), global::SyncRecentConversationsResponse.Parser, new[]{ "ResponseHeader", "SyncTimestamp", "ConversationState" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::UpdateWatermarkRequest), global::UpdateWatermarkRequest.Parser, new[]{ "RequestHeader", "ConversationId", "LastReadTimestamp" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::UpdateWatermarkResponse), global::UpdateWatermarkResponse.Parser, new[]{ "ResponseHeader" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
/// <summary>
///  Describes which Hangouts client is active.
/// </summary>
public enum ActiveClientState {
  /// <summary>
  ///  No client is active.
  /// </summary>
  ACTIVE_CLIENT_STATE_NO_ACTIVE = 0,
  /// <summary>
  ///  This is the active client.
  /// </summary>
  ACTIVE_CLIENT_STATE_IS_ACTIVE = 1,
  /// <summary>
  ///  Other client is active.
  /// </summary>
  ACTIVE_CLIENT_STATE_OTHER_ACTIVE = 2,
}

public enum FocusType {
  FOCUS_TYPE_UNKNOWN = 0,
  FOCUS_TYPE_FOCUSED = 1,
  FOCUS_TYPE_UNFOCUSED = 2,
}

public enum FocusDevice {
  FOCUS_DEVICE_UNSPECIFIED = 0,
  FOCUS_DEVICE_DESKTOP = 20,
  FOCUS_DEVICE_MOBILE = 300,
}

public enum TypingType {
  TYPING_TYPE_UNKNOWN = 0,
  /// <summary>
  ///  Started typing.
  /// </summary>
  TYPING_TYPE_STARTED = 1,
  /// <summary>
  ///  Stopped typing with inputted text.
  /// </summary>
  TYPING_TYPE_PAUSED = 2,
  /// <summary>
  ///  Stopped typing with no inputted text.
  /// </summary>
  TYPING_TYPE_STOPPED = 3,
}

public enum ClientPresenceStateType {
  CLIENT_PRESENCE_STATE_UNKNOWN = 0,
  CLIENT_PRESENCE_STATE_NONE = 1,
  CLIENT_PRESENCE_STATE_DESKTOP_IDLE = 30,
  CLIENT_PRESENCE_STATE_DESKTOP_ACTIVE = 40,
}

public enum NotificationLevel {
  NOTIFICATION_LEVEL_UNKNOWN = 0,
  /// <summary>
  ///  Notifications are disabled.
  /// </summary>
  NOTIFICATION_LEVEL_QUIET = 10,
  /// <summary>
  ///  Notifications are enabled.
  /// </summary>
  NOTIFICATION_LEVEL_RING = 30,
}

public enum SegmentType {
  /// <summary>
  ///  Segment is text.
  /// </summary>
  SEGMENT_TYPE_TEXT = 0,
  /// <summary>
  ///  Segment is a line break.
  /// </summary>
  SEGMENT_TYPE_LINE_BREAK = 1,
  /// <summary>
  ///  Segment is hyperlinked text.
  /// </summary>
  SEGMENT_TYPE_LINK = 2,
}

/// <summary>
///  A type of embedded item.
/// </summary>
public enum ItemType {
  ITEM_TYPE_THING = 0,
  /// <summary>
  ///  Google Plus photo.
  /// </summary>
  ITEM_TYPE_PLUS_PHOTO = 249,
  ITEM_TYPE_PLACE = 335,
  /// <summary>
  ///  Google Map place.
  /// </summary>
  ITEM_TYPE_PLACE_V2 = 340,
}

public enum MembershipChangeType {
  MEMBERSHIP_CHANGE_TYPE_RESERVED = 0,
  MEMBERSHIP_CHANGE_TYPE_JOIN = 1,
  MEMBERSHIP_CHANGE_TYPE_LEAVE = 2,
}

public enum HangoutEventType {
  HANGOUT_EVENT_TYPE_UNKNOWN = 0,
  HANGOUT_EVENT_TYPE_START = 1,
  HANGOUT_EVENT_TYPE_END = 2,
  HANGOUT_EVENT_TYPE_JOIN = 3,
  HANGOUT_EVENT_TYPE_LEAVE = 4,
  HANGOUT_EVENT_TYPE_COMING_SOON = 5,
  HANGOUT_EVENT_TYPE_ONGOING = 6,
}

/// <summary>
///  Whether the OTR toggle is available to the user.
/// </summary>
public enum OffTheRecordToggle {
  OFF_THE_RECORD_TOGGLE_UNKNOWN = 0,
  OFF_THE_RECORD_TOGGLE_ENABLED = 1,
  OFF_THE_RECORD_TOGGLE_DISABLED = 2,
}

public enum OffTheRecordStatus {
  OFF_THE_RECORD_STATUS_UNKNOWN = 0,
  /// <summary>
  ///  Conversation is off-the-record (history disabled).
  /// </summary>
  OFF_THE_RECORD_STATUS_OFF_THE_RECORD = 1,
  /// <summary>
  ///  Conversation is on-the-record (history enabled).
  /// </summary>
  OFF_THE_RECORD_STATUS_ON_THE_RECORD = 2,
}

public enum SourceType {
  SOURCE_TYPE_UNKNOWN = 0,
}

public enum EventType {
  EVENT_TYPE_UNKNOWN = 0,
  EVENT_TYPE_REGULAR_CHAT_MESSAGE = 1,
  EVENT_TYPE_SMS = 2,
  EVENT_TYPE_VOICEMAIL = 3,
  EVENT_TYPE_ADD_USER = 4,
  EVENT_TYPE_REMOVE_USER = 5,
  EVENT_TYPE_CONVERSATION_RENAME = 6,
  EVENT_TYPE_HANGOUT = 7,
  EVENT_TYPE_PHONE_CALL = 8,
  EVENT_TYPE_OTR_MODIFICATION = 9,
  EVENT_TYPE_PLAN_MUTATION = 10,
  EVENT_TYPE_MMS = 11,
  EVENT_TYPE_DEPRECATED_12 = 12,
}

public enum ConversationType {
  CONVERSATION_TYPE_UNKNOWN = 0,
  /// <summary>
  ///  Conversation is one-to-one (only 2 participants).
  /// </summary>
  CONVERSATION_TYPE_ONE_TO_ONE = 1,
  /// <summary>
  ///  Conversation is group (any number of participants).
  /// </summary>
  CONVERSATION_TYPE_GROUP = 2,
}

public enum ConversationStatus {
  CONVERSATION_STATUS_UNKNOWN = 0,
  /// <summary>
  ///  User is invited to conversation.
  /// </summary>
  CONVERSATION_STATUS_INVITED = 1,
  /// <summary>
  ///  User is participating in conversation.
  /// </summary>
  CONVERSATION_STATUS_ACTIVE = 2,
  /// <summary>
  ///  User has left conversation.
  /// </summary>
  CONVERSATION_STATUS_LEFT = 3,
}

public enum ConversationView {
  CONVERSATION_VIEW_UNKNOWN = 0,
  /// <summary>
  ///  Conversation is in inbox.
  /// </summary>
  CONVERSATION_VIEW_INBOX = 1,
  /// <summary>
  ///  Conversation has been archived.
  /// </summary>
  CONVERSATION_VIEW_ARCHIVED = 2,
}

public enum DeliveryMediumType {
  DELIVERY_MEDIUM_UNKNOWN = 0,
  DELIVERY_MEDIUM_BABEL = 1,
  DELIVERY_MEDIUM_GOOGLE_VOICE = 2,
  DELIVERY_MEDIUM_LOCAL_SMS = 3,
}

public enum ParticipantType {
  PARTICIPANT_TYPE_UNKNOWN = 0,
  PARTICIPANT_TYPE_GAIA = 2,
}

public enum InvitationStatus {
  INVITATION_STATUS_UNKNOWN = 0,
  INVITATION_STATUS_PENDING = 1,
  INVITATION_STATUS_ACCEPTED = 2,
}

public enum ForceHistory {
  FORCE_HISTORY_UNKNOWN = 0,
  FORCE_HISTORY_NO = 1,
}

public enum NetworkType {
  NETWORK_TYPE_UNKNOWN = 0,
  NETWORK_TYPE_BABEL = 1,
}

public enum BlockState {
  BLOCK_STATE_UNKNOWN = 0,
  BLOCK_STATE_BLOCK = 1,
  BLOCK_STATE_UNBLOCK = 2,
}

public enum ReplyToInviteType {
  REPLY_TO_INVITE_TYPE_UNKNOWN = 0,
  REPLY_TO_INVITE_TYPE_ACCEPT = 1,
  REPLY_TO_INVITE_TYPE_DECLINE = 2,
}

/// <summary>
///  Identifies the client.
/// </summary>
public enum ClientId {
  CLIENT_ID_UNKNOWN = 0,
  /// <summary>
  ///  Hangouts app for Android.
  /// </summary>
  CLIENT_ID_ANDROID = 1,
  /// <summary>
  ///  Hangouts app for iOS.
  /// </summary>
  CLIENT_ID_IOS = 2,
  /// <summary>
  ///  Hangouts Chrome extension.
  /// </summary>
  CLIENT_ID_CHROME = 3,
  /// <summary>
  ///  Hangouts web interface in Google Plus.
  /// </summary>
  CLIENT_ID_WEB_GPLUS = 5,
  /// <summary>
  ///  Hangouts web interface in Gmail.
  /// </summary>
  CLIENT_ID_WEB_GMAIL = 6,
  /// <summary>
  ///  Hangouts Chrome app ("ultraviolet").
  /// </summary>
  CLIENT_ID_ULTRAVIOLET = 13,
}

/// <summary>
///  Build type of the client.
/// </summary>
public enum ClientBuildType {
  BUILD_TYPE_UNKNOWN = 0,
  /// <summary>
  ///  Web app.
  /// </summary>
  BUILD_TYPE_PRODUCTION_WEB = 1,
  /// <summary>
  ///  Native app.
  /// </summary>
  BUILD_TYPE_PRODUCTION_APP = 3,
}

/// <summary>
///  Status of the response from the server to the client.
/// </summary>
public enum ResponseStatus {
  RESPONSE_STATUS_UNKNOWN = 0,
  RESPONSE_STATUS_OK = 1,
  RESPONSE_STATUS_UNEXPECTED_ERROR = 3,
  RESPONSE_STATUS_INVALID_REQUEST = 4,
}

/// <summary>
///  Status of EntityProperties.photo_url.
/// </summary>
public enum PhotoUrlStatus {
  PHOTO_URL_STATUS_UNKNOWN = 0,
  /// <summary>
  ///  URL is a placeholder.
  /// </summary>
  PHOTO_URL_STATUS_PLACEHOLDER = 1,
  /// <summary>
  ///  URL is a photo set by the user.
  /// </summary>
  PHOTO_URL_STATUS_USER_PHOTO = 2,
}

public enum Gender {
  GENDER_UNKNOWN = 0,
  GENDER_MALE = 1,
  GENDER_FEMALE = 2,
}

public enum ProfileType {
  PROFILE_TYPE_NONE = 0,
  PROFILE_TYPE_ES_USER = 1,
}

/// <summary>
///  A type of binary configuration option.
/// </summary>
public enum ConfigurationBitType {
  CONFIGURATION_BIT_TYPE_UNKNOWN = 0,
  CONFIGURATION_BIT_TYPE_UNKNOWN_1 = 1,
  CONFIGURATION_BIT_TYPE_UNKNOWN_2 = 2,
  CONFIGURATION_BIT_TYPE_UNKNOWN_3 = 3,
  CONFIGURATION_BIT_TYPE_UNKNOWN_4 = 4,
  CONFIGURATION_BIT_TYPE_UNKNOWN_5 = 5,
  CONFIGURATION_BIT_TYPE_UNKNOWN_6 = 6,
  CONFIGURATION_BIT_TYPE_UNKNOWN_7 = 7,
  CONFIGURATION_BIT_TYPE_UNKNOWN_8 = 8,
  CONFIGURATION_BIT_TYPE_UNKNOWN_9 = 9,
  CONFIGURATION_BIT_TYPE_UNKNOWN_10 = 10,
  CONFIGURATION_BIT_TYPE_UNKNOWN_11 = 11,
  CONFIGURATION_BIT_TYPE_UNKNOWN_12 = 12,
  CONFIGURATION_BIT_TYPE_UNKNOWN_13 = 13,
  CONFIGURATION_BIT_TYPE_UNKNOWN_14 = 14,
  CONFIGURATION_BIT_TYPE_UNKNOWN_15 = 15,
  CONFIGURATION_BIT_TYPE_UNKNOWN_16 = 16,
  CONFIGURATION_BIT_TYPE_UNKNOWN_17 = 17,
  CONFIGURATION_BIT_TYPE_UNKNOWN_18 = 18,
  CONFIGURATION_BIT_TYPE_UNKNOWN_19 = 19,
  CONFIGURATION_BIT_TYPE_UNKNOWN_20 = 20,
  CONFIGURATION_BIT_TYPE_UNKNOWN_21 = 21,
  CONFIGURATION_BIT_TYPE_UNKNOWN_22 = 22,
  CONFIGURATION_BIT_TYPE_UNKNOWN_23 = 23,
  CONFIGURATION_BIT_TYPE_UNKNOWN_24 = 24,
  CONFIGURATION_BIT_TYPE_UNKNOWN_25 = 25,
  CONFIGURATION_BIT_TYPE_UNKNOWN_26 = 26,
  CONFIGURATION_BIT_TYPE_UNKNOWN_27 = 27,
  CONFIGURATION_BIT_TYPE_UNKNOWN_28 = 28,
  CONFIGURATION_BIT_TYPE_UNKNOWN_29 = 29,
  CONFIGURATION_BIT_TYPE_UNKNOWN_30 = 30,
  CONFIGURATION_BIT_TYPE_UNKNOWN_31 = 31,
  CONFIGURATION_BIT_TYPE_UNKNOWN_32 = 32,
  CONFIGURATION_BIT_TYPE_UNKNOWN_33 = 33,
  CONFIGURATION_BIT_TYPE_UNKNOWN_34 = 34,
  CONFIGURATION_BIT_TYPE_UNKNOWN_35 = 35,
  CONFIGURATION_BIT_TYPE_UNKNOWN_36 = 36,
}

public enum RichPresenceType {
  RICH_PRESENCE_TYPE_UNKNOWN = 0,
  RICH_PRESENCE_TYPE_IN_CALL_STATE = 1,
  RICH_PRESENCE_TYPE_UNKNOWN_3 = 3,
  RICH_PRESENCE_TYPE_UNKNOWN_4 = 4,
  RICH_PRESENCE_TYPE_UNKNOWN_5 = 5,
  RICH_PRESENCE_TYPE_DEVICE = 2,
  RICH_PRESENCE_TYPE_LAST_SEEN = 6,
}

public enum FieldMask {
  FIELD_MASK_RESERVED = 0,
  FIELD_MASK_REACHABLE = 1,
  FIELD_MASK_AVAILABLE = 2,
  FIELD_MASK_DEVICE = 7,
}

public enum DeleteType {
  DELETE_TYPE_UNKNOWN = 0,
  DELETE_TYPE_UPPER_BOUND = 1,
}

public enum SyncFilter {
  SYNC_FILTER_UNKNOWN = 0,
  SYNC_FILTER_INBOX = 1,
  SYNC_FILTER_ARCHIVED = 2,
}

public enum SoundState {
  SOUND_STATE_UNKNOWN = 0,
  SOUND_STATE_ON = 1,
  SOUND_STATE_OFF = 2,
}

public enum CallerIdSettingsMask {
  CALLER_ID_SETTINGS_MASK_UNKNOWN = 0,
  CALLER_ID_SETTINGS_MASK_PROVIDED = 1,
}

public enum PhoneVerificationStatus {
  PHONE_VERIFICATION_STATUS_UNKNOWN = 0,
  PHONE_VERIFICATION_STATUS_VERIFIED = 1,
}

public enum PhoneDiscoverabilityStatus {
  PHONE_DISCOVERABILITY_STATUS_UNKNOWN = 0,
  PHONE_DISCOVERABILITY_STATUS_OPTED_IN_BUT_NOT_DISCOVERABLE = 2,
}

public enum PhoneValidationResult {
  PHONE_VALIDATION_RESULT_IS_POSSIBLE = 0,
}

#endregion

#region Messages
/// <summary>
///  The state of do-not-disturb mode. Not to be confused with DndSetting, which
///  is used to change the state of do-not-disturb mode.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DoNotDisturbSetting : pb::IMessage<DoNotDisturbSetting> {
  private static readonly pb::MessageParser<DoNotDisturbSetting> _parser = new pb::MessageParser<DoNotDisturbSetting>(() => new DoNotDisturbSetting());
  public static pb::MessageParser<DoNotDisturbSetting> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[0]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public DoNotDisturbSetting() {
    OnConstruction();
  }

  partial void OnConstruction();

  public DoNotDisturbSetting(DoNotDisturbSetting other) : this() {
    doNotDisturb_ = other.doNotDisturb_;
    expirationTimestamp_ = other.expirationTimestamp_;
    version_ = other.version_;
  }

  public DoNotDisturbSetting Clone() {
    return new DoNotDisturbSetting(this);
  }

  /// <summary>Field number for the "do_not_disturb" field.</summary>
  public const int DoNotDisturbFieldNumber = 1;
  private bool doNotDisturb_;
  /// <summary>
  ///  Whether do-not-disturb mode is enabled.
  /// </summary>
  public bool DoNotDisturb {
    get { return doNotDisturb_; }
    set {
      doNotDisturb_ = value;
    }
  }

  /// <summary>Field number for the "expiration_timestamp" field.</summary>
  public const int ExpirationTimestampFieldNumber = 2;
  private ulong expirationTimestamp_;
  /// <summary>
  ///  Timestamp when do-not-disturb mode expires.
  /// </summary>
  public ulong ExpirationTimestamp {
    get { return expirationTimestamp_; }
    set {
      expirationTimestamp_ = value;
    }
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 3;
  private ulong version_;
  /// <summary>
  ///  Timestamp when this setting was applied. Not present when this message
  ///  comes from a notification.
  /// </summary>
  public ulong Version {
    get { return version_; }
    set {
      version_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as DoNotDisturbSetting);
  }

  public bool Equals(DoNotDisturbSetting other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DoNotDisturb != other.DoNotDisturb) return false;
    if (ExpirationTimestamp != other.ExpirationTimestamp) return false;
    if (Version != other.Version) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (DoNotDisturb != false) hash ^= DoNotDisturb.GetHashCode();
    if (ExpirationTimestamp != 0UL) hash ^= ExpirationTimestamp.GetHashCode();
    if (Version != 0UL) hash ^= Version.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (DoNotDisturb != false) {
      output.WriteRawTag(8);
      output.WriteBool(DoNotDisturb);
    }
    if (ExpirationTimestamp != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(ExpirationTimestamp);
    }
    if (Version != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(Version);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (DoNotDisturb != false) {
      size += 1 + 1;
    }
    if (ExpirationTimestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpirationTimestamp);
    }
    if (Version != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Version);
    }
    return size;
  }

  public void MergeFrom(DoNotDisturbSetting other) {
    if (other == null) {
      return;
    }
    if (other.DoNotDisturb != false) {
      DoNotDisturb = other.DoNotDisturb;
    }
    if (other.ExpirationTimestamp != 0UL) {
      ExpirationTimestamp = other.ExpirationTimestamp;
    }
    if (other.Version != 0UL) {
      Version = other.Version;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          DoNotDisturb = input.ReadBool();
          break;
        }
        case 16: {
          ExpirationTimestamp = input.ReadUInt64();
          break;
        }
        case 24: {
          Version = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class NotificationSettings : pb::IMessage<NotificationSettings> {
  private static readonly pb::MessageParser<NotificationSettings> _parser = new pb::MessageParser<NotificationSettings>(() => new NotificationSettings());
  public static pb::MessageParser<NotificationSettings> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[1]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public NotificationSettings() {
    OnConstruction();
  }

  partial void OnConstruction();

  public NotificationSettings(NotificationSettings other) : this() {
    DndSettings = other.dndSettings_ != null ? other.DndSettings.Clone() : null;
  }

  public NotificationSettings Clone() {
    return new NotificationSettings(this);
  }

  /// <summary>Field number for the "dnd_settings" field.</summary>
  public const int DndSettingsFieldNumber = 1;
  private global::DoNotDisturbSetting dndSettings_;
  public global::DoNotDisturbSetting DndSettings {
    get { return dndSettings_; }
    set {
      dndSettings_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as NotificationSettings);
  }

  public bool Equals(NotificationSettings other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DndSettings, other.DndSettings)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (dndSettings_ != null) hash ^= DndSettings.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (dndSettings_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DndSettings);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (dndSettings_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DndSettings);
    }
    return size;
  }

  public void MergeFrom(NotificationSettings other) {
    if (other == null) {
      return;
    }
    if (other.dndSettings_ != null) {
      if (dndSettings_ == null) {
        dndSettings_ = new global::DoNotDisturbSetting();
      }
      DndSettings.MergeFrom(other.DndSettings);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (dndSettings_ == null) {
            dndSettings_ = new global::DoNotDisturbSetting();
          }
          input.ReadMessage(dndSettings_);
          break;
        }
      }
    }
  }

}

/// <summary>
///  Identifies a conversation.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ConversationId : pb::IMessage<ConversationId> {
  private static readonly pb::MessageParser<ConversationId> _parser = new pb::MessageParser<ConversationId>(() => new ConversationId());
  public static pb::MessageParser<ConversationId> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[2]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public ConversationId() {
    OnConstruction();
  }

  partial void OnConstruction();

  public ConversationId(ConversationId other) : this() {
    id_ = other.id_;
  }

  public ConversationId Clone() {
    return new ConversationId(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  /// <summary>
  ///  Unique identifier for a conversation.
  /// </summary>
  public string Id {
    get { return id_; }
    set {
      id_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as ConversationId);
  }

  public bool Equals(ConversationId other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    return size;
  }

  public void MergeFrom(ConversationId other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///  Identifies a user.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ParticipantId : pb::IMessage<ParticipantId> {
  private static readonly pb::MessageParser<ParticipantId> _parser = new pb::MessageParser<ParticipantId>(() => new ParticipantId());
  public static pb::MessageParser<ParticipantId> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[3]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public ParticipantId() {
    OnConstruction();
  }

  partial void OnConstruction();

  public ParticipantId(ParticipantId other) : this() {
    gaiaId_ = other.gaiaId_;
    chatId_ = other.chatId_;
  }

  public ParticipantId Clone() {
    return new ParticipantId(this);
  }

  /// <summary>Field number for the "gaia_id" field.</summary>
  public const int GaiaIdFieldNumber = 1;
  private string gaiaId_ = "";
  /// <summary>
  ///  Unique identifier for a user's Google account.
  /// </summary>
  public string GaiaId {
    get { return gaiaId_; }
    set {
      gaiaId_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "chat_id" field.</summary>
  public const int ChatIdFieldNumber = 2;
  private string chatId_ = "";
  /// <summary>
  ///  Seems to always be the same as gaia_id.
  /// </summary>
  public string ChatId {
    get { return chatId_; }
    set {
      chatId_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as ParticipantId);
  }

  public bool Equals(ParticipantId other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GaiaId != other.GaiaId) return false;
    if (ChatId != other.ChatId) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (GaiaId.Length != 0) hash ^= GaiaId.GetHashCode();
    if (ChatId.Length != 0) hash ^= ChatId.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (GaiaId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(GaiaId);
    }
    if (ChatId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ChatId);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (GaiaId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GaiaId);
    }
    if (ChatId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ChatId);
    }
    return size;
  }

  public void MergeFrom(ParticipantId other) {
    if (other == null) {
      return;
    }
    if (other.GaiaId.Length != 0) {
      GaiaId = other.GaiaId;
    }
    if (other.ChatId.Length != 0) {
      ChatId = other.ChatId;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          GaiaId = input.ReadString();
          break;
        }
        case 18: {
          ChatId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///  Indicates whether Hangouts is active (running in the foreground) on
///  different types of devices.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DeviceStatus : pb::IMessage<DeviceStatus> {
  private static readonly pb::MessageParser<DeviceStatus> _parser = new pb::MessageParser<DeviceStatus>(() => new DeviceStatus());
  public static pb::MessageParser<DeviceStatus> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[4]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public DeviceStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  public DeviceStatus(DeviceStatus other) : this() {
    mobile_ = other.mobile_;
    desktop_ = other.desktop_;
    tablet_ = other.tablet_;
  }

  public DeviceStatus Clone() {
    return new DeviceStatus(this);
  }

  /// <summary>Field number for the "mobile" field.</summary>
  public const int MobileFieldNumber = 1;
  private bool mobile_;
  /// <summary>
  ///  True if a mobile phone is active.
  /// </summary>
  public bool Mobile {
    get { return mobile_; }
    set {
      mobile_ = value;
    }
  }

  /// <summary>Field number for the "desktop" field.</summary>
  public const int DesktopFieldNumber = 2;
  private bool desktop_;
  /// <summary>
  ///  True if a desktop or laptop is active.
  /// </summary>
  public bool Desktop {
    get { return desktop_; }
    set {
      desktop_ = value;
    }
  }

  /// <summary>Field number for the "tablet" field.</summary>
  public const int TabletFieldNumber = 3;
  private bool tablet_;
  /// <summary>
  ///  True if a tablet is active.
  /// </summary>
  public bool Tablet {
    get { return tablet_; }
    set {
      tablet_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as DeviceStatus);
  }

  public bool Equals(DeviceStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Mobile != other.Mobile) return false;
    if (Desktop != other.Desktop) return false;
    if (Tablet != other.Tablet) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Mobile != false) hash ^= Mobile.GetHashCode();
    if (Desktop != false) hash ^= Desktop.GetHashCode();
    if (Tablet != false) hash ^= Tablet.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Mobile != false) {
      output.WriteRawTag(8);
      output.WriteBool(Mobile);
    }
    if (Desktop != false) {
      output.WriteRawTag(16);
      output.WriteBool(Desktop);
    }
    if (Tablet != false) {
      output.WriteRawTag(24);
      output.WriteBool(Tablet);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Mobile != false) {
      size += 1 + 1;
    }
    if (Desktop != false) {
      size += 1 + 1;
    }
    if (Tablet != false) {
      size += 1 + 1;
    }
    return size;
  }

  public void MergeFrom(DeviceStatus other) {
    if (other == null) {
      return;
    }
    if (other.Mobile != false) {
      Mobile = other.Mobile;
    }
    if (other.Desktop != false) {
      Desktop = other.Desktop;
    }
    if (other.Tablet != false) {
      Tablet = other.Tablet;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Mobile = input.ReadBool();
          break;
        }
        case 16: {
          Desktop = input.ReadBool();
          break;
        }
        case 24: {
          Tablet = input.ReadBool();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Presence : pb::IMessage<Presence> {
  private static readonly pb::MessageParser<Presence> _parser = new pb::MessageParser<Presence>(() => new Presence());
  public static pb::MessageParser<Presence> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[5]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public Presence() {
    OnConstruction();
  }

  partial void OnConstruction();

  public Presence(Presence other) : this() {
    reachable_ = other.reachable_;
    available_ = other.available_;
    DeviceStatus = other.deviceStatus_ != null ? other.DeviceStatus.Clone() : null;
    MoodSetting = other.moodSetting_ != null ? other.MoodSetting.Clone() : null;
  }

  public Presence Clone() {
    return new Presence(this);
  }

  /// <summary>Field number for the "reachable" field.</summary>
  public const int ReachableFieldNumber = 1;
  private bool reachable_;
  public bool Reachable {
    get { return reachable_; }
    set {
      reachable_ = value;
    }
  }

  /// <summary>Field number for the "available" field.</summary>
  public const int AvailableFieldNumber = 2;
  private bool available_;
  public bool Available {
    get { return available_; }
    set {
      available_ = value;
    }
  }

  /// <summary>Field number for the "device_status" field.</summary>
  public const int DeviceStatusFieldNumber = 6;
  private global::DeviceStatus deviceStatus_;
  public global::DeviceStatus DeviceStatus {
    get { return deviceStatus_; }
    set {
      deviceStatus_ = value;
    }
  }

  /// <summary>Field number for the "mood_setting" field.</summary>
  public const int MoodSettingFieldNumber = 9;
  private global::MoodSetting moodSetting_;
  public global::MoodSetting MoodSetting {
    get { return moodSetting_; }
    set {
      moodSetting_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as Presence);
  }

  public bool Equals(Presence other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Reachable != other.Reachable) return false;
    if (Available != other.Available) return false;
    if (!object.Equals(DeviceStatus, other.DeviceStatus)) return false;
    if (!object.Equals(MoodSetting, other.MoodSetting)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Reachable != false) hash ^= Reachable.GetHashCode();
    if (Available != false) hash ^= Available.GetHashCode();
    if (deviceStatus_ != null) hash ^= DeviceStatus.GetHashCode();
    if (moodSetting_ != null) hash ^= MoodSetting.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Reachable != false) {
      output.WriteRawTag(8);
      output.WriteBool(Reachable);
    }
    if (Available != false) {
      output.WriteRawTag(16);
      output.WriteBool(Available);
    }
    if (deviceStatus_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(DeviceStatus);
    }
    if (moodSetting_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(MoodSetting);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Reachable != false) {
      size += 1 + 1;
    }
    if (Available != false) {
      size += 1 + 1;
    }
    if (deviceStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceStatus);
    }
    if (moodSetting_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoodSetting);
    }
    return size;
  }

  public void MergeFrom(Presence other) {
    if (other == null) {
      return;
    }
    if (other.Reachable != false) {
      Reachable = other.Reachable;
    }
    if (other.Available != false) {
      Available = other.Available;
    }
    if (other.deviceStatus_ != null) {
      if (deviceStatus_ == null) {
        deviceStatus_ = new global::DeviceStatus();
      }
      DeviceStatus.MergeFrom(other.DeviceStatus);
    }
    if (other.moodSetting_ != null) {
      if (moodSetting_ == null) {
        moodSetting_ = new global::MoodSetting();
      }
      MoodSetting.MergeFrom(other.MoodSetting);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Reachable = input.ReadBool();
          break;
        }
        case 16: {
          Available = input.ReadBool();
          break;
        }
        case 50: {
          if (deviceStatus_ == null) {
            deviceStatus_ = new global::DeviceStatus();
          }
          input.ReadMessage(deviceStatus_);
          break;
        }
        case 74: {
          if (moodSetting_ == null) {
            moodSetting_ = new global::MoodSetting();
          }
          input.ReadMessage(moodSetting_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PresenceResult : pb::IMessage<PresenceResult> {
  private static readonly pb::MessageParser<PresenceResult> _parser = new pb::MessageParser<PresenceResult>(() => new PresenceResult());
  public static pb::MessageParser<PresenceResult> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[6]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public PresenceResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  public PresenceResult(PresenceResult other) : this() {
    UserId = other.userId_ != null ? other.UserId.Clone() : null;
    Presence = other.presence_ != null ? other.Presence.Clone() : null;
  }

  public PresenceResult Clone() {
    return new PresenceResult(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private global::ParticipantId userId_;
  public global::ParticipantId UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "presence" field.</summary>
  public const int PresenceFieldNumber = 2;
  private global::Presence presence_;
  public global::Presence Presence {
    get { return presence_; }
    set {
      presence_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as PresenceResult);
  }

  public bool Equals(PresenceResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(UserId, other.UserId)) return false;
    if (!object.Equals(Presence, other.Presence)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (userId_ != null) hash ^= UserId.GetHashCode();
    if (presence_ != null) hash ^= Presence.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (userId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(UserId);
    }
    if (presence_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Presence);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (userId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserId);
    }
    if (presence_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Presence);
    }
    return size;
  }

  public void MergeFrom(PresenceResult other) {
    if (other == null) {
      return;
    }
    if (other.userId_ != null) {
      if (userId_ == null) {
        userId_ = new global::ParticipantId();
      }
      UserId.MergeFrom(other.UserId);
    }
    if (other.presence_ != null) {
      if (presence_ == null) {
        presence_ = new global::Presence();
      }
      Presence.MergeFrom(other.Presence);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (userId_ == null) {
            userId_ = new global::ParticipantId();
          }
          input.ReadMessage(userId_);
          break;
        }
        case 18: {
          if (presence_ == null) {
            presence_ = new global::Presence();
          }
          input.ReadMessage(presence_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ClientIdentifier : pb::IMessage<ClientIdentifier> {
  private static readonly pb::MessageParser<ClientIdentifier> _parser = new pb::MessageParser<ClientIdentifier>(() => new ClientIdentifier());
  public static pb::MessageParser<ClientIdentifier> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[7]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public ClientIdentifier() {
    OnConstruction();
  }

  partial void OnConstruction();

  public ClientIdentifier(ClientIdentifier other) : this() {
    resource_ = other.resource_;
    headerId_ = other.headerId_;
  }

  public ClientIdentifier Clone() {
    return new ClientIdentifier(this);
  }

  /// <summary>Field number for the "resource" field.</summary>
  public const int ResourceFieldNumber = 1;
  private string resource_ = "";
  /// <summary>
  ///  (client_id in hangups).
  /// </summary>
  public string Resource {
    get { return resource_; }
    set {
      resource_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "header_id" field.</summary>
  public const int HeaderIdFieldNumber = 2;
  private string headerId_ = "";
  /// <summary>
  ///  unknown (header_id in hangups).
  /// </summary>
  public string HeaderId {
    get { return headerId_; }
    set {
      headerId_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as ClientIdentifier);
  }

  public bool Equals(ClientIdentifier other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Resource != other.Resource) return false;
    if (HeaderId != other.HeaderId) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Resource.Length != 0) hash ^= Resource.GetHashCode();
    if (HeaderId.Length != 0) hash ^= HeaderId.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Resource.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Resource);
    }
    if (HeaderId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(HeaderId);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Resource.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Resource);
    }
    if (HeaderId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HeaderId);
    }
    return size;
  }

  public void MergeFrom(ClientIdentifier other) {
    if (other == null) {
      return;
    }
    if (other.Resource.Length != 0) {
      Resource = other.Resource;
    }
    if (other.HeaderId.Length != 0) {
      HeaderId = other.HeaderId;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Resource = input.ReadString();
          break;
        }
        case 18: {
          HeaderId = input.ReadString();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ClientPresenceState : pb::IMessage<ClientPresenceState> {
  private static readonly pb::MessageParser<ClientPresenceState> _parser = new pb::MessageParser<ClientPresenceState>(() => new ClientPresenceState());
  public static pb::MessageParser<ClientPresenceState> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[8]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public ClientPresenceState() {
    OnConstruction();
  }

  partial void OnConstruction();

  public ClientPresenceState(ClientPresenceState other) : this() {
    Identifier = other.identifier_ != null ? other.Identifier.Clone() : null;
    state_ = other.state_;
  }

  public ClientPresenceState Clone() {
    return new ClientPresenceState(this);
  }

  /// <summary>Field number for the "identifier" field.</summary>
  public const int IdentifierFieldNumber = 1;
  private global::ClientIdentifier identifier_;
  public global::ClientIdentifier Identifier {
    get { return identifier_; }
    set {
      identifier_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 2;
  private global::ClientPresenceStateType state_ = global::ClientPresenceStateType.CLIENT_PRESENCE_STATE_UNKNOWN;
  public global::ClientPresenceStateType State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as ClientPresenceState);
  }

  public bool Equals(ClientPresenceState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Identifier, other.Identifier)) return false;
    if (State != other.State) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (identifier_ != null) hash ^= Identifier.GetHashCode();
    if (State != global::ClientPresenceStateType.CLIENT_PRESENCE_STATE_UNKNOWN) hash ^= State.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (identifier_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Identifier);
    }
    if (State != global::ClientPresenceStateType.CLIENT_PRESENCE_STATE_UNKNOWN) {
      output.WriteRawTag(16);
      output.WriteEnum((int) State);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (identifier_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Identifier);
    }
    if (State != global::ClientPresenceStateType.CLIENT_PRESENCE_STATE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
    }
    return size;
  }

  public void MergeFrom(ClientPresenceState other) {
    if (other == null) {
      return;
    }
    if (other.identifier_ != null) {
      if (identifier_ == null) {
        identifier_ = new global::ClientIdentifier();
      }
      Identifier.MergeFrom(other.Identifier);
    }
    if (other.State != global::ClientPresenceStateType.CLIENT_PRESENCE_STATE_UNKNOWN) {
      State = other.State;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (identifier_ == null) {
            identifier_ = new global::ClientIdentifier();
          }
          input.ReadMessage(identifier_);
          break;
        }
        case 16: {
          state_ = (global::ClientPresenceStateType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class UserEventState : pb::IMessage<UserEventState> {
  private static readonly pb::MessageParser<UserEventState> _parser = new pb::MessageParser<UserEventState>(() => new UserEventState());
  public static pb::MessageParser<UserEventState> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[9]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public UserEventState() {
    OnConstruction();
  }

  partial void OnConstruction();

  public UserEventState(UserEventState other) : this() {
    UserId = other.userId_ != null ? other.UserId.Clone() : null;
    clientGeneratedId_ = other.clientGeneratedId_;
    notificationLevel_ = other.notificationLevel_;
  }

  public UserEventState Clone() {
    return new UserEventState(this);
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 1;
  private global::ParticipantId userId_;
  public global::ParticipantId UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  /// <summary>Field number for the "client_generated_id" field.</summary>
  public const int ClientGeneratedIdFieldNumber = 2;
  private string clientGeneratedId_ = "";
  public string ClientGeneratedId {
    get { return clientGeneratedId_; }
    set {
      clientGeneratedId_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "notification_level" field.</summary>
  public const int NotificationLevelFieldNumber = 3;
  private global::NotificationLevel notificationLevel_ = global::NotificationLevel.NOTIFICATION_LEVEL_UNKNOWN;
  public global::NotificationLevel NotificationLevel {
    get { return notificationLevel_; }
    set {
      notificationLevel_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as UserEventState);
  }

  public bool Equals(UserEventState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(UserId, other.UserId)) return false;
    if (ClientGeneratedId != other.ClientGeneratedId) return false;
    if (NotificationLevel != other.NotificationLevel) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (userId_ != null) hash ^= UserId.GetHashCode();
    if (ClientGeneratedId.Length != 0) hash ^= ClientGeneratedId.GetHashCode();
    if (NotificationLevel != global::NotificationLevel.NOTIFICATION_LEVEL_UNKNOWN) hash ^= NotificationLevel.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (userId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(UserId);
    }
    if (ClientGeneratedId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ClientGeneratedId);
    }
    if (NotificationLevel != global::NotificationLevel.NOTIFICATION_LEVEL_UNKNOWN) {
      output.WriteRawTag(24);
      output.WriteEnum((int) NotificationLevel);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (userId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserId);
    }
    if (ClientGeneratedId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientGeneratedId);
    }
    if (NotificationLevel != global::NotificationLevel.NOTIFICATION_LEVEL_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NotificationLevel);
    }
    return size;
  }

  public void MergeFrom(UserEventState other) {
    if (other == null) {
      return;
    }
    if (other.userId_ != null) {
      if (userId_ == null) {
        userId_ = new global::ParticipantId();
      }
      UserId.MergeFrom(other.UserId);
    }
    if (other.ClientGeneratedId.Length != 0) {
      ClientGeneratedId = other.ClientGeneratedId;
    }
    if (other.NotificationLevel != global::NotificationLevel.NOTIFICATION_LEVEL_UNKNOWN) {
      NotificationLevel = other.NotificationLevel;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (userId_ == null) {
            userId_ = new global::ParticipantId();
          }
          input.ReadMessage(userId_);
          break;
        }
        case 18: {
          ClientGeneratedId = input.ReadString();
          break;
        }
        case 24: {
          notificationLevel_ = (global::NotificationLevel) input.ReadEnum();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Formatting : pb::IMessage<Formatting> {
  private static readonly pb::MessageParser<Formatting> _parser = new pb::MessageParser<Formatting>(() => new Formatting());
  public static pb::MessageParser<Formatting> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[10]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public Formatting() {
    OnConstruction();
  }

  partial void OnConstruction();

  public Formatting(Formatting other) : this() {
    bold_ = other.bold_;
    italic_ = other.italic_;
    strikethrough_ = other.strikethrough_;
    underline_ = other.underline_;
  }

  public Formatting Clone() {
    return new Formatting(this);
  }

  /// <summary>Field number for the "bold" field.</summary>
  public const int BoldFieldNumber = 1;
  private bool bold_;
  public bool Bold {
    get { return bold_; }
    set {
      bold_ = value;
    }
  }

  /// <summary>Field number for the "italic" field.</summary>
  public const int ItalicFieldNumber = 2;
  private bool italic_;
  public bool Italic {
    get { return italic_; }
    set {
      italic_ = value;
    }
  }

  /// <summary>Field number for the "strikethrough" field.</summary>
  public const int StrikethroughFieldNumber = 3;
  private bool strikethrough_;
  public bool Strikethrough {
    get { return strikethrough_; }
    set {
      strikethrough_ = value;
    }
  }

  /// <summary>Field number for the "underline" field.</summary>
  public const int UnderlineFieldNumber = 4;
  private bool underline_;
  public bool Underline {
    get { return underline_; }
    set {
      underline_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as Formatting);
  }

  public bool Equals(Formatting other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Bold != other.Bold) return false;
    if (Italic != other.Italic) return false;
    if (Strikethrough != other.Strikethrough) return false;
    if (Underline != other.Underline) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Bold != false) hash ^= Bold.GetHashCode();
    if (Italic != false) hash ^= Italic.GetHashCode();
    if (Strikethrough != false) hash ^= Strikethrough.GetHashCode();
    if (Underline != false) hash ^= Underline.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Bold != false) {
      output.WriteRawTag(8);
      output.WriteBool(Bold);
    }
    if (Italic != false) {
      output.WriteRawTag(16);
      output.WriteBool(Italic);
    }
    if (Strikethrough != false) {
      output.WriteRawTag(24);
      output.WriteBool(Strikethrough);
    }
    if (Underline != false) {
      output.WriteRawTag(32);
      output.WriteBool(Underline);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Bold != false) {
      size += 1 + 1;
    }
    if (Italic != false) {
      size += 1 + 1;
    }
    if (Strikethrough != false) {
      size += 1 + 1;
    }
    if (Underline != false) {
      size += 1 + 1;
    }
    return size;
  }

  public void MergeFrom(Formatting other) {
    if (other == null) {
      return;
    }
    if (other.Bold != false) {
      Bold = other.Bold;
    }
    if (other.Italic != false) {
      Italic = other.Italic;
    }
    if (other.Strikethrough != false) {
      Strikethrough = other.Strikethrough;
    }
    if (other.Underline != false) {
      Underline = other.Underline;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Bold = input.ReadBool();
          break;
        }
        case 16: {
          Italic = input.ReadBool();
          break;
        }
        case 24: {
          Strikethrough = input.ReadBool();
          break;
        }
        case 32: {
          Underline = input.ReadBool();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class LinkData : pb::IMessage<LinkData> {
  private static readonly pb::MessageParser<LinkData> _parser = new pb::MessageParser<LinkData>(() => new LinkData());
  public static pb::MessageParser<LinkData> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[11]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public LinkData() {
    OnConstruction();
  }

  partial void OnConstruction();

  public LinkData(LinkData other) : this() {
    linkTarget_ = other.linkTarget_;
  }

  public LinkData Clone() {
    return new LinkData(this);
  }

  /// <summary>Field number for the "link_target" field.</summary>
  public const int LinkTargetFieldNumber = 1;
  private string linkTarget_ = "";
  public string LinkTarget {
    get { return linkTarget_; }
    set {
      linkTarget_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as LinkData);
  }

  public bool Equals(LinkData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LinkTarget != other.LinkTarget) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (LinkTarget.Length != 0) hash ^= LinkTarget.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (LinkTarget.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(LinkTarget);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (LinkTarget.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LinkTarget);
    }
    return size;
  }

  public void MergeFrom(LinkData other) {
    if (other == null) {
      return;
    }
    if (other.LinkTarget.Length != 0) {
      LinkTarget = other.LinkTarget;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          LinkTarget = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///  A segment of a message. Message are broken into segments that may be of
///  different types and have different formatting.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Segment : pb::IMessage<Segment> {
  private static readonly pb::MessageParser<Segment> _parser = new pb::MessageParser<Segment>(() => new Segment());
  public static pb::MessageParser<Segment> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[12]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public Segment() {
    OnConstruction();
  }

  partial void OnConstruction();

  public Segment(Segment other) : this() {
    type_ = other.type_;
    text_ = other.text_;
    Formatting = other.formatting_ != null ? other.Formatting.Clone() : null;
    LinkData = other.linkData_ != null ? other.LinkData.Clone() : null;
  }

  public Segment Clone() {
    return new Segment(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::SegmentType type_ = global::SegmentType.SEGMENT_TYPE_TEXT;
  /// <summary>
  ///  Note: This field is required because Hangouts for Chrome misbehaves if it
  ///  isn't serialized.
  /// </summary>
  public global::SegmentType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "text" field.</summary>
  public const int TextFieldNumber = 2;
  private string text_ = "";
  /// <summary>
  ///  The segment text. For line breaks, may either be empty or contain new line
  ///  character.
  /// </summary>
  public string Text {
    get { return text_; }
    set {
      text_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "formatting" field.</summary>
  public const int FormattingFieldNumber = 3;
  private global::Formatting formatting_;
  /// <summary>
  ///  Formatting for this segment.
  /// </summary>
  public global::Formatting Formatting {
    get { return formatting_; }
    set {
      formatting_ = value;
    }
  }

  /// <summary>Field number for the "link_data" field.</summary>
  public const int LinkDataFieldNumber = 4;
  private global::LinkData linkData_;
  /// <summary>
  ///  Link data for this segment, if it is a link.
  /// </summary>
  public global::LinkData LinkData {
    get { return linkData_; }
    set {
      linkData_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as Segment);
  }

  public bool Equals(Segment other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Text != other.Text) return false;
    if (!object.Equals(Formatting, other.Formatting)) return false;
    if (!object.Equals(LinkData, other.LinkData)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Type != global::SegmentType.SEGMENT_TYPE_TEXT) hash ^= Type.GetHashCode();
    if (Text.Length != 0) hash ^= Text.GetHashCode();
    if (formatting_ != null) hash ^= Formatting.GetHashCode();
    if (linkData_ != null) hash ^= LinkData.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != global::SegmentType.SEGMENT_TYPE_TEXT) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (Text.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Text);
    }
    if (formatting_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Formatting);
    }
    if (linkData_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(LinkData);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Type != global::SegmentType.SEGMENT_TYPE_TEXT) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Text.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
    }
    if (formatting_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Formatting);
    }
    if (linkData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinkData);
    }
    return size;
  }

  public void MergeFrom(Segment other) {
    if (other == null) {
      return;
    }
    if (other.Type != global::SegmentType.SEGMENT_TYPE_TEXT) {
      Type = other.Type;
    }
    if (other.Text.Length != 0) {
      Text = other.Text;
    }
    if (other.formatting_ != null) {
      if (formatting_ == null) {
        formatting_ = new global::Formatting();
      }
      Formatting.MergeFrom(other.Formatting);
    }
    if (other.linkData_ != null) {
      if (linkData_ == null) {
        linkData_ = new global::LinkData();
      }
      LinkData.MergeFrom(other.LinkData);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          type_ = (global::SegmentType) input.ReadEnum();
          break;
        }
        case 18: {
          Text = input.ReadString();
          break;
        }
        case 26: {
          if (formatting_ == null) {
            formatting_ = new global::Formatting();
          }
          input.ReadMessage(formatting_);
          break;
        }
        case 34: {
          if (linkData_ == null) {
            linkData_ = new global::LinkData();
          }
          input.ReadMessage(linkData_);
          break;
        }
      }
    }
  }

}

/// <summary>
///  Google Plus photo that can be embedded in a chat message.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PlusPhoto : pb::IMessage<PlusPhoto> {
  private static readonly pb::MessageParser<PlusPhoto> _parser = new pb::MessageParser<PlusPhoto>(() => new PlusPhoto());
  public static pb::MessageParser<PlusPhoto> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[13]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public PlusPhoto() {
    OnConstruction();
  }

  partial void OnConstruction();

  public PlusPhoto(PlusPhoto other) : this() {
    Thumbnail = other.thumbnail_ != null ? other.Thumbnail.Clone() : null;
    ownerObfuscatedId_ = other.ownerObfuscatedId_;
    albumId_ = other.albumId_;
    photoId_ = other.photoId_;
    url_ = other.url_;
    originalContentUrl_ = other.originalContentUrl_;
    mediaType_ = other.mediaType_;
    streamId_ = other.streamId_.Clone();
  }

  public PlusPhoto Clone() {
    return new PlusPhoto(this);
  }

  /// <summary>Field number for the "thumbnail" field.</summary>
  public const int ThumbnailFieldNumber = 1;
  private global::PlusPhoto.Types.Thumbnail thumbnail_;
  /// <summary>
  ///  Thumbnail.
  /// </summary>
  public global::PlusPhoto.Types.Thumbnail Thumbnail {
    get { return thumbnail_; }
    set {
      thumbnail_ = value;
    }
  }

  /// <summary>Field number for the "owner_obfuscated_id" field.</summary>
  public const int OwnerObfuscatedIdFieldNumber = 2;
  private string ownerObfuscatedId_ = "";
  /// <summary>
  ///  Owner obfuscated ID.
  /// </summary>
  public string OwnerObfuscatedId {
    get { return ownerObfuscatedId_; }
    set {
      ownerObfuscatedId_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "album_id" field.</summary>
  public const int AlbumIdFieldNumber = 3;
  private string albumId_ = "";
  /// <summary>
  ///  Album ID.
  /// </summary>
  public string AlbumId {
    get { return albumId_; }
    set {
      albumId_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "photo_id" field.</summary>
  public const int PhotoIdFieldNumber = 4;
  private string photoId_ = "";
  /// <summary>
  ///  Photo ID.
  /// </summary>
  public string PhotoId {
    get { return photoId_; }
    set {
      photoId_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "url" field.</summary>
  public const int UrlFieldNumber = 6;
  private string url_ = "";
  /// <summary>
  ///  URL of full-sized image.
  /// </summary>
  public string Url {
    get { return url_; }
    set {
      url_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "original_content_url" field.</summary>
  public const int OriginalContentUrlFieldNumber = 10;
  private string originalContentUrl_ = "";
  /// <summary>
  ///  URL of image thumbnail.
  /// </summary>
  public string OriginalContentUrl {
    get { return originalContentUrl_; }
    set {
      originalContentUrl_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "media_type" field.</summary>
  public const int MediaTypeFieldNumber = 13;
  private global::PlusPhoto.Types.MediaType mediaType_ = global::PlusPhoto.Types.MediaType.MEDIA_TYPE_UNKNOWN;
  /// <summary>
  ///  The media type.
  /// </summary>
  public global::PlusPhoto.Types.MediaType MediaType {
    get { return mediaType_; }
    set {
      mediaType_ = value;
    }
  }

  /// <summary>Field number for the "stream_id" field.</summary>
  public const int StreamIdFieldNumber = 14;
  private static readonly pb::FieldCodec<string> _repeated_streamId_codec
      = pb::FieldCodec.ForString(114);
  private readonly pbc::RepeatedField<string> streamId_ = new pbc::RepeatedField<string>();
  /// <summary>
  ///  List of stream ID parameters.
  /// </summary>
  public pbc::RepeatedField<string> StreamId {
    get { return streamId_; }
  }

  public override bool Equals(object other) {
    return Equals(other as PlusPhoto);
  }

  public bool Equals(PlusPhoto other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Thumbnail, other.Thumbnail)) return false;
    if (OwnerObfuscatedId != other.OwnerObfuscatedId) return false;
    if (AlbumId != other.AlbumId) return false;
    if (PhotoId != other.PhotoId) return false;
    if (Url != other.Url) return false;
    if (OriginalContentUrl != other.OriginalContentUrl) return false;
    if (MediaType != other.MediaType) return false;
    if(!streamId_.Equals(other.streamId_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (thumbnail_ != null) hash ^= Thumbnail.GetHashCode();
    if (OwnerObfuscatedId.Length != 0) hash ^= OwnerObfuscatedId.GetHashCode();
    if (AlbumId.Length != 0) hash ^= AlbumId.GetHashCode();
    if (PhotoId.Length != 0) hash ^= PhotoId.GetHashCode();
    if (Url.Length != 0) hash ^= Url.GetHashCode();
    if (OriginalContentUrl.Length != 0) hash ^= OriginalContentUrl.GetHashCode();
    if (MediaType != global::PlusPhoto.Types.MediaType.MEDIA_TYPE_UNKNOWN) hash ^= MediaType.GetHashCode();
    hash ^= streamId_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (thumbnail_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Thumbnail);
    }
    if (OwnerObfuscatedId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(OwnerObfuscatedId);
    }
    if (AlbumId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(AlbumId);
    }
    if (PhotoId.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(PhotoId);
    }
    if (Url.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Url);
    }
    if (OriginalContentUrl.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(OriginalContentUrl);
    }
    if (MediaType != global::PlusPhoto.Types.MediaType.MEDIA_TYPE_UNKNOWN) {
      output.WriteRawTag(104);
      output.WriteEnum((int) MediaType);
    }
    streamId_.WriteTo(output, _repeated_streamId_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (thumbnail_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Thumbnail);
    }
    if (OwnerObfuscatedId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerObfuscatedId);
    }
    if (AlbumId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AlbumId);
    }
    if (PhotoId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PhotoId);
    }
    if (Url.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
    }
    if (OriginalContentUrl.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OriginalContentUrl);
    }
    if (MediaType != global::PlusPhoto.Types.MediaType.MEDIA_TYPE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MediaType);
    }
    size += streamId_.CalculateSize(_repeated_streamId_codec);
    return size;
  }

  public void MergeFrom(PlusPhoto other) {
    if (other == null) {
      return;
    }
    if (other.thumbnail_ != null) {
      if (thumbnail_ == null) {
        thumbnail_ = new global::PlusPhoto.Types.Thumbnail();
      }
      Thumbnail.MergeFrom(other.Thumbnail);
    }
    if (other.OwnerObfuscatedId.Length != 0) {
      OwnerObfuscatedId = other.OwnerObfuscatedId;
    }
    if (other.AlbumId.Length != 0) {
      AlbumId = other.AlbumId;
    }
    if (other.PhotoId.Length != 0) {
      PhotoId = other.PhotoId;
    }
    if (other.Url.Length != 0) {
      Url = other.Url;
    }
    if (other.OriginalContentUrl.Length != 0) {
      OriginalContentUrl = other.OriginalContentUrl;
    }
    if (other.MediaType != global::PlusPhoto.Types.MediaType.MEDIA_TYPE_UNKNOWN) {
      MediaType = other.MediaType;
    }
    streamId_.Add(other.streamId_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (thumbnail_ == null) {
            thumbnail_ = new global::PlusPhoto.Types.Thumbnail();
          }
          input.ReadMessage(thumbnail_);
          break;
        }
        case 18: {
          OwnerObfuscatedId = input.ReadString();
          break;
        }
        case 26: {
          AlbumId = input.ReadString();
          break;
        }
        case 34: {
          PhotoId = input.ReadString();
          break;
        }
        case 50: {
          Url = input.ReadString();
          break;
        }
        case 82: {
          OriginalContentUrl = input.ReadString();
          break;
        }
        case 104: {
          mediaType_ = (global::PlusPhoto.Types.MediaType) input.ReadEnum();
          break;
        }
        case 114: {
          streamId_.AddEntriesFrom(input, _repeated_streamId_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the PlusPhoto message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    /// <summary>
    ///  Media type.
    /// </summary>
    public enum MediaType {
      MEDIA_TYPE_UNKNOWN = 0,
      MEDIA_TYPE_PHOTO = 1,
      MEDIA_TYPE_ANIMATED_PHOTO = 4,
    }

    /// <summary>
    ///  Metadata for displaying an image thumbnail.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Thumbnail : pb::IMessage<Thumbnail> {
      private static readonly pb::MessageParser<Thumbnail> _parser = new pb::MessageParser<Thumbnail>(() => new Thumbnail());
      public static pb::MessageParser<Thumbnail> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::PlusPhoto.Descriptor.NestedTypes[0]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public Thumbnail() {
        OnConstruction();
      }

      partial void OnConstruction();

      public Thumbnail(Thumbnail other) : this() {
        url_ = other.url_;
        imageUrl_ = other.imageUrl_;
        widthPx_ = other.widthPx_;
        heightPx_ = other.heightPx_;
      }

      public Thumbnail Clone() {
        return new Thumbnail(this);
      }

      /// <summary>Field number for the "url" field.</summary>
      public const int UrlFieldNumber = 1;
      private string url_ = "";
      /// <summary>
      ///  URL to navigate to when thumbnail is selected (a Google Plus album
      ///  page).
      /// </summary>
      public string Url {
        get { return url_; }
        set {
          url_ = pb::Preconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "image_url" field.</summary>
      public const int ImageUrlFieldNumber = 4;
      private string imageUrl_ = "";
      /// <summary>
      ///  URL of thumbnail image.
      /// </summary>
      public string ImageUrl {
        get { return imageUrl_; }
        set {
          imageUrl_ = pb::Preconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "width_px" field.</summary>
      public const int WidthPxFieldNumber = 10;
      private ulong widthPx_;
      /// <summary>
      ///  Image width in pixels.
      /// </summary>
      public ulong WidthPx {
        get { return widthPx_; }
        set {
          widthPx_ = value;
        }
      }

      /// <summary>Field number for the "height_px" field.</summary>
      public const int HeightPxFieldNumber = 11;
      private ulong heightPx_;
      /// <summary>
      ///  Image height in pixels.
      /// </summary>
      public ulong HeightPx {
        get { return heightPx_; }
        set {
          heightPx_ = value;
        }
      }

      public override bool Equals(object other) {
        return Equals(other as Thumbnail);
      }

      public bool Equals(Thumbnail other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Url != other.Url) return false;
        if (ImageUrl != other.ImageUrl) return false;
        if (WidthPx != other.WidthPx) return false;
        if (HeightPx != other.HeightPx) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (Url.Length != 0) hash ^= Url.GetHashCode();
        if (ImageUrl.Length != 0) hash ^= ImageUrl.GetHashCode();
        if (WidthPx != 0UL) hash ^= WidthPx.GetHashCode();
        if (HeightPx != 0UL) hash ^= HeightPx.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (Url.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(Url);
        }
        if (ImageUrl.Length != 0) {
          output.WriteRawTag(34);
          output.WriteString(ImageUrl);
        }
        if (WidthPx != 0UL) {
          output.WriteRawTag(80);
          output.WriteUInt64(WidthPx);
        }
        if (HeightPx != 0UL) {
          output.WriteRawTag(88);
          output.WriteUInt64(HeightPx);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (Url.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
        }
        if (ImageUrl.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageUrl);
        }
        if (WidthPx != 0UL) {
          size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WidthPx);
        }
        if (HeightPx != 0UL) {
          size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HeightPx);
        }
        return size;
      }

      public void MergeFrom(Thumbnail other) {
        if (other == null) {
          return;
        }
        if (other.Url.Length != 0) {
          Url = other.Url;
        }
        if (other.ImageUrl.Length != 0) {
          ImageUrl = other.ImageUrl;
        }
        if (other.WidthPx != 0UL) {
          WidthPx = other.WidthPx;
        }
        if (other.HeightPx != 0UL) {
          HeightPx = other.HeightPx;
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 10: {
              Url = input.ReadString();
              break;
            }
            case 34: {
              ImageUrl = input.ReadString();
              break;
            }
            case 80: {
              WidthPx = input.ReadUInt64();
              break;
            }
            case 88: {
              HeightPx = input.ReadUInt64();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

/// <summary>
///  Place that can be embedded in a chat message via Google Maps.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Place : pb::IMessage<Place> {
  private static readonly pb::MessageParser<Place> _parser = new pb::MessageParser<Place>(() => new Place());
  public static pb::MessageParser<Place> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[14]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public Place() {
    OnConstruction();
  }

  partial void OnConstruction();

  public Place(Place other) : this() {
    url_ = other.url_;
    name_ = other.name_;
    RepresentativeImage = other.representativeImage_ != null ? other.RepresentativeImage.Clone() : null;
  }

  public Place Clone() {
    return new Place(this);
  }

  /// <summary>Field number for the "url" field.</summary>
  public const int UrlFieldNumber = 1;
  private string url_ = "";
  /// <summary>
  ///  Google Maps URL pointing to the map coordinates.
  /// </summary>
  public string Url {
    get { return url_; }
    set {
      url_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  /// <summary>
  ///  Name of map location.
  /// </summary>
  public string Name {
    get { return name_; }
    set {
      name_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "representative_image" field.</summary>
  public const int RepresentativeImageFieldNumber = 185;
  private global::Place.Types.RepresentativeImage representativeImage_;
  /// <summary>
  ///  Representative image of the place (map with pin).
  /// </summary>
  public global::Place.Types.RepresentativeImage RepresentativeImage {
    get { return representativeImage_; }
    set {
      representativeImage_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as Place);
  }

  public bool Equals(Place other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Url != other.Url) return false;
    if (Name != other.Name) return false;
    if (!object.Equals(RepresentativeImage, other.RepresentativeImage)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Url.Length != 0) hash ^= Url.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (representativeImage_ != null) hash ^= RepresentativeImage.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Url.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Url);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (representativeImage_ != null) {
      output.WriteRawTag(202, 11);
      output.WriteMessage(RepresentativeImage);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Url.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (representativeImage_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(RepresentativeImage);
    }
    return size;
  }

  public void MergeFrom(Place other) {
    if (other == null) {
      return;
    }
    if (other.Url.Length != 0) {
      Url = other.Url;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.representativeImage_ != null) {
      if (representativeImage_ == null) {
        representativeImage_ = new global::Place.Types.RepresentativeImage();
      }
      RepresentativeImage.MergeFrom(other.RepresentativeImage);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Url = input.ReadString();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 1482: {
          if (representativeImage_ == null) {
            representativeImage_ = new global::Place.Types.RepresentativeImage();
          }
          input.ReadMessage(representativeImage_);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Place message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    /// <summary>
    ///  Representative image of a place.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class RepresentativeImage : pb::IMessage<RepresentativeImage> {
      private static readonly pb::MessageParser<RepresentativeImage> _parser = new pb::MessageParser<RepresentativeImage>(() => new RepresentativeImage());
      public static pb::MessageParser<RepresentativeImage> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::Place.Descriptor.NestedTypes[0]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public RepresentativeImage() {
        OnConstruction();
      }

      partial void OnConstruction();

      public RepresentativeImage(RepresentativeImage other) : this() {
        url_ = other.url_;
      }

      public RepresentativeImage Clone() {
        return new RepresentativeImage(this);
      }

      /// <summary>Field number for the "url" field.</summary>
      public const int UrlFieldNumber = 2;
      private string url_ = "";
      /// <summary>
      ///  URL of image.
      /// </summary>
      public string Url {
        get { return url_; }
        set {
          url_ = pb::Preconditions.CheckNotNull(value, "value");
        }
      }

      public override bool Equals(object other) {
        return Equals(other as RepresentativeImage);
      }

      public bool Equals(RepresentativeImage other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Url != other.Url) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (Url.Length != 0) hash ^= Url.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (Url.Length != 0) {
          output.WriteRawTag(18);
          output.WriteString(Url);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (Url.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
        }
        return size;
      }

      public void MergeFrom(RepresentativeImage other) {
        if (other == null) {
          return;
        }
        if (other.Url.Length != 0) {
          Url = other.Url;
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 18: {
              Url = input.ReadString();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

/// <summary>
///  An item of some type embedded in a chat message.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class EmbedItem : pb::IMessage<EmbedItem> {
  private static readonly pb::MessageParser<EmbedItem> _parser = new pb::MessageParser<EmbedItem>(() => new EmbedItem());
  public static pb::MessageParser<EmbedItem> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[15]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public EmbedItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  public EmbedItem(EmbedItem other) : this() {
    type_ = other.type_.Clone();
    id_ = other.id_;
    PlusPhoto = other.plusPhoto_ != null ? other.PlusPhoto.Clone() : null;
    Place = other.place_ != null ? other.Place.Clone() : null;
  }

  public EmbedItem Clone() {
    return new EmbedItem(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ItemType> _repeated_type_codec
      = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::ItemType) x);
  private readonly pbc::RepeatedField<global::ItemType> type_ = new pbc::RepeatedField<global::ItemType>();
  /// <summary>
  ///  List of embedded item types in this message.
  /// </summary>
  public pbc::RepeatedField<global::ItemType> Type {
    get { return type_; }
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 2;
  private string id_ = "";
  /// <summary>
  ///  For photos this is not given, for maps, it's the URL of the map.
  /// </summary>
  public string Id {
    get { return id_; }
    set {
      id_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "plus_photo" field.</summary>
  public const int PlusPhotoFieldNumber = 27639957;
  private global::PlusPhoto plusPhoto_;
  /// <summary>
  ///  Embedded Google Plus photo.
  /// </summary>
  public global::PlusPhoto PlusPhoto {
    get { return plusPhoto_; }
    set {
      plusPhoto_ = value;
    }
  }

  /// <summary>Field number for the "place" field.</summary>
  public const int PlaceFieldNumber = 35825640;
  private global::Place place_;
  /// <summary>
  ///  Embedded Google Map of a place.
  /// </summary>
  public global::Place Place {
    get { return place_; }
    set {
      place_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as EmbedItem);
  }

  public bool Equals(EmbedItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!type_.Equals(other.type_)) return false;
    if (Id != other.Id) return false;
    if (!object.Equals(PlusPhoto, other.PlusPhoto)) return false;
    if (!object.Equals(Place, other.Place)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= type_.GetHashCode();
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (plusPhoto_ != null) hash ^= PlusPhoto.GetHashCode();
    if (place_ != null) hash ^= Place.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    type_.WriteTo(output, _repeated_type_codec);
    if (Id.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Id);
    }
    if (plusPhoto_ != null) {
      output.WriteRawTag(170, 137, 184, 105);
      output.WriteMessage(PlusPhoto);
    }
    if (place_ != null) {
      output.WriteRawTag(194, 254, 212, 136, 1);
      output.WriteMessage(Place);
    }
  }

  public int CalculateSize() {
    int size = 0;
    size += type_.CalculateSize(_repeated_type_codec);
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (plusPhoto_ != null) {
      size += 4 + pb::CodedOutputStream.ComputeMessageSize(PlusPhoto);
    }
    if (place_ != null) {
      size += 5 + pb::CodedOutputStream.ComputeMessageSize(Place);
    }
    return size;
  }

  public void MergeFrom(EmbedItem other) {
    if (other == null) {
      return;
    }
    type_.Add(other.type_);
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.plusPhoto_ != null) {
      if (plusPhoto_ == null) {
        plusPhoto_ = new global::PlusPhoto();
      }
      PlusPhoto.MergeFrom(other.PlusPhoto);
    }
    if (other.place_ != null) {
      if (place_ == null) {
        place_ = new global::Place();
      }
      Place.MergeFrom(other.Place);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          type_.AddEntriesFrom(input, _repeated_type_codec);
          break;
        }
        case 18: {
          Id = input.ReadString();
          break;
        }
        case 221119658: {
          if (plusPhoto_ == null) {
            plusPhoto_ = new global::PlusPhoto();
          }
          input.ReadMessage(plusPhoto_);
          break;
        }
        case 286605122: {
          if (place_ == null) {
            place_ = new global::Place();
          }
          input.ReadMessage(place_);
          break;
        }
      }
    }
  }

}

/// <summary>
///  An attachment for a chat message.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Attachment : pb::IMessage<Attachment> {
  private static readonly pb::MessageParser<Attachment> _parser = new pb::MessageParser<Attachment>(() => new Attachment());
  public static pb::MessageParser<Attachment> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[16]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public Attachment() {
    OnConstruction();
  }

  partial void OnConstruction();

  public Attachment(Attachment other) : this() {
    EmbedItem = other.embedItem_ != null ? other.EmbedItem.Clone() : null;
  }

  public Attachment Clone() {
    return new Attachment(this);
  }

  /// <summary>Field number for the "embed_item" field.</summary>
  public const int EmbedItemFieldNumber = 1;
  private global::EmbedItem embedItem_;
  public global::EmbedItem EmbedItem {
    get { return embedItem_; }
    set {
      embedItem_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as Attachment);
  }

  public bool Equals(Attachment other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(EmbedItem, other.EmbedItem)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (embedItem_ != null) hash ^= EmbedItem.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (embedItem_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(EmbedItem);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (embedItem_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EmbedItem);
    }
    return size;
  }

  public void MergeFrom(Attachment other) {
    if (other == null) {
      return;
    }
    if (other.embedItem_ != null) {
      if (embedItem_ == null) {
        embedItem_ = new global::EmbedItem();
      }
      EmbedItem.MergeFrom(other.EmbedItem);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (embedItem_ == null) {
            embedItem_ = new global::EmbedItem();
          }
          input.ReadMessage(embedItem_);
          break;
        }
      }
    }
  }

}

/// <summary>
///  Chat message content.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MessageContent : pb::IMessage<MessageContent> {
  private static readonly pb::MessageParser<MessageContent> _parser = new pb::MessageParser<MessageContent>(() => new MessageContent());
  public static pb::MessageParser<MessageContent> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[17]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public MessageContent() {
    OnConstruction();
  }

  partial void OnConstruction();

  public MessageContent(MessageContent other) : this() {
    segment_ = other.segment_.Clone();
    attachment_ = other.attachment_.Clone();
  }

  public MessageContent Clone() {
    return new MessageContent(this);
  }

  /// <summary>Field number for the "segment" field.</summary>
  public const int SegmentFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Segment> _repeated_segment_codec
      = pb::FieldCodec.ForMessage(10, global::Segment.Parser);
  private readonly pbc::RepeatedField<global::Segment> segment_ = new pbc::RepeatedField<global::Segment>();
  public pbc::RepeatedField<global::Segment> Segment {
    get { return segment_; }
  }

  /// <summary>Field number for the "attachment" field.</summary>
  public const int AttachmentFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Attachment> _repeated_attachment_codec
      = pb::FieldCodec.ForMessage(18, global::Attachment.Parser);
  private readonly pbc::RepeatedField<global::Attachment> attachment_ = new pbc::RepeatedField<global::Attachment>();
  public pbc::RepeatedField<global::Attachment> Attachment {
    get { return attachment_; }
  }

  public override bool Equals(object other) {
    return Equals(other as MessageContent);
  }

  public bool Equals(MessageContent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!segment_.Equals(other.segment_)) return false;
    if(!attachment_.Equals(other.attachment_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= segment_.GetHashCode();
    hash ^= attachment_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    segment_.WriteTo(output, _repeated_segment_codec);
    attachment_.WriteTo(output, _repeated_attachment_codec);
  }

  public int CalculateSize() {
    int size = 0;
    size += segment_.CalculateSize(_repeated_segment_codec);
    size += attachment_.CalculateSize(_repeated_attachment_codec);
    return size;
  }

  public void MergeFrom(MessageContent other) {
    if (other == null) {
      return;
    }
    segment_.Add(other.segment_);
    attachment_.Add(other.attachment_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          segment_.AddEntriesFrom(input, _repeated_segment_codec);
          break;
        }
        case 18: {
          attachment_.AddEntriesFrom(input, _repeated_attachment_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///  Annotation that can be applied to a chat message event. The only known use
///  for this is "\me" actions supported by the Chrome client (type 4).
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class EventAnnotation : pb::IMessage<EventAnnotation> {
  private static readonly pb::MessageParser<EventAnnotation> _parser = new pb::MessageParser<EventAnnotation>(() => new EventAnnotation());
  public static pb::MessageParser<EventAnnotation> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[18]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public EventAnnotation() {
    OnConstruction();
  }

  partial void OnConstruction();

  public EventAnnotation(EventAnnotation other) : this() {
    type_ = other.type_;
    value_ = other.value_;
  }

  public EventAnnotation Clone() {
    return new EventAnnotation(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  ///  Annotation type.
  /// </summary>
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private string value_ = "";
  /// <summary>
  ///   annotation string value.
  /// </summary>
  public string Value {
    get { return value_; }
    set {
      value_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as EventAnnotation);
  }

  public bool Equals(EventAnnotation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Value != other.Value) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Value.Length != 0) hash ^= Value.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
    if (Value.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Value);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (Value.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
    }
    return size;
  }

  public void MergeFrom(EventAnnotation other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Value.Length != 0) {
      Value = other.Value;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
        case 18: {
          Value = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///  A chat message in a conversation.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ChatMessage : pb::IMessage<ChatMessage> {
  private static readonly pb::MessageParser<ChatMessage> _parser = new pb::MessageParser<ChatMessage>(() => new ChatMessage());
  public static pb::MessageParser<ChatMessage> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[19]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public ChatMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  public ChatMessage(ChatMessage other) : this() {
    annotation_ = other.annotation_.Clone();
    MessageContent = other.messageContent_ != null ? other.MessageContent.Clone() : null;
  }

  public ChatMessage Clone() {
    return new ChatMessage(this);
  }

  /// <summary>Field number for the "annotation" field.</summary>
  public const int AnnotationFieldNumber = 2;
  private static readonly pb::FieldCodec<global::EventAnnotation> _repeated_annotation_codec
      = pb::FieldCodec.ForMessage(18, global::EventAnnotation.Parser);
  private readonly pbc::RepeatedField<global::EventAnnotation> annotation_ = new pbc::RepeatedField<global::EventAnnotation>();
  /// <summary>
  ///   annotation to attach to message.
  /// </summary>
  public pbc::RepeatedField<global::EventAnnotation> Annotation {
    get { return annotation_; }
  }

  /// <summary>Field number for the "message_content" field.</summary>
  public const int MessageContentFieldNumber = 3;
  private global::MessageContent messageContent_;
  /// <summary>
  ///  The message's content.
  /// </summary>
  public global::MessageContent MessageContent {
    get { return messageContent_; }
    set {
      messageContent_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as ChatMessage);
  }

  public bool Equals(ChatMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!annotation_.Equals(other.annotation_)) return false;
    if (!object.Equals(MessageContent, other.MessageContent)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= annotation_.GetHashCode();
    if (messageContent_ != null) hash ^= MessageContent.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    annotation_.WriteTo(output, _repeated_annotation_codec);
    if (messageContent_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(MessageContent);
    }
  }

  public int CalculateSize() {
    int size = 0;
    size += annotation_.CalculateSize(_repeated_annotation_codec);
    if (messageContent_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageContent);
    }
    return size;
  }

  public void MergeFrom(ChatMessage other) {
    if (other == null) {
      return;
    }
    annotation_.Add(other.annotation_);
    if (other.messageContent_ != null) {
      if (messageContent_ == null) {
        messageContent_ = new global::MessageContent();
      }
      MessageContent.MergeFrom(other.MessageContent);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 18: {
          annotation_.AddEntriesFrom(input, _repeated_annotation_codec);
          break;
        }
        case 26: {
          if (messageContent_ == null) {
            messageContent_ = new global::MessageContent();
          }
          input.ReadMessage(messageContent_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MembershipChange : pb::IMessage<MembershipChange> {
  private static readonly pb::MessageParser<MembershipChange> _parser = new pb::MessageParser<MembershipChange>(() => new MembershipChange());
  public static pb::MessageParser<MembershipChange> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[20]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public MembershipChange() {
    OnConstruction();
  }

  partial void OnConstruction();

  public MembershipChange(MembershipChange other) : this() {
    type_ = other.type_;
    participantIds_ = other.participantIds_.Clone();
  }

  public MembershipChange Clone() {
    return new MembershipChange(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::MembershipChangeType type_ = global::MembershipChangeType.MEMBERSHIP_CHANGE_TYPE_RESERVED;
  public global::MembershipChangeType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "participant_ids" field.</summary>
  public const int ParticipantIdsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ParticipantId> _repeated_participantIds_codec
      = pb::FieldCodec.ForMessage(26, global::ParticipantId.Parser);
  private readonly pbc::RepeatedField<global::ParticipantId> participantIds_ = new pbc::RepeatedField<global::ParticipantId>();
  public pbc::RepeatedField<global::ParticipantId> ParticipantIds {
    get { return participantIds_; }
  }

  public override bool Equals(object other) {
    return Equals(other as MembershipChange);
  }

  public bool Equals(MembershipChange other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if(!participantIds_.Equals(other.participantIds_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Type != global::MembershipChangeType.MEMBERSHIP_CHANGE_TYPE_RESERVED) hash ^= Type.GetHashCode();
    hash ^= participantIds_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != global::MembershipChangeType.MEMBERSHIP_CHANGE_TYPE_RESERVED) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    participantIds_.WriteTo(output, _repeated_participantIds_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (Type != global::MembershipChangeType.MEMBERSHIP_CHANGE_TYPE_RESERVED) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    size += participantIds_.CalculateSize(_repeated_participantIds_codec);
    return size;
  }

  public void MergeFrom(MembershipChange other) {
    if (other == null) {
      return;
    }
    if (other.Type != global::MembershipChangeType.MEMBERSHIP_CHANGE_TYPE_RESERVED) {
      Type = other.Type;
    }
    participantIds_.Add(other.participantIds_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          type_ = (global::MembershipChangeType) input.ReadEnum();
          break;
        }
        case 26: {
          participantIds_.AddEntriesFrom(input, _repeated_participantIds_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ConversationRename : pb::IMessage<ConversationRename> {
  private static readonly pb::MessageParser<ConversationRename> _parser = new pb::MessageParser<ConversationRename>(() => new ConversationRename());
  public static pb::MessageParser<ConversationRename> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[21]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public ConversationRename() {
    OnConstruction();
  }

  partial void OnConstruction();

  public ConversationRename(ConversationRename other) : this() {
    newName_ = other.newName_;
    oldName_ = other.oldName_;
  }

  public ConversationRename Clone() {
    return new ConversationRename(this);
  }

  /// <summary>Field number for the "new_name" field.</summary>
  public const int NewNameFieldNumber = 1;
  private string newName_ = "";
  public string NewName {
    get { return newName_; }
    set {
      newName_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "old_name" field.</summary>
  public const int OldNameFieldNumber = 2;
  private string oldName_ = "";
  public string OldName {
    get { return oldName_; }
    set {
      oldName_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as ConversationRename);
  }

  public bool Equals(ConversationRename other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NewName != other.NewName) return false;
    if (OldName != other.OldName) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (NewName.Length != 0) hash ^= NewName.GetHashCode();
    if (OldName.Length != 0) hash ^= OldName.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (NewName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(NewName);
    }
    if (OldName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(OldName);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (NewName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NewName);
    }
    if (OldName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OldName);
    }
    return size;
  }

  public void MergeFrom(ConversationRename other) {
    if (other == null) {
      return;
    }
    if (other.NewName.Length != 0) {
      NewName = other.NewName;
    }
    if (other.OldName.Length != 0) {
      OldName = other.OldName;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          NewName = input.ReadString();
          break;
        }
        case 18: {
          OldName = input.ReadString();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class HangoutEvent : pb::IMessage<HangoutEvent> {
  private static readonly pb::MessageParser<HangoutEvent> _parser = new pb::MessageParser<HangoutEvent>(() => new HangoutEvent());
  public static pb::MessageParser<HangoutEvent> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[22]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public HangoutEvent() {
    OnConstruction();
  }

  partial void OnConstruction();

  public HangoutEvent(HangoutEvent other) : this() {
    eventType_ = other.eventType_;
    participantId_ = other.participantId_.Clone();
  }

  public HangoutEvent Clone() {
    return new HangoutEvent(this);
  }

  /// <summary>Field number for the "event_type" field.</summary>
  public const int EventTypeFieldNumber = 1;
  private global::HangoutEventType eventType_ = global::HangoutEventType.HANGOUT_EVENT_TYPE_UNKNOWN;
  public global::HangoutEventType EventType {
    get { return eventType_; }
    set {
      eventType_ = value;
    }
  }

  /// <summary>Field number for the "participant_id" field.</summary>
  public const int ParticipantIdFieldNumber = 2;
  private static readonly pb::FieldCodec<global::ParticipantId> _repeated_participantId_codec
      = pb::FieldCodec.ForMessage(18, global::ParticipantId.Parser);
  private readonly pbc::RepeatedField<global::ParticipantId> participantId_ = new pbc::RepeatedField<global::ParticipantId>();
  public pbc::RepeatedField<global::ParticipantId> ParticipantId {
    get { return participantId_; }
  }

  public override bool Equals(object other) {
    return Equals(other as HangoutEvent);
  }

  public bool Equals(HangoutEvent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EventType != other.EventType) return false;
    if(!participantId_.Equals(other.participantId_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (EventType != global::HangoutEventType.HANGOUT_EVENT_TYPE_UNKNOWN) hash ^= EventType.GetHashCode();
    hash ^= participantId_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (EventType != global::HangoutEventType.HANGOUT_EVENT_TYPE_UNKNOWN) {
      output.WriteRawTag(8);
      output.WriteEnum((int) EventType);
    }
    participantId_.WriteTo(output, _repeated_participantId_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (EventType != global::HangoutEventType.HANGOUT_EVENT_TYPE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
    }
    size += participantId_.CalculateSize(_repeated_participantId_codec);
    return size;
  }

  public void MergeFrom(HangoutEvent other) {
    if (other == null) {
      return;
    }
    if (other.EventType != global::HangoutEventType.HANGOUT_EVENT_TYPE_UNKNOWN) {
      EventType = other.EventType;
    }
    participantId_.Add(other.participantId_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          eventType_ = (global::HangoutEventType) input.ReadEnum();
          break;
        }
        case 18: {
          participantId_.AddEntriesFrom(input, _repeated_participantId_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class OTRModification : pb::IMessage<OTRModification> {
  private static readonly pb::MessageParser<OTRModification> _parser = new pb::MessageParser<OTRModification>(() => new OTRModification());
  public static pb::MessageParser<OTRModification> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[23]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public OTRModification() {
    OnConstruction();
  }

  partial void OnConstruction();

  public OTRModification(OTRModification other) : this() {
    oldOtrStatus_ = other.oldOtrStatus_;
    newOtrStatus_ = other.newOtrStatus_;
    oldOtrToggle_ = other.oldOtrToggle_;
    newOtrToggle_ = other.newOtrToggle_;
  }

  public OTRModification Clone() {
    return new OTRModification(this);
  }

  /// <summary>Field number for the "old_otr_status" field.</summary>
  public const int OldOtrStatusFieldNumber = 1;
  private global::OffTheRecordStatus oldOtrStatus_ = global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN;
  public global::OffTheRecordStatus OldOtrStatus {
    get { return oldOtrStatus_; }
    set {
      oldOtrStatus_ = value;
    }
  }

  /// <summary>Field number for the "new_otr_status" field.</summary>
  public const int NewOtrStatusFieldNumber = 2;
  private global::OffTheRecordStatus newOtrStatus_ = global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN;
  public global::OffTheRecordStatus NewOtrStatus {
    get { return newOtrStatus_; }
    set {
      newOtrStatus_ = value;
    }
  }

  /// <summary>Field number for the "old_otr_toggle" field.</summary>
  public const int OldOtrToggleFieldNumber = 3;
  private global::OffTheRecordToggle oldOtrToggle_ = global::OffTheRecordToggle.OFF_THE_RECORD_TOGGLE_UNKNOWN;
  public global::OffTheRecordToggle OldOtrToggle {
    get { return oldOtrToggle_; }
    set {
      oldOtrToggle_ = value;
    }
  }

  /// <summary>Field number for the "new_otr_toggle" field.</summary>
  public const int NewOtrToggleFieldNumber = 4;
  private global::OffTheRecordToggle newOtrToggle_ = global::OffTheRecordToggle.OFF_THE_RECORD_TOGGLE_UNKNOWN;
  public global::OffTheRecordToggle NewOtrToggle {
    get { return newOtrToggle_; }
    set {
      newOtrToggle_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as OTRModification);
  }

  public bool Equals(OTRModification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OldOtrStatus != other.OldOtrStatus) return false;
    if (NewOtrStatus != other.NewOtrStatus) return false;
    if (OldOtrToggle != other.OldOtrToggle) return false;
    if (NewOtrToggle != other.NewOtrToggle) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (OldOtrStatus != global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN) hash ^= OldOtrStatus.GetHashCode();
    if (NewOtrStatus != global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN) hash ^= NewOtrStatus.GetHashCode();
    if (OldOtrToggle != global::OffTheRecordToggle.OFF_THE_RECORD_TOGGLE_UNKNOWN) hash ^= OldOtrToggle.GetHashCode();
    if (NewOtrToggle != global::OffTheRecordToggle.OFF_THE_RECORD_TOGGLE_UNKNOWN) hash ^= NewOtrToggle.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (OldOtrStatus != global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN) {
      output.WriteRawTag(8);
      output.WriteEnum((int) OldOtrStatus);
    }
    if (NewOtrStatus != global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN) {
      output.WriteRawTag(16);
      output.WriteEnum((int) NewOtrStatus);
    }
    if (OldOtrToggle != global::OffTheRecordToggle.OFF_THE_RECORD_TOGGLE_UNKNOWN) {
      output.WriteRawTag(24);
      output.WriteEnum((int) OldOtrToggle);
    }
    if (NewOtrToggle != global::OffTheRecordToggle.OFF_THE_RECORD_TOGGLE_UNKNOWN) {
      output.WriteRawTag(32);
      output.WriteEnum((int) NewOtrToggle);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (OldOtrStatus != global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OldOtrStatus);
    }
    if (NewOtrStatus != global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NewOtrStatus);
    }
    if (OldOtrToggle != global::OffTheRecordToggle.OFF_THE_RECORD_TOGGLE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OldOtrToggle);
    }
    if (NewOtrToggle != global::OffTheRecordToggle.OFF_THE_RECORD_TOGGLE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NewOtrToggle);
    }
    return size;
  }

  public void MergeFrom(OTRModification other) {
    if (other == null) {
      return;
    }
    if (other.OldOtrStatus != global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN) {
      OldOtrStatus = other.OldOtrStatus;
    }
    if (other.NewOtrStatus != global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN) {
      NewOtrStatus = other.NewOtrStatus;
    }
    if (other.OldOtrToggle != global::OffTheRecordToggle.OFF_THE_RECORD_TOGGLE_UNKNOWN) {
      OldOtrToggle = other.OldOtrToggle;
    }
    if (other.NewOtrToggle != global::OffTheRecordToggle.OFF_THE_RECORD_TOGGLE_UNKNOWN) {
      NewOtrToggle = other.NewOtrToggle;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          oldOtrStatus_ = (global::OffTheRecordStatus) input.ReadEnum();
          break;
        }
        case 16: {
          newOtrStatus_ = (global::OffTheRecordStatus) input.ReadEnum();
          break;
        }
        case 24: {
          oldOtrToggle_ = (global::OffTheRecordToggle) input.ReadEnum();
          break;
        }
        case 32: {
          newOtrToggle_ = (global::OffTheRecordToggle) input.ReadEnum();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class HashModifier : pb::IMessage<HashModifier> {
  private static readonly pb::MessageParser<HashModifier> _parser = new pb::MessageParser<HashModifier>(() => new HashModifier());
  public static pb::MessageParser<HashModifier> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[24]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public HashModifier() {
    OnConstruction();
  }

  partial void OnConstruction();

  public HashModifier(HashModifier other) : this() {
    updateId_ = other.updateId_;
    hashDiff_ = other.hashDiff_;
    version_ = other.version_;
  }

  public HashModifier Clone() {
    return new HashModifier(this);
  }

  /// <summary>Field number for the "update_id" field.</summary>
  public const int UpdateIdFieldNumber = 1;
  private string updateId_ = "";
  public string UpdateId {
    get { return updateId_; }
    set {
      updateId_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "hash_diff" field.</summary>
  public const int HashDiffFieldNumber = 2;
  private ulong hashDiff_;
  public ulong HashDiff {
    get { return hashDiff_; }
    set {
      hashDiff_ = value;
    }
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 4;
  private ulong version_;
  public ulong Version {
    get { return version_; }
    set {
      version_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as HashModifier);
  }

  public bool Equals(HashModifier other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UpdateId != other.UpdateId) return false;
    if (HashDiff != other.HashDiff) return false;
    if (Version != other.Version) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (UpdateId.Length != 0) hash ^= UpdateId.GetHashCode();
    if (HashDiff != 0UL) hash ^= HashDiff.GetHashCode();
    if (Version != 0UL) hash ^= Version.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (UpdateId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(UpdateId);
    }
    if (HashDiff != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(HashDiff);
    }
    if (Version != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(Version);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (UpdateId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdateId);
    }
    if (HashDiff != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HashDiff);
    }
    if (Version != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Version);
    }
    return size;
  }

  public void MergeFrom(HashModifier other) {
    if (other == null) {
      return;
    }
    if (other.UpdateId.Length != 0) {
      UpdateId = other.UpdateId;
    }
    if (other.HashDiff != 0UL) {
      HashDiff = other.HashDiff;
    }
    if (other.Version != 0UL) {
      Version = other.Version;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          UpdateId = input.ReadString();
          break;
        }
        case 16: {
          HashDiff = input.ReadUInt64();
          break;
        }
        case 32: {
          Version = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///  Event that becomes part of a conversation's history.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Event : pb::IMessage<Event> {
  private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
  public static pb::MessageParser<Event> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[25]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public Event() {
    OnConstruction();
  }

  partial void OnConstruction();

  public Event(Event other) : this() {
    ConversationId = other.conversationId_ != null ? other.ConversationId.Clone() : null;
    SenderId = other.senderId_ != null ? other.SenderId.Clone() : null;
    timestamp_ = other.timestamp_;
    SelfEventState = other.selfEventState_ != null ? other.SelfEventState.Clone() : null;
    sourceType_ = other.sourceType_;
    ChatMessage = other.chatMessage_ != null ? other.ChatMessage.Clone() : null;
    MembershipChange = other.membershipChange_ != null ? other.MembershipChange.Clone() : null;
    ConversationRename = other.conversationRename_ != null ? other.ConversationRename.Clone() : null;
    HangoutEvent = other.hangoutEvent_ != null ? other.HangoutEvent.Clone() : null;
    eventId_ = other.eventId_;
    expirationTimestamp_ = other.expirationTimestamp_;
    OtrModification = other.otrModification_ != null ? other.OtrModification.Clone() : null;
    advancesSortTimestamp_ = other.advancesSortTimestamp_;
    otrStatus_ = other.otrStatus_;
    persisted_ = other.persisted_;
    MediumType = other.mediumType_ != null ? other.MediumType.Clone() : null;
    eventType_ = other.eventType_;
    eventVersion_ = other.eventVersion_;
    HashModifier = other.hashModifier_ != null ? other.HashModifier.Clone() : null;
  }

  public Event Clone() {
    return new Event(this);
  }

  /// <summary>Field number for the "conversation_id" field.</summary>
  public const int ConversationIdFieldNumber = 1;
  private global::ConversationId conversationId_;
  /// <summary>
  ///  ID of the conversation this event belongs to.
  /// </summary>
  public global::ConversationId ConversationId {
    get { return conversationId_; }
    set {
      conversationId_ = value;
    }
  }

  /// <summary>Field number for the "sender_id" field.</summary>
  public const int SenderIdFieldNumber = 2;
  private global::ParticipantId senderId_;
  /// <summary>
  ///  ID of the user that sent this event.
  /// </summary>
  public global::ParticipantId SenderId {
    get { return senderId_; }
    set {
      senderId_ = value;
    }
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 3;
  private ulong timestamp_;
  /// <summary>
  ///  Timestamp when the event occurred.
  /// </summary>
  public ulong Timestamp {
    get { return timestamp_; }
    set {
      timestamp_ = value;
    }
  }

  /// <summary>Field number for the "self_event_state" field.</summary>
  public const int SelfEventStateFieldNumber = 4;
  private global::UserEventState selfEventState_;
  public global::UserEventState SelfEventState {
    get { return selfEventState_; }
    set {
      selfEventState_ = value;
    }
  }

  /// <summary>Field number for the "source_type" field.</summary>
  public const int SourceTypeFieldNumber = 6;
  private global::SourceType sourceType_ = global::SourceType.SOURCE_TYPE_UNKNOWN;
  public global::SourceType SourceType {
    get { return sourceType_; }
    set {
      sourceType_ = value;
    }
  }

  /// <summary>Field number for the "chat_message" field.</summary>
  public const int ChatMessageFieldNumber = 7;
  private global::ChatMessage chatMessage_;
  public global::ChatMessage ChatMessage {
    get { return chatMessage_; }
    set {
      chatMessage_ = value;
    }
  }

  /// <summary>Field number for the "membership_change" field.</summary>
  public const int MembershipChangeFieldNumber = 9;
  private global::MembershipChange membershipChange_;
  public global::MembershipChange MembershipChange {
    get { return membershipChange_; }
    set {
      membershipChange_ = value;
    }
  }

  /// <summary>Field number for the "conversation_rename" field.</summary>
  public const int ConversationRenameFieldNumber = 10;
  private global::ConversationRename conversationRename_;
  public global::ConversationRename ConversationRename {
    get { return conversationRename_; }
    set {
      conversationRename_ = value;
    }
  }

  /// <summary>Field number for the "hangout_event" field.</summary>
  public const int HangoutEventFieldNumber = 11;
  private global::HangoutEvent hangoutEvent_;
  public global::HangoutEvent HangoutEvent {
    get { return hangoutEvent_; }
    set {
      hangoutEvent_ = value;
    }
  }

  /// <summary>Field number for the "event_id" field.</summary>
  public const int EventIdFieldNumber = 12;
  private string eventId_ = "";
  /// <summary>
  ///  Unique ID for the event.
  /// </summary>
  public string EventId {
    get { return eventId_; }
    set {
      eventId_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "expiration_timestamp" field.</summary>
  public const int ExpirationTimestampFieldNumber = 13;
  private ulong expirationTimestamp_;
  public ulong ExpirationTimestamp {
    get { return expirationTimestamp_; }
    set {
      expirationTimestamp_ = value;
    }
  }

  /// <summary>Field number for the "otr_modification" field.</summary>
  public const int OtrModificationFieldNumber = 14;
  private global::OTRModification otrModification_;
  public global::OTRModification OtrModification {
    get { return otrModification_; }
    set {
      otrModification_ = value;
    }
  }

  /// <summary>Field number for the "advances_sort_timestamp" field.</summary>
  public const int AdvancesSortTimestampFieldNumber = 15;
  private bool advancesSortTimestamp_;
  public bool AdvancesSortTimestamp {
    get { return advancesSortTimestamp_; }
    set {
      advancesSortTimestamp_ = value;
    }
  }

  /// <summary>Field number for the "otr_status" field.</summary>
  public const int OtrStatusFieldNumber = 16;
  private global::OffTheRecordStatus otrStatus_ = global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN;
  public global::OffTheRecordStatus OtrStatus {
    get { return otrStatus_; }
    set {
      otrStatus_ = value;
    }
  }

  /// <summary>Field number for the "persisted" field.</summary>
  public const int PersistedFieldNumber = 17;
  private bool persisted_;
  public bool Persisted {
    get { return persisted_; }
    set {
      persisted_ = value;
    }
  }

  /// <summary>Field number for the "medium_type" field.</summary>
  public const int MediumTypeFieldNumber = 20;
  private global::DeliveryMedium mediumType_;
  public global::DeliveryMedium MediumType {
    get { return mediumType_; }
    set {
      mediumType_ = value;
    }
  }

  /// <summary>Field number for the "event_type" field.</summary>
  public const int EventTypeFieldNumber = 23;
  private global::EventType eventType_ = global::EventType.EVENT_TYPE_UNKNOWN;
  /// <summary>
  ///  The event's type.
  /// </summary>
  public global::EventType EventType {
    get { return eventType_; }
    set {
      eventType_ = value;
    }
  }

  /// <summary>Field number for the "event_version" field.</summary>
  public const int EventVersionFieldNumber = 24;
  private ulong eventVersion_;
  /// <summary>
  ///  Event version timestamp.
  /// </summary>
  public ulong EventVersion {
    get { return eventVersion_; }
    set {
      eventVersion_ = value;
    }
  }

  /// <summary>Field number for the "hash_modifier" field.</summary>
  public const int HashModifierFieldNumber = 26;
  private global::HashModifier hashModifier_;
  public global::HashModifier HashModifier {
    get { return hashModifier_; }
    set {
      hashModifier_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as Event);
  }

  public bool Equals(Event other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ConversationId, other.ConversationId)) return false;
    if (!object.Equals(SenderId, other.SenderId)) return false;
    if (Timestamp != other.Timestamp) return false;
    if (!object.Equals(SelfEventState, other.SelfEventState)) return false;
    if (SourceType != other.SourceType) return false;
    if (!object.Equals(ChatMessage, other.ChatMessage)) return false;
    if (!object.Equals(MembershipChange, other.MembershipChange)) return false;
    if (!object.Equals(ConversationRename, other.ConversationRename)) return false;
    if (!object.Equals(HangoutEvent, other.HangoutEvent)) return false;
    if (EventId != other.EventId) return false;
    if (ExpirationTimestamp != other.ExpirationTimestamp) return false;
    if (!object.Equals(OtrModification, other.OtrModification)) return false;
    if (AdvancesSortTimestamp != other.AdvancesSortTimestamp) return false;
    if (OtrStatus != other.OtrStatus) return false;
    if (Persisted != other.Persisted) return false;
    if (!object.Equals(MediumType, other.MediumType)) return false;
    if (EventType != other.EventType) return false;
    if (EventVersion != other.EventVersion) return false;
    if (!object.Equals(HashModifier, other.HashModifier)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (conversationId_ != null) hash ^= ConversationId.GetHashCode();
    if (senderId_ != null) hash ^= SenderId.GetHashCode();
    if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
    if (selfEventState_ != null) hash ^= SelfEventState.GetHashCode();
    if (SourceType != global::SourceType.SOURCE_TYPE_UNKNOWN) hash ^= SourceType.GetHashCode();
    if (chatMessage_ != null) hash ^= ChatMessage.GetHashCode();
    if (membershipChange_ != null) hash ^= MembershipChange.GetHashCode();
    if (conversationRename_ != null) hash ^= ConversationRename.GetHashCode();
    if (hangoutEvent_ != null) hash ^= HangoutEvent.GetHashCode();
    if (EventId.Length != 0) hash ^= EventId.GetHashCode();
    if (ExpirationTimestamp != 0UL) hash ^= ExpirationTimestamp.GetHashCode();
    if (otrModification_ != null) hash ^= OtrModification.GetHashCode();
    if (AdvancesSortTimestamp != false) hash ^= AdvancesSortTimestamp.GetHashCode();
    if (OtrStatus != global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN) hash ^= OtrStatus.GetHashCode();
    if (Persisted != false) hash ^= Persisted.GetHashCode();
    if (mediumType_ != null) hash ^= MediumType.GetHashCode();
    if (EventType != global::EventType.EVENT_TYPE_UNKNOWN) hash ^= EventType.GetHashCode();
    if (EventVersion != 0UL) hash ^= EventVersion.GetHashCode();
    if (hashModifier_ != null) hash ^= HashModifier.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (conversationId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ConversationId);
    }
    if (senderId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(SenderId);
    }
    if (Timestamp != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(Timestamp);
    }
    if (selfEventState_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(SelfEventState);
    }
    if (SourceType != global::SourceType.SOURCE_TYPE_UNKNOWN) {
      output.WriteRawTag(48);
      output.WriteEnum((int) SourceType);
    }
    if (chatMessage_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(ChatMessage);
    }
    if (membershipChange_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(MembershipChange);
    }
    if (conversationRename_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(ConversationRename);
    }
    if (hangoutEvent_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(HangoutEvent);
    }
    if (EventId.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(EventId);
    }
    if (ExpirationTimestamp != 0UL) {
      output.WriteRawTag(104);
      output.WriteUInt64(ExpirationTimestamp);
    }
    if (otrModification_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(OtrModification);
    }
    if (AdvancesSortTimestamp != false) {
      output.WriteRawTag(120);
      output.WriteBool(AdvancesSortTimestamp);
    }
    if (OtrStatus != global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN) {
      output.WriteRawTag(128, 1);
      output.WriteEnum((int) OtrStatus);
    }
    if (Persisted != false) {
      output.WriteRawTag(136, 1);
      output.WriteBool(Persisted);
    }
    if (mediumType_ != null) {
      output.WriteRawTag(162, 1);
      output.WriteMessage(MediumType);
    }
    if (EventType != global::EventType.EVENT_TYPE_UNKNOWN) {
      output.WriteRawTag(184, 1);
      output.WriteEnum((int) EventType);
    }
    if (EventVersion != 0UL) {
      output.WriteRawTag(192, 1);
      output.WriteUInt64(EventVersion);
    }
    if (hashModifier_ != null) {
      output.WriteRawTag(210, 1);
      output.WriteMessage(HashModifier);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (conversationId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationId);
    }
    if (senderId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SenderId);
    }
    if (Timestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
    }
    if (selfEventState_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfEventState);
    }
    if (SourceType != global::SourceType.SOURCE_TYPE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SourceType);
    }
    if (chatMessage_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChatMessage);
    }
    if (membershipChange_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MembershipChange);
    }
    if (conversationRename_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationRename);
    }
    if (hangoutEvent_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(HangoutEvent);
    }
    if (EventId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
    }
    if (ExpirationTimestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ExpirationTimestamp);
    }
    if (otrModification_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtrModification);
    }
    if (AdvancesSortTimestamp != false) {
      size += 1 + 1;
    }
    if (OtrStatus != global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) OtrStatus);
    }
    if (Persisted != false) {
      size += 2 + 1;
    }
    if (mediumType_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(MediumType);
    }
    if (EventType != global::EventType.EVENT_TYPE_UNKNOWN) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
    }
    if (EventVersion != 0UL) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(EventVersion);
    }
    if (hashModifier_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(HashModifier);
    }
    return size;
  }

  public void MergeFrom(Event other) {
    if (other == null) {
      return;
    }
    if (other.conversationId_ != null) {
      if (conversationId_ == null) {
        conversationId_ = new global::ConversationId();
      }
      ConversationId.MergeFrom(other.ConversationId);
    }
    if (other.senderId_ != null) {
      if (senderId_ == null) {
        senderId_ = new global::ParticipantId();
      }
      SenderId.MergeFrom(other.SenderId);
    }
    if (other.Timestamp != 0UL) {
      Timestamp = other.Timestamp;
    }
    if (other.selfEventState_ != null) {
      if (selfEventState_ == null) {
        selfEventState_ = new global::UserEventState();
      }
      SelfEventState.MergeFrom(other.SelfEventState);
    }
    if (other.SourceType != global::SourceType.SOURCE_TYPE_UNKNOWN) {
      SourceType = other.SourceType;
    }
    if (other.chatMessage_ != null) {
      if (chatMessage_ == null) {
        chatMessage_ = new global::ChatMessage();
      }
      ChatMessage.MergeFrom(other.ChatMessage);
    }
    if (other.membershipChange_ != null) {
      if (membershipChange_ == null) {
        membershipChange_ = new global::MembershipChange();
      }
      MembershipChange.MergeFrom(other.MembershipChange);
    }
    if (other.conversationRename_ != null) {
      if (conversationRename_ == null) {
        conversationRename_ = new global::ConversationRename();
      }
      ConversationRename.MergeFrom(other.ConversationRename);
    }
    if (other.hangoutEvent_ != null) {
      if (hangoutEvent_ == null) {
        hangoutEvent_ = new global::HangoutEvent();
      }
      HangoutEvent.MergeFrom(other.HangoutEvent);
    }
    if (other.EventId.Length != 0) {
      EventId = other.EventId;
    }
    if (other.ExpirationTimestamp != 0UL) {
      ExpirationTimestamp = other.ExpirationTimestamp;
    }
    if (other.otrModification_ != null) {
      if (otrModification_ == null) {
        otrModification_ = new global::OTRModification();
      }
      OtrModification.MergeFrom(other.OtrModification);
    }
    if (other.AdvancesSortTimestamp != false) {
      AdvancesSortTimestamp = other.AdvancesSortTimestamp;
    }
    if (other.OtrStatus != global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN) {
      OtrStatus = other.OtrStatus;
    }
    if (other.Persisted != false) {
      Persisted = other.Persisted;
    }
    if (other.mediumType_ != null) {
      if (mediumType_ == null) {
        mediumType_ = new global::DeliveryMedium();
      }
      MediumType.MergeFrom(other.MediumType);
    }
    if (other.EventType != global::EventType.EVENT_TYPE_UNKNOWN) {
      EventType = other.EventType;
    }
    if (other.EventVersion != 0UL) {
      EventVersion = other.EventVersion;
    }
    if (other.hashModifier_ != null) {
      if (hashModifier_ == null) {
        hashModifier_ = new global::HashModifier();
      }
      HashModifier.MergeFrom(other.HashModifier);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (conversationId_ == null) {
            conversationId_ = new global::ConversationId();
          }
          input.ReadMessage(conversationId_);
          break;
        }
        case 18: {
          if (senderId_ == null) {
            senderId_ = new global::ParticipantId();
          }
          input.ReadMessage(senderId_);
          break;
        }
        case 24: {
          Timestamp = input.ReadUInt64();
          break;
        }
        case 34: {
          if (selfEventState_ == null) {
            selfEventState_ = new global::UserEventState();
          }
          input.ReadMessage(selfEventState_);
          break;
        }
        case 48: {
          sourceType_ = (global::SourceType) input.ReadEnum();
          break;
        }
        case 58: {
          if (chatMessage_ == null) {
            chatMessage_ = new global::ChatMessage();
          }
          input.ReadMessage(chatMessage_);
          break;
        }
        case 74: {
          if (membershipChange_ == null) {
            membershipChange_ = new global::MembershipChange();
          }
          input.ReadMessage(membershipChange_);
          break;
        }
        case 82: {
          if (conversationRename_ == null) {
            conversationRename_ = new global::ConversationRename();
          }
          input.ReadMessage(conversationRename_);
          break;
        }
        case 90: {
          if (hangoutEvent_ == null) {
            hangoutEvent_ = new global::HangoutEvent();
          }
          input.ReadMessage(hangoutEvent_);
          break;
        }
        case 98: {
          EventId = input.ReadString();
          break;
        }
        case 104: {
          ExpirationTimestamp = input.ReadUInt64();
          break;
        }
        case 114: {
          if (otrModification_ == null) {
            otrModification_ = new global::OTRModification();
          }
          input.ReadMessage(otrModification_);
          break;
        }
        case 120: {
          AdvancesSortTimestamp = input.ReadBool();
          break;
        }
        case 128: {
          otrStatus_ = (global::OffTheRecordStatus) input.ReadEnum();
          break;
        }
        case 136: {
          Persisted = input.ReadBool();
          break;
        }
        case 162: {
          if (mediumType_ == null) {
            mediumType_ = new global::DeliveryMedium();
          }
          input.ReadMessage(mediumType_);
          break;
        }
        case 184: {
          eventType_ = (global::EventType) input.ReadEnum();
          break;
        }
        case 192: {
          EventVersion = input.ReadUInt64();
          break;
        }
        case 210: {
          if (hashModifier_ == null) {
            hashModifier_ = new global::HashModifier();
          }
          input.ReadMessage(hashModifier_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class UserReadState : pb::IMessage<UserReadState> {
  private static readonly pb::MessageParser<UserReadState> _parser = new pb::MessageParser<UserReadState>(() => new UserReadState());
  public static pb::MessageParser<UserReadState> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[26]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public UserReadState() {
    OnConstruction();
  }

  partial void OnConstruction();

  public UserReadState(UserReadState other) : this() {
    ParticipantId = other.participantId_ != null ? other.ParticipantId.Clone() : null;
    latestReadTimestamp_ = other.latestReadTimestamp_;
  }

  public UserReadState Clone() {
    return new UserReadState(this);
  }

  /// <summary>Field number for the "participant_id" field.</summary>
  public const int ParticipantIdFieldNumber = 1;
  private global::ParticipantId participantId_;
  public global::ParticipantId ParticipantId {
    get { return participantId_; }
    set {
      participantId_ = value;
    }
  }

  /// <summary>Field number for the "latest_read_timestamp" field.</summary>
  public const int LatestReadTimestampFieldNumber = 2;
  private ulong latestReadTimestamp_;
  public ulong LatestReadTimestamp {
    get { return latestReadTimestamp_; }
    set {
      latestReadTimestamp_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as UserReadState);
  }

  public bool Equals(UserReadState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ParticipantId, other.ParticipantId)) return false;
    if (LatestReadTimestamp != other.LatestReadTimestamp) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (participantId_ != null) hash ^= ParticipantId.GetHashCode();
    if (LatestReadTimestamp != 0UL) hash ^= LatestReadTimestamp.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (participantId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ParticipantId);
    }
    if (LatestReadTimestamp != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(LatestReadTimestamp);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (participantId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParticipantId);
    }
    if (LatestReadTimestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LatestReadTimestamp);
    }
    return size;
  }

  public void MergeFrom(UserReadState other) {
    if (other == null) {
      return;
    }
    if (other.participantId_ != null) {
      if (participantId_ == null) {
        participantId_ = new global::ParticipantId();
      }
      ParticipantId.MergeFrom(other.ParticipantId);
    }
    if (other.LatestReadTimestamp != 0UL) {
      LatestReadTimestamp = other.LatestReadTimestamp;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (participantId_ == null) {
            participantId_ = new global::ParticipantId();
          }
          input.ReadMessage(participantId_);
          break;
        }
        case 16: {
          LatestReadTimestamp = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DeliveryMedium : pb::IMessage<DeliveryMedium> {
  private static readonly pb::MessageParser<DeliveryMedium> _parser = new pb::MessageParser<DeliveryMedium>(() => new DeliveryMedium());
  public static pb::MessageParser<DeliveryMedium> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[27]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public DeliveryMedium() {
    OnConstruction();
  }

  partial void OnConstruction();

  public DeliveryMedium(DeliveryMedium other) : this() {
    mediumType_ = other.mediumType_;
    Phone = other.phone_ != null ? other.Phone.Clone() : null;
  }

  public DeliveryMedium Clone() {
    return new DeliveryMedium(this);
  }

  /// <summary>Field number for the "medium_type" field.</summary>
  public const int MediumTypeFieldNumber = 1;
  private global::DeliveryMediumType mediumType_ = global::DeliveryMediumType.DELIVERY_MEDIUM_UNKNOWN;
  public global::DeliveryMediumType MediumType {
    get { return mediumType_; }
    set {
      mediumType_ = value;
    }
  }

  /// <summary>Field number for the "phone" field.</summary>
  public const int PhoneFieldNumber = 2;
  private global::Phone phone_;
  /// <summary>
  ///  Phone number to use for sending Google Voice messages.
  /// </summary>
  public global::Phone Phone {
    get { return phone_; }
    set {
      phone_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as DeliveryMedium);
  }

  public bool Equals(DeliveryMedium other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MediumType != other.MediumType) return false;
    if (!object.Equals(Phone, other.Phone)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (MediumType != global::DeliveryMediumType.DELIVERY_MEDIUM_UNKNOWN) hash ^= MediumType.GetHashCode();
    if (phone_ != null) hash ^= Phone.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (MediumType != global::DeliveryMediumType.DELIVERY_MEDIUM_UNKNOWN) {
      output.WriteRawTag(8);
      output.WriteEnum((int) MediumType);
    }
    if (phone_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Phone);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (MediumType != global::DeliveryMediumType.DELIVERY_MEDIUM_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MediumType);
    }
    if (phone_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Phone);
    }
    return size;
  }

  public void MergeFrom(DeliveryMedium other) {
    if (other == null) {
      return;
    }
    if (other.MediumType != global::DeliveryMediumType.DELIVERY_MEDIUM_UNKNOWN) {
      MediumType = other.MediumType;
    }
    if (other.phone_ != null) {
      if (phone_ == null) {
        phone_ = new global::Phone();
      }
      Phone.MergeFrom(other.Phone);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          mediumType_ = (global::DeliveryMediumType) input.ReadEnum();
          break;
        }
        case 18: {
          if (phone_ == null) {
            phone_ = new global::Phone();
          }
          input.ReadMessage(phone_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DeliveryMediumOption : pb::IMessage<DeliveryMediumOption> {
  private static readonly pb::MessageParser<DeliveryMediumOption> _parser = new pb::MessageParser<DeliveryMediumOption>(() => new DeliveryMediumOption());
  public static pb::MessageParser<DeliveryMediumOption> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[28]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public DeliveryMediumOption() {
    OnConstruction();
  }

  partial void OnConstruction();

  public DeliveryMediumOption(DeliveryMediumOption other) : this() {
    DeliveryMedium = other.deliveryMedium_ != null ? other.DeliveryMedium.Clone() : null;
    currentDefault_ = other.currentDefault_;
  }

  public DeliveryMediumOption Clone() {
    return new DeliveryMediumOption(this);
  }

  /// <summary>Field number for the "delivery_medium" field.</summary>
  public const int DeliveryMediumFieldNumber = 1;
  private global::DeliveryMedium deliveryMedium_;
  public global::DeliveryMedium DeliveryMedium {
    get { return deliveryMedium_; }
    set {
      deliveryMedium_ = value;
    }
  }

  /// <summary>Field number for the "current_default" field.</summary>
  public const int CurrentDefaultFieldNumber = 2;
  private bool currentDefault_;
  public bool CurrentDefault {
    get { return currentDefault_; }
    set {
      currentDefault_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as DeliveryMediumOption);
  }

  public bool Equals(DeliveryMediumOption other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DeliveryMedium, other.DeliveryMedium)) return false;
    if (CurrentDefault != other.CurrentDefault) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (deliveryMedium_ != null) hash ^= DeliveryMedium.GetHashCode();
    if (CurrentDefault != false) hash ^= CurrentDefault.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (deliveryMedium_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DeliveryMedium);
    }
    if (CurrentDefault != false) {
      output.WriteRawTag(16);
      output.WriteBool(CurrentDefault);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (deliveryMedium_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeliveryMedium);
    }
    if (CurrentDefault != false) {
      size += 1 + 1;
    }
    return size;
  }

  public void MergeFrom(DeliveryMediumOption other) {
    if (other == null) {
      return;
    }
    if (other.deliveryMedium_ != null) {
      if (deliveryMedium_ == null) {
        deliveryMedium_ = new global::DeliveryMedium();
      }
      DeliveryMedium.MergeFrom(other.DeliveryMedium);
    }
    if (other.CurrentDefault != false) {
      CurrentDefault = other.CurrentDefault;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (deliveryMedium_ == null) {
            deliveryMedium_ = new global::DeliveryMedium();
          }
          input.ReadMessage(deliveryMedium_);
          break;
        }
        case 16: {
          CurrentDefault = input.ReadBool();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class UserConversationState : pb::IMessage<UserConversationState> {
  private static readonly pb::MessageParser<UserConversationState> _parser = new pb::MessageParser<UserConversationState>(() => new UserConversationState());
  public static pb::MessageParser<UserConversationState> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[29]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public UserConversationState() {
    OnConstruction();
  }

  partial void OnConstruction();

  public UserConversationState(UserConversationState other) : this() {
    clientGeneratedId_ = other.clientGeneratedId_;
    SelfReadState = other.selfReadState_ != null ? other.SelfReadState.Clone() : null;
    status_ = other.status_;
    notificationLevel_ = other.notificationLevel_;
    view_ = other.view_.Clone();
    InviterId = other.inviterId_ != null ? other.InviterId.Clone() : null;
    inviteTimestamp_ = other.inviteTimestamp_;
    sortTimestamp_ = other.sortTimestamp_;
    activeTimestamp_ = other.activeTimestamp_;
    deliveryMediumOption_ = other.deliveryMediumOption_.Clone();
  }

  public UserConversationState Clone() {
    return new UserConversationState(this);
  }

  /// <summary>Field number for the "client_generated_id" field.</summary>
  public const int ClientGeneratedIdFieldNumber = 2;
  private string clientGeneratedId_ = "";
  public string ClientGeneratedId {
    get { return clientGeneratedId_; }
    set {
      clientGeneratedId_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "self_read_state" field.</summary>
  public const int SelfReadStateFieldNumber = 7;
  private global::UserReadState selfReadState_;
  public global::UserReadState SelfReadState {
    get { return selfReadState_; }
    set {
      selfReadState_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 8;
  private global::ConversationStatus status_ = global::ConversationStatus.CONVERSATION_STATUS_UNKNOWN;
  public global::ConversationStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "notification_level" field.</summary>
  public const int NotificationLevelFieldNumber = 9;
  private global::NotificationLevel notificationLevel_ = global::NotificationLevel.NOTIFICATION_LEVEL_UNKNOWN;
  public global::NotificationLevel NotificationLevel {
    get { return notificationLevel_; }
    set {
      notificationLevel_ = value;
    }
  }

  /// <summary>Field number for the "view" field.</summary>
  public const int ViewFieldNumber = 10;
  private static readonly pb::FieldCodec<global::ConversationView> _repeated_view_codec
      = pb::FieldCodec.ForEnum(82, x => (int) x, x => (global::ConversationView) x);
  private readonly pbc::RepeatedField<global::ConversationView> view_ = new pbc::RepeatedField<global::ConversationView>();
  public pbc::RepeatedField<global::ConversationView> View {
    get { return view_; }
  }

  /// <summary>Field number for the "inviter_id" field.</summary>
  public const int InviterIdFieldNumber = 11;
  private global::ParticipantId inviterId_;
  public global::ParticipantId InviterId {
    get { return inviterId_; }
    set {
      inviterId_ = value;
    }
  }

  /// <summary>Field number for the "invite_timestamp" field.</summary>
  public const int InviteTimestampFieldNumber = 12;
  private ulong inviteTimestamp_;
  public ulong InviteTimestamp {
    get { return inviteTimestamp_; }
    set {
      inviteTimestamp_ = value;
    }
  }

  /// <summary>Field number for the "sort_timestamp" field.</summary>
  public const int SortTimestampFieldNumber = 13;
  private ulong sortTimestamp_;
  public ulong SortTimestamp {
    get { return sortTimestamp_; }
    set {
      sortTimestamp_ = value;
    }
  }

  /// <summary>Field number for the "active_timestamp" field.</summary>
  public const int ActiveTimestampFieldNumber = 14;
  private ulong activeTimestamp_;
  public ulong ActiveTimestamp {
    get { return activeTimestamp_; }
    set {
      activeTimestamp_ = value;
    }
  }

  /// <summary>Field number for the "delivery_medium_option" field.</summary>
  public const int DeliveryMediumOptionFieldNumber = 17;
  private static readonly pb::FieldCodec<global::DeliveryMediumOption> _repeated_deliveryMediumOption_codec
      = pb::FieldCodec.ForMessage(138, global::DeliveryMediumOption.Parser);
  private readonly pbc::RepeatedField<global::DeliveryMediumOption> deliveryMediumOption_ = new pbc::RepeatedField<global::DeliveryMediumOption>();
  public pbc::RepeatedField<global::DeliveryMediumOption> DeliveryMediumOption {
    get { return deliveryMediumOption_; }
  }

  public override bool Equals(object other) {
    return Equals(other as UserConversationState);
  }

  public bool Equals(UserConversationState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientGeneratedId != other.ClientGeneratedId) return false;
    if (!object.Equals(SelfReadState, other.SelfReadState)) return false;
    if (Status != other.Status) return false;
    if (NotificationLevel != other.NotificationLevel) return false;
    if(!view_.Equals(other.view_)) return false;
    if (!object.Equals(InviterId, other.InviterId)) return false;
    if (InviteTimestamp != other.InviteTimestamp) return false;
    if (SortTimestamp != other.SortTimestamp) return false;
    if (ActiveTimestamp != other.ActiveTimestamp) return false;
    if(!deliveryMediumOption_.Equals(other.deliveryMediumOption_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (ClientGeneratedId.Length != 0) hash ^= ClientGeneratedId.GetHashCode();
    if (selfReadState_ != null) hash ^= SelfReadState.GetHashCode();
    if (Status != global::ConversationStatus.CONVERSATION_STATUS_UNKNOWN) hash ^= Status.GetHashCode();
    if (NotificationLevel != global::NotificationLevel.NOTIFICATION_LEVEL_UNKNOWN) hash ^= NotificationLevel.GetHashCode();
    hash ^= view_.GetHashCode();
    if (inviterId_ != null) hash ^= InviterId.GetHashCode();
    if (InviteTimestamp != 0UL) hash ^= InviteTimestamp.GetHashCode();
    if (SortTimestamp != 0UL) hash ^= SortTimestamp.GetHashCode();
    if (ActiveTimestamp != 0UL) hash ^= ActiveTimestamp.GetHashCode();
    hash ^= deliveryMediumOption_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientGeneratedId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ClientGeneratedId);
    }
    if (selfReadState_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(SelfReadState);
    }
    if (Status != global::ConversationStatus.CONVERSATION_STATUS_UNKNOWN) {
      output.WriteRawTag(64);
      output.WriteEnum((int) Status);
    }
    if (NotificationLevel != global::NotificationLevel.NOTIFICATION_LEVEL_UNKNOWN) {
      output.WriteRawTag(72);
      output.WriteEnum((int) NotificationLevel);
    }
    view_.WriteTo(output, _repeated_view_codec);
    if (inviterId_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(InviterId);
    }
    if (InviteTimestamp != 0UL) {
      output.WriteRawTag(96);
      output.WriteUInt64(InviteTimestamp);
    }
    if (SortTimestamp != 0UL) {
      output.WriteRawTag(104);
      output.WriteUInt64(SortTimestamp);
    }
    if (ActiveTimestamp != 0UL) {
      output.WriteRawTag(112);
      output.WriteUInt64(ActiveTimestamp);
    }
    deliveryMediumOption_.WriteTo(output, _repeated_deliveryMediumOption_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (ClientGeneratedId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientGeneratedId);
    }
    if (selfReadState_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfReadState);
    }
    if (Status != global::ConversationStatus.CONVERSATION_STATUS_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (NotificationLevel != global::NotificationLevel.NOTIFICATION_LEVEL_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NotificationLevel);
    }
    size += view_.CalculateSize(_repeated_view_codec);
    if (inviterId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(InviterId);
    }
    if (InviteTimestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(InviteTimestamp);
    }
    if (SortTimestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SortTimestamp);
    }
    if (ActiveTimestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ActiveTimestamp);
    }
    size += deliveryMediumOption_.CalculateSize(_repeated_deliveryMediumOption_codec);
    return size;
  }

  public void MergeFrom(UserConversationState other) {
    if (other == null) {
      return;
    }
    if (other.ClientGeneratedId.Length != 0) {
      ClientGeneratedId = other.ClientGeneratedId;
    }
    if (other.selfReadState_ != null) {
      if (selfReadState_ == null) {
        selfReadState_ = new global::UserReadState();
      }
      SelfReadState.MergeFrom(other.SelfReadState);
    }
    if (other.Status != global::ConversationStatus.CONVERSATION_STATUS_UNKNOWN) {
      Status = other.Status;
    }
    if (other.NotificationLevel != global::NotificationLevel.NOTIFICATION_LEVEL_UNKNOWN) {
      NotificationLevel = other.NotificationLevel;
    }
    view_.Add(other.view_);
    if (other.inviterId_ != null) {
      if (inviterId_ == null) {
        inviterId_ = new global::ParticipantId();
      }
      InviterId.MergeFrom(other.InviterId);
    }
    if (other.InviteTimestamp != 0UL) {
      InviteTimestamp = other.InviteTimestamp;
    }
    if (other.SortTimestamp != 0UL) {
      SortTimestamp = other.SortTimestamp;
    }
    if (other.ActiveTimestamp != 0UL) {
      ActiveTimestamp = other.ActiveTimestamp;
    }
    deliveryMediumOption_.Add(other.deliveryMediumOption_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 18: {
          ClientGeneratedId = input.ReadString();
          break;
        }
        case 58: {
          if (selfReadState_ == null) {
            selfReadState_ = new global::UserReadState();
          }
          input.ReadMessage(selfReadState_);
          break;
        }
        case 64: {
          status_ = (global::ConversationStatus) input.ReadEnum();
          break;
        }
        case 72: {
          notificationLevel_ = (global::NotificationLevel) input.ReadEnum();
          break;
        }
        case 82:
        case 80: {
          view_.AddEntriesFrom(input, _repeated_view_codec);
          break;
        }
        case 90: {
          if (inviterId_ == null) {
            inviterId_ = new global::ParticipantId();
          }
          input.ReadMessage(inviterId_);
          break;
        }
        case 96: {
          InviteTimestamp = input.ReadUInt64();
          break;
        }
        case 104: {
          SortTimestamp = input.ReadUInt64();
          break;
        }
        case 112: {
          ActiveTimestamp = input.ReadUInt64();
          break;
        }
        case 138: {
          deliveryMediumOption_.AddEntriesFrom(input, _repeated_deliveryMediumOption_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ConversationParticipantData : pb::IMessage<ConversationParticipantData> {
  private static readonly pb::MessageParser<ConversationParticipantData> _parser = new pb::MessageParser<ConversationParticipantData>(() => new ConversationParticipantData());
  public static pb::MessageParser<ConversationParticipantData> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[30]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public ConversationParticipantData() {
    OnConstruction();
  }

  partial void OnConstruction();

  public ConversationParticipantData(ConversationParticipantData other) : this() {
    Id = other.id_ != null ? other.Id.Clone() : null;
    fallbackName_ = other.fallbackName_;
    invitationStatus_ = other.invitationStatus_;
    participantType_ = other.participantType_;
    newInvitationStatus_ = other.newInvitationStatus_;
  }

  public ConversationParticipantData Clone() {
    return new ConversationParticipantData(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private global::ParticipantId id_;
  public global::ParticipantId Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "fallback_name" field.</summary>
  public const int FallbackNameFieldNumber = 2;
  private string fallbackName_ = "";
  public string FallbackName {
    get { return fallbackName_; }
    set {
      fallbackName_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "invitation_status" field.</summary>
  public const int InvitationStatusFieldNumber = 3;
  private global::InvitationStatus invitationStatus_ = global::InvitationStatus.INVITATION_STATUS_UNKNOWN;
  public global::InvitationStatus InvitationStatus {
    get { return invitationStatus_; }
    set {
      invitationStatus_ = value;
    }
  }

  /// <summary>Field number for the "participant_type" field.</summary>
  public const int ParticipantTypeFieldNumber = 5;
  private global::ParticipantType participantType_ = global::ParticipantType.PARTICIPANT_TYPE_UNKNOWN;
  public global::ParticipantType ParticipantType {
    get { return participantType_; }
    set {
      participantType_ = value;
    }
  }

  /// <summary>Field number for the "new_invitation_status" field.</summary>
  public const int NewInvitationStatusFieldNumber = 6;
  private global::InvitationStatus newInvitationStatus_ = global::InvitationStatus.INVITATION_STATUS_UNKNOWN;
  public global::InvitationStatus NewInvitationStatus {
    get { return newInvitationStatus_; }
    set {
      newInvitationStatus_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as ConversationParticipantData);
  }

  public bool Equals(ConversationParticipantData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Id, other.Id)) return false;
    if (FallbackName != other.FallbackName) return false;
    if (InvitationStatus != other.InvitationStatus) return false;
    if (ParticipantType != other.ParticipantType) return false;
    if (NewInvitationStatus != other.NewInvitationStatus) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (id_ != null) hash ^= Id.GetHashCode();
    if (FallbackName.Length != 0) hash ^= FallbackName.GetHashCode();
    if (InvitationStatus != global::InvitationStatus.INVITATION_STATUS_UNKNOWN) hash ^= InvitationStatus.GetHashCode();
    if (ParticipantType != global::ParticipantType.PARTICIPANT_TYPE_UNKNOWN) hash ^= ParticipantType.GetHashCode();
    if (NewInvitationStatus != global::InvitationStatus.INVITATION_STATUS_UNKNOWN) hash ^= NewInvitationStatus.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (id_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Id);
    }
    if (FallbackName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(FallbackName);
    }
    if (InvitationStatus != global::InvitationStatus.INVITATION_STATUS_UNKNOWN) {
      output.WriteRawTag(24);
      output.WriteEnum((int) InvitationStatus);
    }
    if (ParticipantType != global::ParticipantType.PARTICIPANT_TYPE_UNKNOWN) {
      output.WriteRawTag(40);
      output.WriteEnum((int) ParticipantType);
    }
    if (NewInvitationStatus != global::InvitationStatus.INVITATION_STATUS_UNKNOWN) {
      output.WriteRawTag(48);
      output.WriteEnum((int) NewInvitationStatus);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (id_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
    }
    if (FallbackName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FallbackName);
    }
    if (InvitationStatus != global::InvitationStatus.INVITATION_STATUS_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InvitationStatus);
    }
    if (ParticipantType != global::ParticipantType.PARTICIPANT_TYPE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ParticipantType);
    }
    if (NewInvitationStatus != global::InvitationStatus.INVITATION_STATUS_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NewInvitationStatus);
    }
    return size;
  }

  public void MergeFrom(ConversationParticipantData other) {
    if (other == null) {
      return;
    }
    if (other.id_ != null) {
      if (id_ == null) {
        id_ = new global::ParticipantId();
      }
      Id.MergeFrom(other.Id);
    }
    if (other.FallbackName.Length != 0) {
      FallbackName = other.FallbackName;
    }
    if (other.InvitationStatus != global::InvitationStatus.INVITATION_STATUS_UNKNOWN) {
      InvitationStatus = other.InvitationStatus;
    }
    if (other.ParticipantType != global::ParticipantType.PARTICIPANT_TYPE_UNKNOWN) {
      ParticipantType = other.ParticipantType;
    }
    if (other.NewInvitationStatus != global::InvitationStatus.INVITATION_STATUS_UNKNOWN) {
      NewInvitationStatus = other.NewInvitationStatus;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (id_ == null) {
            id_ = new global::ParticipantId();
          }
          input.ReadMessage(id_);
          break;
        }
        case 18: {
          FallbackName = input.ReadString();
          break;
        }
        case 24: {
          invitationStatus_ = (global::InvitationStatus) input.ReadEnum();
          break;
        }
        case 40: {
          participantType_ = (global::ParticipantType) input.ReadEnum();
          break;
        }
        case 48: {
          newInvitationStatus_ = (global::InvitationStatus) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
///  A conversation between two or more users.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Conversation : pb::IMessage<Conversation> {
  private static readonly pb::MessageParser<Conversation> _parser = new pb::MessageParser<Conversation>(() => new Conversation());
  public static pb::MessageParser<Conversation> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[31]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public Conversation() {
    OnConstruction();
  }

  partial void OnConstruction();

  public Conversation(Conversation other) : this() {
    ConversationId = other.conversationId_ != null ? other.ConversationId.Clone() : null;
    type_ = other.type_;
    name_ = other.name_;
    SelfConversationState = other.selfConversationState_ != null ? other.SelfConversationState.Clone() : null;
    readState_ = other.readState_.Clone();
    hasActiveHangout_ = other.hasActiveHangout_;
    otrStatus_ = other.otrStatus_;
    otrToggle_ = other.otrToggle_;
    conversationHistorySupported_ = other.conversationHistorySupported_;
    currentParticipant_ = other.currentParticipant_.Clone();
    participantData_ = other.participantData_.Clone();
    networkType_ = other.networkType_.Clone();
    forceHistoryState_ = other.forceHistoryState_;
  }

  public Conversation Clone() {
    return new Conversation(this);
  }

  /// <summary>Field number for the "conversation_id" field.</summary>
  public const int ConversationIdFieldNumber = 1;
  private global::ConversationId conversationId_;
  public global::ConversationId ConversationId {
    get { return conversationId_; }
    set {
      conversationId_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private global::ConversationType type_ = global::ConversationType.CONVERSATION_TYPE_UNKNOWN;
  public global::ConversationType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  public string Name {
    get { return name_; }
    set {
      name_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "self_conversation_state" field.</summary>
  public const int SelfConversationStateFieldNumber = 4;
  private global::UserConversationState selfConversationState_;
  public global::UserConversationState SelfConversationState {
    get { return selfConversationState_; }
    set {
      selfConversationState_ = value;
    }
  }

  /// <summary>Field number for the "read_state" field.</summary>
  public const int ReadStateFieldNumber = 8;
  private static readonly pb::FieldCodec<global::UserReadState> _repeated_readState_codec
      = pb::FieldCodec.ForMessage(66, global::UserReadState.Parser);
  private readonly pbc::RepeatedField<global::UserReadState> readState_ = new pbc::RepeatedField<global::UserReadState>();
  public pbc::RepeatedField<global::UserReadState> ReadState {
    get { return readState_; }
  }

  /// <summary>Field number for the "has_active_hangout" field.</summary>
  public const int HasActiveHangoutFieldNumber = 9;
  private bool hasActiveHangout_;
  /// <summary>
  ///  True if the conversation has an active Hangout.
  /// </summary>
  public bool HasActiveHangout {
    get { return hasActiveHangout_; }
    set {
      hasActiveHangout_ = value;
    }
  }

  /// <summary>Field number for the "otr_status" field.</summary>
  public const int OtrStatusFieldNumber = 10;
  private global::OffTheRecordStatus otrStatus_ = global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN;
  /// <summary>
  ///  The conversation's "off the record" status.
  /// </summary>
  public global::OffTheRecordStatus OtrStatus {
    get { return otrStatus_; }
    set {
      otrStatus_ = value;
    }
  }

  /// <summary>Field number for the "otr_toggle" field.</summary>
  public const int OtrToggleFieldNumber = 11;
  private global::OffTheRecordToggle otrToggle_ = global::OffTheRecordToggle.OFF_THE_RECORD_TOGGLE_UNKNOWN;
  /// <summary>
  ///  Whether the OTR toggle is available to the user for this conversation.
  /// </summary>
  public global::OffTheRecordToggle OtrToggle {
    get { return otrToggle_; }
    set {
      otrToggle_ = value;
    }
  }

  /// <summary>Field number for the "conversation_history_supported" field.</summary>
  public const int ConversationHistorySupportedFieldNumber = 12;
  private bool conversationHistorySupported_;
  public bool ConversationHistorySupported {
    get { return conversationHistorySupported_; }
    set {
      conversationHistorySupported_ = value;
    }
  }

  /// <summary>Field number for the "current_participant" field.</summary>
  public const int CurrentParticipantFieldNumber = 13;
  private static readonly pb::FieldCodec<global::ParticipantId> _repeated_currentParticipant_codec
      = pb::FieldCodec.ForMessage(106, global::ParticipantId.Parser);
  private readonly pbc::RepeatedField<global::ParticipantId> currentParticipant_ = new pbc::RepeatedField<global::ParticipantId>();
  public pbc::RepeatedField<global::ParticipantId> CurrentParticipant {
    get { return currentParticipant_; }
  }

  /// <summary>Field number for the "participant_data" field.</summary>
  public const int ParticipantDataFieldNumber = 14;
  private static readonly pb::FieldCodec<global::ConversationParticipantData> _repeated_participantData_codec
      = pb::FieldCodec.ForMessage(114, global::ConversationParticipantData.Parser);
  private readonly pbc::RepeatedField<global::ConversationParticipantData> participantData_ = new pbc::RepeatedField<global::ConversationParticipantData>();
  public pbc::RepeatedField<global::ConversationParticipantData> ParticipantData {
    get { return participantData_; }
  }

  /// <summary>Field number for the "network_type" field.</summary>
  public const int NetworkTypeFieldNumber = 18;
  private static readonly pb::FieldCodec<global::NetworkType> _repeated_networkType_codec
      = pb::FieldCodec.ForEnum(146, x => (int) x, x => (global::NetworkType) x);
  private readonly pbc::RepeatedField<global::NetworkType> networkType_ = new pbc::RepeatedField<global::NetworkType>();
  public pbc::RepeatedField<global::NetworkType> NetworkType {
    get { return networkType_; }
  }

  /// <summary>Field number for the "force_history_state" field.</summary>
  public const int ForceHistoryStateFieldNumber = 19;
  private global::ForceHistory forceHistoryState_ = global::ForceHistory.FORCE_HISTORY_UNKNOWN;
  public global::ForceHistory ForceHistoryState {
    get { return forceHistoryState_; }
    set {
      forceHistoryState_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as Conversation);
  }

  public bool Equals(Conversation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ConversationId, other.ConversationId)) return false;
    if (Type != other.Type) return false;
    if (Name != other.Name) return false;
    if (!object.Equals(SelfConversationState, other.SelfConversationState)) return false;
    if(!readState_.Equals(other.readState_)) return false;
    if (HasActiveHangout != other.HasActiveHangout) return false;
    if (OtrStatus != other.OtrStatus) return false;
    if (OtrToggle != other.OtrToggle) return false;
    if (ConversationHistorySupported != other.ConversationHistorySupported) return false;
    if(!currentParticipant_.Equals(other.currentParticipant_)) return false;
    if(!participantData_.Equals(other.participantData_)) return false;
    if(!networkType_.Equals(other.networkType_)) return false;
    if (ForceHistoryState != other.ForceHistoryState) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (conversationId_ != null) hash ^= ConversationId.GetHashCode();
    if (Type != global::ConversationType.CONVERSATION_TYPE_UNKNOWN) hash ^= Type.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (selfConversationState_ != null) hash ^= SelfConversationState.GetHashCode();
    hash ^= readState_.GetHashCode();
    if (HasActiveHangout != false) hash ^= HasActiveHangout.GetHashCode();
    if (OtrStatus != global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN) hash ^= OtrStatus.GetHashCode();
    if (OtrToggle != global::OffTheRecordToggle.OFF_THE_RECORD_TOGGLE_UNKNOWN) hash ^= OtrToggle.GetHashCode();
    if (ConversationHistorySupported != false) hash ^= ConversationHistorySupported.GetHashCode();
    hash ^= currentParticipant_.GetHashCode();
    hash ^= participantData_.GetHashCode();
    hash ^= networkType_.GetHashCode();
    if (ForceHistoryState != global::ForceHistory.FORCE_HISTORY_UNKNOWN) hash ^= ForceHistoryState.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (conversationId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ConversationId);
    }
    if (Type != global::ConversationType.CONVERSATION_TYPE_UNKNOWN) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Type);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (selfConversationState_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(SelfConversationState);
    }
    readState_.WriteTo(output, _repeated_readState_codec);
    if (HasActiveHangout != false) {
      output.WriteRawTag(72);
      output.WriteBool(HasActiveHangout);
    }
    if (OtrStatus != global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN) {
      output.WriteRawTag(80);
      output.WriteEnum((int) OtrStatus);
    }
    if (OtrToggle != global::OffTheRecordToggle.OFF_THE_RECORD_TOGGLE_UNKNOWN) {
      output.WriteRawTag(88);
      output.WriteEnum((int) OtrToggle);
    }
    if (ConversationHistorySupported != false) {
      output.WriteRawTag(96);
      output.WriteBool(ConversationHistorySupported);
    }
    currentParticipant_.WriteTo(output, _repeated_currentParticipant_codec);
    participantData_.WriteTo(output, _repeated_participantData_codec);
    networkType_.WriteTo(output, _repeated_networkType_codec);
    if (ForceHistoryState != global::ForceHistory.FORCE_HISTORY_UNKNOWN) {
      output.WriteRawTag(152, 1);
      output.WriteEnum((int) ForceHistoryState);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (conversationId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationId);
    }
    if (Type != global::ConversationType.CONVERSATION_TYPE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (selfConversationState_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfConversationState);
    }
    size += readState_.CalculateSize(_repeated_readState_codec);
    if (HasActiveHangout != false) {
      size += 1 + 1;
    }
    if (OtrStatus != global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OtrStatus);
    }
    if (OtrToggle != global::OffTheRecordToggle.OFF_THE_RECORD_TOGGLE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OtrToggle);
    }
    if (ConversationHistorySupported != false) {
      size += 1 + 1;
    }
    size += currentParticipant_.CalculateSize(_repeated_currentParticipant_codec);
    size += participantData_.CalculateSize(_repeated_participantData_codec);
    size += networkType_.CalculateSize(_repeated_networkType_codec);
    if (ForceHistoryState != global::ForceHistory.FORCE_HISTORY_UNKNOWN) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ForceHistoryState);
    }
    return size;
  }

  public void MergeFrom(Conversation other) {
    if (other == null) {
      return;
    }
    if (other.conversationId_ != null) {
      if (conversationId_ == null) {
        conversationId_ = new global::ConversationId();
      }
      ConversationId.MergeFrom(other.ConversationId);
    }
    if (other.Type != global::ConversationType.CONVERSATION_TYPE_UNKNOWN) {
      Type = other.Type;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.selfConversationState_ != null) {
      if (selfConversationState_ == null) {
        selfConversationState_ = new global::UserConversationState();
      }
      SelfConversationState.MergeFrom(other.SelfConversationState);
    }
    readState_.Add(other.readState_);
    if (other.HasActiveHangout != false) {
      HasActiveHangout = other.HasActiveHangout;
    }
    if (other.OtrStatus != global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN) {
      OtrStatus = other.OtrStatus;
    }
    if (other.OtrToggle != global::OffTheRecordToggle.OFF_THE_RECORD_TOGGLE_UNKNOWN) {
      OtrToggle = other.OtrToggle;
    }
    if (other.ConversationHistorySupported != false) {
      ConversationHistorySupported = other.ConversationHistorySupported;
    }
    currentParticipant_.Add(other.currentParticipant_);
    participantData_.Add(other.participantData_);
    networkType_.Add(other.networkType_);
    if (other.ForceHistoryState != global::ForceHistory.FORCE_HISTORY_UNKNOWN) {
      ForceHistoryState = other.ForceHistoryState;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (conversationId_ == null) {
            conversationId_ = new global::ConversationId();
          }
          input.ReadMessage(conversationId_);
          break;
        }
        case 16: {
          type_ = (global::ConversationType) input.ReadEnum();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 34: {
          if (selfConversationState_ == null) {
            selfConversationState_ = new global::UserConversationState();
          }
          input.ReadMessage(selfConversationState_);
          break;
        }
        case 66: {
          readState_.AddEntriesFrom(input, _repeated_readState_codec);
          break;
        }
        case 72: {
          HasActiveHangout = input.ReadBool();
          break;
        }
        case 80: {
          otrStatus_ = (global::OffTheRecordStatus) input.ReadEnum();
          break;
        }
        case 88: {
          otrToggle_ = (global::OffTheRecordToggle) input.ReadEnum();
          break;
        }
        case 96: {
          ConversationHistorySupported = input.ReadBool();
          break;
        }
        case 106: {
          currentParticipant_.AddEntriesFrom(input, _repeated_currentParticipant_codec);
          break;
        }
        case 114: {
          participantData_.AddEntriesFrom(input, _repeated_participantData_codec);
          break;
        }
        case 146:
        case 144: {
          networkType_.AddEntriesFrom(input, _repeated_networkType_codec);
          break;
        }
        case 152: {
          forceHistoryState_ = (global::ForceHistory) input.ReadEnum();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class EasterEgg : pb::IMessage<EasterEgg> {
  private static readonly pb::MessageParser<EasterEgg> _parser = new pb::MessageParser<EasterEgg>(() => new EasterEgg());
  public static pb::MessageParser<EasterEgg> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[32]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public EasterEgg() {
    OnConstruction();
  }

  partial void OnConstruction();

  public EasterEgg(EasterEgg other) : this() {
    message_ = other.message_;
  }

  public EasterEgg Clone() {
    return new EasterEgg(this);
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 1;
  private string message_ = "";
  public string Message {
    get { return message_; }
    set {
      message_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as EasterEgg);
  }

  public bool Equals(EasterEgg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Message != other.Message) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Message.Length != 0) hash ^= Message.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Message.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Message);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Message.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    return size;
  }

  public void MergeFrom(EasterEgg other) {
    if (other == null) {
      return;
    }
    if (other.Message.Length != 0) {
      Message = other.Message;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Message = input.ReadString();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class BlockStateChange : pb::IMessage<BlockStateChange> {
  private static readonly pb::MessageParser<BlockStateChange> _parser = new pb::MessageParser<BlockStateChange>(() => new BlockStateChange());
  public static pb::MessageParser<BlockStateChange> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[33]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public BlockStateChange() {
    OnConstruction();
  }

  partial void OnConstruction();

  public BlockStateChange(BlockStateChange other) : this() {
    ParticipantId = other.participantId_ != null ? other.ParticipantId.Clone() : null;
    newBlockState_ = other.newBlockState_;
  }

  public BlockStateChange Clone() {
    return new BlockStateChange(this);
  }

  /// <summary>Field number for the "participant_id" field.</summary>
  public const int ParticipantIdFieldNumber = 1;
  private global::ParticipantId participantId_;
  public global::ParticipantId ParticipantId {
    get { return participantId_; }
    set {
      participantId_ = value;
    }
  }

  /// <summary>Field number for the "new_block_state" field.</summary>
  public const int NewBlockStateFieldNumber = 2;
  private global::BlockState newBlockState_ = global::BlockState.BLOCK_STATE_UNKNOWN;
  public global::BlockState NewBlockState {
    get { return newBlockState_; }
    set {
      newBlockState_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as BlockStateChange);
  }

  public bool Equals(BlockStateChange other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ParticipantId, other.ParticipantId)) return false;
    if (NewBlockState != other.NewBlockState) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (participantId_ != null) hash ^= ParticipantId.GetHashCode();
    if (NewBlockState != global::BlockState.BLOCK_STATE_UNKNOWN) hash ^= NewBlockState.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (participantId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ParticipantId);
    }
    if (NewBlockState != global::BlockState.BLOCK_STATE_UNKNOWN) {
      output.WriteRawTag(16);
      output.WriteEnum((int) NewBlockState);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (participantId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ParticipantId);
    }
    if (NewBlockState != global::BlockState.BLOCK_STATE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NewBlockState);
    }
    return size;
  }

  public void MergeFrom(BlockStateChange other) {
    if (other == null) {
      return;
    }
    if (other.participantId_ != null) {
      if (participantId_ == null) {
        participantId_ = new global::ParticipantId();
      }
      ParticipantId.MergeFrom(other.ParticipantId);
    }
    if (other.NewBlockState != global::BlockState.BLOCK_STATE_UNKNOWN) {
      NewBlockState = other.NewBlockState;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (participantId_ == null) {
            participantId_ = new global::ParticipantId();
          }
          input.ReadMessage(participantId_);
          break;
        }
        case 16: {
          newBlockState_ = (global::BlockState) input.ReadEnum();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Photo : pb::IMessage<Photo> {
  private static readonly pb::MessageParser<Photo> _parser = new pb::MessageParser<Photo>(() => new Photo());
  public static pb::MessageParser<Photo> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[34]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public Photo() {
    OnConstruction();
  }

  partial void OnConstruction();

  public Photo(Photo other) : this() {
    photoId_ = other.photoId_;
    deleteAlbumlessSourcePhoto_ = other.deleteAlbumlessSourcePhoto_;
    userId_ = other.userId_;
    isCustomUserId_ = other.isCustomUserId_;
  }

  public Photo Clone() {
    return new Photo(this);
  }

  /// <summary>Field number for the "photo_id" field.</summary>
  public const int PhotoIdFieldNumber = 1;
  private string photoId_ = "";
  /// <summary>
  ///  Picasa photo ID.
  /// </summary>
  public string PhotoId {
    get { return photoId_; }
    set {
      photoId_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "delete_albumless_source_photo" field.</summary>
  public const int DeleteAlbumlessSourcePhotoFieldNumber = 2;
  private bool deleteAlbumlessSourcePhoto_;
  public bool DeleteAlbumlessSourcePhoto {
    get { return deleteAlbumlessSourcePhoto_; }
    set {
      deleteAlbumlessSourcePhoto_ = value;
    }
  }

  /// <summary>Field number for the "user_id" field.</summary>
  public const int UserIdFieldNumber = 3;
  private string userId_ = "";
  /// <summary>
  ///   Picasa user ID needed for photos from other accounts (eg. stickers).
  /// </summary>
  public string UserId {
    get { return userId_; }
    set {
      userId_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "is_custom_user_id" field.</summary>
  public const int IsCustomUserIdFieldNumber = 4;
  private bool isCustomUserId_;
  /// <summary>
  ///  Must be true if user_id is specified.
  /// </summary>
  public bool IsCustomUserId {
    get { return isCustomUserId_; }
    set {
      isCustomUserId_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as Photo);
  }

  public bool Equals(Photo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PhotoId != other.PhotoId) return false;
    if (DeleteAlbumlessSourcePhoto != other.DeleteAlbumlessSourcePhoto) return false;
    if (UserId != other.UserId) return false;
    if (IsCustomUserId != other.IsCustomUserId) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (PhotoId.Length != 0) hash ^= PhotoId.GetHashCode();
    if (DeleteAlbumlessSourcePhoto != false) hash ^= DeleteAlbumlessSourcePhoto.GetHashCode();
    if (UserId.Length != 0) hash ^= UserId.GetHashCode();
    if (IsCustomUserId != false) hash ^= IsCustomUserId.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (PhotoId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(PhotoId);
    }
    if (DeleteAlbumlessSourcePhoto != false) {
      output.WriteRawTag(16);
      output.WriteBool(DeleteAlbumlessSourcePhoto);
    }
    if (UserId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(UserId);
    }
    if (IsCustomUserId != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsCustomUserId);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (PhotoId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PhotoId);
    }
    if (DeleteAlbumlessSourcePhoto != false) {
      size += 1 + 1;
    }
    if (UserId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
    }
    if (IsCustomUserId != false) {
      size += 1 + 1;
    }
    return size;
  }

  public void MergeFrom(Photo other) {
    if (other == null) {
      return;
    }
    if (other.PhotoId.Length != 0) {
      PhotoId = other.PhotoId;
    }
    if (other.DeleteAlbumlessSourcePhoto != false) {
      DeleteAlbumlessSourcePhoto = other.DeleteAlbumlessSourcePhoto;
    }
    if (other.UserId.Length != 0) {
      UserId = other.UserId;
    }
    if (other.IsCustomUserId != false) {
      IsCustomUserId = other.IsCustomUserId;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          PhotoId = input.ReadString();
          break;
        }
        case 16: {
          DeleteAlbumlessSourcePhoto = input.ReadBool();
          break;
        }
        case 26: {
          UserId = input.ReadString();
          break;
        }
        case 32: {
          IsCustomUserId = input.ReadBool();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ExistingMedia : pb::IMessage<ExistingMedia> {
  private static readonly pb::MessageParser<ExistingMedia> _parser = new pb::MessageParser<ExistingMedia>(() => new ExistingMedia());
  public static pb::MessageParser<ExistingMedia> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[35]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public ExistingMedia() {
    OnConstruction();
  }

  partial void OnConstruction();

  public ExistingMedia(ExistingMedia other) : this() {
    Photo = other.photo_ != null ? other.Photo.Clone() : null;
  }

  public ExistingMedia Clone() {
    return new ExistingMedia(this);
  }

  /// <summary>Field number for the "photo" field.</summary>
  public const int PhotoFieldNumber = 1;
  private global::Photo photo_;
  public global::Photo Photo {
    get { return photo_; }
    set {
      photo_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as ExistingMedia);
  }

  public bool Equals(ExistingMedia other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Photo, other.Photo)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (photo_ != null) hash ^= Photo.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (photo_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Photo);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (photo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Photo);
    }
    return size;
  }

  public void MergeFrom(ExistingMedia other) {
    if (other == null) {
      return;
    }
    if (other.photo_ != null) {
      if (photo_ == null) {
        photo_ = new global::Photo();
      }
      Photo.MergeFrom(other.Photo);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (photo_ == null) {
            photo_ = new global::Photo();
          }
          input.ReadMessage(photo_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class EventRequestHeader : pb::IMessage<EventRequestHeader> {
  private static readonly pb::MessageParser<EventRequestHeader> _parser = new pb::MessageParser<EventRequestHeader>(() => new EventRequestHeader());
  public static pb::MessageParser<EventRequestHeader> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[36]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public EventRequestHeader() {
    OnConstruction();
  }

  partial void OnConstruction();

  public EventRequestHeader(EventRequestHeader other) : this() {
    ConversationId = other.conversationId_ != null ? other.ConversationId.Clone() : null;
    clientGeneratedId_ = other.clientGeneratedId_;
    expectedOtr_ = other.expectedOtr_;
    DeliveryMedium = other.deliveryMedium_ != null ? other.DeliveryMedium.Clone() : null;
    eventType_ = other.eventType_;
  }

  public EventRequestHeader Clone() {
    return new EventRequestHeader(this);
  }

  /// <summary>Field number for the "conversation_id" field.</summary>
  public const int ConversationIdFieldNumber = 1;
  private global::ConversationId conversationId_;
  public global::ConversationId ConversationId {
    get { return conversationId_; }
    set {
      conversationId_ = value;
    }
  }

  /// <summary>Field number for the "client_generated_id" field.</summary>
  public const int ClientGeneratedIdFieldNumber = 2;
  private ulong clientGeneratedId_;
  public ulong ClientGeneratedId {
    get { return clientGeneratedId_; }
    set {
      clientGeneratedId_ = value;
    }
  }

  /// <summary>Field number for the "expected_otr" field.</summary>
  public const int ExpectedOtrFieldNumber = 3;
  private global::OffTheRecordStatus expectedOtr_ = global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN;
  public global::OffTheRecordStatus ExpectedOtr {
    get { return expectedOtr_; }
    set {
      expectedOtr_ = value;
    }
  }

  /// <summary>Field number for the "delivery_medium" field.</summary>
  public const int DeliveryMediumFieldNumber = 4;
  private global::DeliveryMedium deliveryMedium_;
  public global::DeliveryMedium DeliveryMedium {
    get { return deliveryMedium_; }
    set {
      deliveryMedium_ = value;
    }
  }

  /// <summary>Field number for the "event_type" field.</summary>
  public const int EventTypeFieldNumber = 5;
  private global::EventType eventType_ = global::EventType.EVENT_TYPE_UNKNOWN;
  public global::EventType EventType {
    get { return eventType_; }
    set {
      eventType_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as EventRequestHeader);
  }

  public bool Equals(EventRequestHeader other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ConversationId, other.ConversationId)) return false;
    if (ClientGeneratedId != other.ClientGeneratedId) return false;
    if (ExpectedOtr != other.ExpectedOtr) return false;
    if (!object.Equals(DeliveryMedium, other.DeliveryMedium)) return false;
    if (EventType != other.EventType) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (conversationId_ != null) hash ^= ConversationId.GetHashCode();
    if (ClientGeneratedId != 0UL) hash ^= ClientGeneratedId.GetHashCode();
    if (ExpectedOtr != global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN) hash ^= ExpectedOtr.GetHashCode();
    if (deliveryMedium_ != null) hash ^= DeliveryMedium.GetHashCode();
    if (EventType != global::EventType.EVENT_TYPE_UNKNOWN) hash ^= EventType.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (conversationId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ConversationId);
    }
    if (ClientGeneratedId != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(ClientGeneratedId);
    }
    if (ExpectedOtr != global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN) {
      output.WriteRawTag(24);
      output.WriteEnum((int) ExpectedOtr);
    }
    if (deliveryMedium_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(DeliveryMedium);
    }
    if (EventType != global::EventType.EVENT_TYPE_UNKNOWN) {
      output.WriteRawTag(40);
      output.WriteEnum((int) EventType);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (conversationId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationId);
    }
    if (ClientGeneratedId != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClientGeneratedId);
    }
    if (ExpectedOtr != global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ExpectedOtr);
    }
    if (deliveryMedium_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeliveryMedium);
    }
    if (EventType != global::EventType.EVENT_TYPE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
    }
    return size;
  }

  public void MergeFrom(EventRequestHeader other) {
    if (other == null) {
      return;
    }
    if (other.conversationId_ != null) {
      if (conversationId_ == null) {
        conversationId_ = new global::ConversationId();
      }
      ConversationId.MergeFrom(other.ConversationId);
    }
    if (other.ClientGeneratedId != 0UL) {
      ClientGeneratedId = other.ClientGeneratedId;
    }
    if (other.ExpectedOtr != global::OffTheRecordStatus.OFF_THE_RECORD_STATUS_UNKNOWN) {
      ExpectedOtr = other.ExpectedOtr;
    }
    if (other.deliveryMedium_ != null) {
      if (deliveryMedium_ == null) {
        deliveryMedium_ = new global::DeliveryMedium();
      }
      DeliveryMedium.MergeFrom(other.DeliveryMedium);
    }
    if (other.EventType != global::EventType.EVENT_TYPE_UNKNOWN) {
      EventType = other.EventType;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (conversationId_ == null) {
            conversationId_ = new global::ConversationId();
          }
          input.ReadMessage(conversationId_);
          break;
        }
        case 16: {
          ClientGeneratedId = input.ReadUInt64();
          break;
        }
        case 24: {
          expectedOtr_ = (global::OffTheRecordStatus) input.ReadEnum();
          break;
        }
        case 34: {
          if (deliveryMedium_ == null) {
            deliveryMedium_ = new global::DeliveryMedium();
          }
          input.ReadMessage(deliveryMedium_);
          break;
        }
        case 40: {
          eventType_ = (global::EventType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
///  The client and device version.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ClientVersion : pb::IMessage<ClientVersion> {
  private static readonly pb::MessageParser<ClientVersion> _parser = new pb::MessageParser<ClientVersion>(() => new ClientVersion());
  public static pb::MessageParser<ClientVersion> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[37]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public ClientVersion() {
    OnConstruction();
  }

  partial void OnConstruction();

  public ClientVersion(ClientVersion other) : this() {
    clientId_ = other.clientId_;
    buildType_ = other.buildType_;
    majorVersion_ = other.majorVersion_;
    versionTimestamp_ = other.versionTimestamp_;
    deviceOsVersion_ = other.deviceOsVersion_;
    deviceHardware_ = other.deviceHardware_;
  }

  public ClientVersion Clone() {
    return new ClientVersion(this);
  }

  /// <summary>Field number for the "client_id" field.</summary>
  public const int ClientIdFieldNumber = 1;
  private global::ClientId clientId_ = global::ClientId.CLIENT_ID_UNKNOWN;
  /// <summary>
  ///  Identifies the client.
  /// </summary>
  public global::ClientId ClientId {
    get { return clientId_; }
    set {
      clientId_ = value;
    }
  }

  /// <summary>Field number for the "build_type" field.</summary>
  public const int BuildTypeFieldNumber = 2;
  private global::ClientBuildType buildType_ = global::ClientBuildType.BUILD_TYPE_UNKNOWN;
  /// <summary>
  ///  The client build type.
  /// </summary>
  public global::ClientBuildType BuildType {
    get { return buildType_; }
    set {
      buildType_ = value;
    }
  }

  /// <summary>Field number for the "major_version" field.</summary>
  public const int MajorVersionFieldNumber = 3;
  private string majorVersion_ = "";
  /// <summary>
  ///  Client version.
  /// </summary>
  public string MajorVersion {
    get { return majorVersion_; }
    set {
      majorVersion_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "version_timestamp" field.</summary>
  public const int VersionTimestampFieldNumber = 4;
  private ulong versionTimestamp_;
  /// <summary>
  ///  Client version timestamp.
  /// </summary>
  public ulong VersionTimestamp {
    get { return versionTimestamp_; }
    set {
      versionTimestamp_ = value;
    }
  }

  /// <summary>Field number for the "device_os_version" field.</summary>
  public const int DeviceOsVersionFieldNumber = 5;
  private string deviceOsVersion_ = "";
  /// <summary>
  ///  OS version string (for native apps).
  /// </summary>
  public string DeviceOsVersion {
    get { return deviceOsVersion_; }
    set {
      deviceOsVersion_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "device_hardware" field.</summary>
  public const int DeviceHardwareFieldNumber = 6;
  private string deviceHardware_ = "";
  /// <summary>
  ///  Device hardware name (for native apps).
  /// </summary>
  public string DeviceHardware {
    get { return deviceHardware_; }
    set {
      deviceHardware_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as ClientVersion);
  }

  public bool Equals(ClientVersion other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClientId != other.ClientId) return false;
    if (BuildType != other.BuildType) return false;
    if (MajorVersion != other.MajorVersion) return false;
    if (VersionTimestamp != other.VersionTimestamp) return false;
    if (DeviceOsVersion != other.DeviceOsVersion) return false;
    if (DeviceHardware != other.DeviceHardware) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (ClientId != global::ClientId.CLIENT_ID_UNKNOWN) hash ^= ClientId.GetHashCode();
    if (BuildType != global::ClientBuildType.BUILD_TYPE_UNKNOWN) hash ^= BuildType.GetHashCode();
    if (MajorVersion.Length != 0) hash ^= MajorVersion.GetHashCode();
    if (VersionTimestamp != 0UL) hash ^= VersionTimestamp.GetHashCode();
    if (DeviceOsVersion.Length != 0) hash ^= DeviceOsVersion.GetHashCode();
    if (DeviceHardware.Length != 0) hash ^= DeviceHardware.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (ClientId != global::ClientId.CLIENT_ID_UNKNOWN) {
      output.WriteRawTag(8);
      output.WriteEnum((int) ClientId);
    }
    if (BuildType != global::ClientBuildType.BUILD_TYPE_UNKNOWN) {
      output.WriteRawTag(16);
      output.WriteEnum((int) BuildType);
    }
    if (MajorVersion.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(MajorVersion);
    }
    if (VersionTimestamp != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(VersionTimestamp);
    }
    if (DeviceOsVersion.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(DeviceOsVersion);
    }
    if (DeviceHardware.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(DeviceHardware);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (ClientId != global::ClientId.CLIENT_ID_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ClientId);
    }
    if (BuildType != global::ClientBuildType.BUILD_TYPE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BuildType);
    }
    if (MajorVersion.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MajorVersion);
    }
    if (VersionTimestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VersionTimestamp);
    }
    if (DeviceOsVersion.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceOsVersion);
    }
    if (DeviceHardware.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceHardware);
    }
    return size;
  }

  public void MergeFrom(ClientVersion other) {
    if (other == null) {
      return;
    }
    if (other.ClientId != global::ClientId.CLIENT_ID_UNKNOWN) {
      ClientId = other.ClientId;
    }
    if (other.BuildType != global::ClientBuildType.BUILD_TYPE_UNKNOWN) {
      BuildType = other.BuildType;
    }
    if (other.MajorVersion.Length != 0) {
      MajorVersion = other.MajorVersion;
    }
    if (other.VersionTimestamp != 0UL) {
      VersionTimestamp = other.VersionTimestamp;
    }
    if (other.DeviceOsVersion.Length != 0) {
      DeviceOsVersion = other.DeviceOsVersion;
    }
    if (other.DeviceHardware.Length != 0) {
      DeviceHardware = other.DeviceHardware;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          clientId_ = (global::ClientId) input.ReadEnum();
          break;
        }
        case 16: {
          buildType_ = (global::ClientBuildType) input.ReadEnum();
          break;
        }
        case 26: {
          MajorVersion = input.ReadString();
          break;
        }
        case 32: {
          VersionTimestamp = input.ReadUInt64();
          break;
        }
        case 42: {
          DeviceOsVersion = input.ReadString();
          break;
        }
        case 50: {
          DeviceHardware = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///  Header for requests from the client to the server.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class RequestHeader : pb::IMessage<RequestHeader> {
  private static readonly pb::MessageParser<RequestHeader> _parser = new pb::MessageParser<RequestHeader>(() => new RequestHeader());
  public static pb::MessageParser<RequestHeader> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[38]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public RequestHeader() {
    OnConstruction();
  }

  partial void OnConstruction();

  public RequestHeader(RequestHeader other) : this() {
    ClientVersion = other.clientVersion_ != null ? other.ClientVersion.Clone() : null;
    ClientIdentifier = other.clientIdentifier_ != null ? other.ClientIdentifier.Clone() : null;
    languageCode_ = other.languageCode_;
  }

  public RequestHeader Clone() {
    return new RequestHeader(this);
  }

  /// <summary>Field number for the "client_version" field.</summary>
  public const int ClientVersionFieldNumber = 1;
  private global::ClientVersion clientVersion_;
  public global::ClientVersion ClientVersion {
    get { return clientVersion_; }
    set {
      clientVersion_ = value;
    }
  }

  /// <summary>Field number for the "client_identifier" field.</summary>
  public const int ClientIdentifierFieldNumber = 2;
  private global::ClientIdentifier clientIdentifier_;
  public global::ClientIdentifier ClientIdentifier {
    get { return clientIdentifier_; }
    set {
      clientIdentifier_ = value;
    }
  }

  /// <summary>Field number for the "language_code" field.</summary>
  public const int LanguageCodeFieldNumber = 4;
  private string languageCode_ = "";
  public string LanguageCode {
    get { return languageCode_; }
    set {
      languageCode_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as RequestHeader);
  }

  public bool Equals(RequestHeader other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ClientVersion, other.ClientVersion)) return false;
    if (!object.Equals(ClientIdentifier, other.ClientIdentifier)) return false;
    if (LanguageCode != other.LanguageCode) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (clientVersion_ != null) hash ^= ClientVersion.GetHashCode();
    if (clientIdentifier_ != null) hash ^= ClientIdentifier.GetHashCode();
    if (LanguageCode.Length != 0) hash ^= LanguageCode.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (clientVersion_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ClientVersion);
    }
    if (clientIdentifier_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ClientIdentifier);
    }
    if (LanguageCode.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(LanguageCode);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (clientVersion_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientVersion);
    }
    if (clientIdentifier_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientIdentifier);
    }
    if (LanguageCode.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LanguageCode);
    }
    return size;
  }

  public void MergeFrom(RequestHeader other) {
    if (other == null) {
      return;
    }
    if (other.clientVersion_ != null) {
      if (clientVersion_ == null) {
        clientVersion_ = new global::ClientVersion();
      }
      ClientVersion.MergeFrom(other.ClientVersion);
    }
    if (other.clientIdentifier_ != null) {
      if (clientIdentifier_ == null) {
        clientIdentifier_ = new global::ClientIdentifier();
      }
      ClientIdentifier.MergeFrom(other.ClientIdentifier);
    }
    if (other.LanguageCode.Length != 0) {
      LanguageCode = other.LanguageCode;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (clientVersion_ == null) {
            clientVersion_ = new global::ClientVersion();
          }
          input.ReadMessage(clientVersion_);
          break;
        }
        case 18: {
          if (clientIdentifier_ == null) {
            clientIdentifier_ = new global::ClientIdentifier();
          }
          input.ReadMessage(clientIdentifier_);
          break;
        }
        case 34: {
          LanguageCode = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///  Header for responses from the server to the client.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ResponseHeader : pb::IMessage<ResponseHeader> {
  private static readonly pb::MessageParser<ResponseHeader> _parser = new pb::MessageParser<ResponseHeader>(() => new ResponseHeader());
  public static pb::MessageParser<ResponseHeader> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[39]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public ResponseHeader() {
    OnConstruction();
  }

  partial void OnConstruction();

  public ResponseHeader(ResponseHeader other) : this() {
    status_ = other.status_;
    errorDescription_ = other.errorDescription_;
    debugUrl_ = other.debugUrl_;
    requestTraceId_ = other.requestTraceId_;
    currentServerTime_ = other.currentServerTime_;
  }

  public ResponseHeader Clone() {
    return new ResponseHeader(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_ = global::ResponseStatus.RESPONSE_STATUS_UNKNOWN;
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "error_description" field.</summary>
  public const int ErrorDescriptionFieldNumber = 2;
  private string errorDescription_ = "";
  public string ErrorDescription {
    get { return errorDescription_; }
    set {
      errorDescription_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "debug_url" field.</summary>
  public const int DebugUrlFieldNumber = 3;
  private string debugUrl_ = "";
  public string DebugUrl {
    get { return debugUrl_; }
    set {
      debugUrl_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "request_trace_id" field.</summary>
  public const int RequestTraceIdFieldNumber = 4;
  private string requestTraceId_ = "";
  public string RequestTraceId {
    get { return requestTraceId_; }
    set {
      requestTraceId_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "current_server_time" field.</summary>
  public const int CurrentServerTimeFieldNumber = 5;
  private ulong currentServerTime_;
  public ulong CurrentServerTime {
    get { return currentServerTime_; }
    set {
      currentServerTime_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as ResponseHeader);
  }

  public bool Equals(ResponseHeader other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Status != other.Status) return false;
    if (ErrorDescription != other.ErrorDescription) return false;
    if (DebugUrl != other.DebugUrl) return false;
    if (RequestTraceId != other.RequestTraceId) return false;
    if (CurrentServerTime != other.CurrentServerTime) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Status != global::ResponseStatus.RESPONSE_STATUS_UNKNOWN) hash ^= Status.GetHashCode();
    if (ErrorDescription.Length != 0) hash ^= ErrorDescription.GetHashCode();
    if (DebugUrl.Length != 0) hash ^= DebugUrl.GetHashCode();
    if (RequestTraceId.Length != 0) hash ^= RequestTraceId.GetHashCode();
    if (CurrentServerTime != 0UL) hash ^= CurrentServerTime.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Status != global::ResponseStatus.RESPONSE_STATUS_UNKNOWN) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Status);
    }
    if (ErrorDescription.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ErrorDescription);
    }
    if (DebugUrl.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(DebugUrl);
    }
    if (RequestTraceId.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(RequestTraceId);
    }
    if (CurrentServerTime != 0UL) {
      output.WriteRawTag(40);
      output.WriteUInt64(CurrentServerTime);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Status != global::ResponseStatus.RESPONSE_STATUS_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (ErrorDescription.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorDescription);
    }
    if (DebugUrl.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DebugUrl);
    }
    if (RequestTraceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestTraceId);
    }
    if (CurrentServerTime != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CurrentServerTime);
    }
    return size;
  }

  public void MergeFrom(ResponseHeader other) {
    if (other == null) {
      return;
    }
    if (other.Status != global::ResponseStatus.RESPONSE_STATUS_UNKNOWN) {
      Status = other.Status;
    }
    if (other.ErrorDescription.Length != 0) {
      ErrorDescription = other.ErrorDescription;
    }
    if (other.DebugUrl.Length != 0) {
      DebugUrl = other.DebugUrl;
    }
    if (other.RequestTraceId.Length != 0) {
      RequestTraceId = other.RequestTraceId;
    }
    if (other.CurrentServerTime != 0UL) {
      CurrentServerTime = other.CurrentServerTime;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          status_ = (global::ResponseStatus) input.ReadEnum();
          break;
        }
        case 18: {
          ErrorDescription = input.ReadString();
          break;
        }
        case 26: {
          DebugUrl = input.ReadString();
          break;
        }
        case 34: {
          RequestTraceId = input.ReadString();
          break;
        }
        case 40: {
          CurrentServerTime = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///  A user that can participate in conversations.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Entity : pb::IMessage<Entity> {
  private static readonly pb::MessageParser<Entity> _parser = new pb::MessageParser<Entity>(() => new Entity());
  public static pb::MessageParser<Entity> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[40]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public Entity() {
    OnConstruction();
  }

  partial void OnConstruction();

  public Entity(Entity other) : this() {
    Id = other.id_ != null ? other.Id.Clone() : null;
    Presence = other.presence_ != null ? other.Presence.Clone() : null;
    Properties = other.properties_ != null ? other.Properties.Clone() : null;
    entityType_ = other.entityType_;
    hadPastHangoutState_ = other.hadPastHangoutState_;
  }

  public Entity Clone() {
    return new Entity(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 9;
  private global::ParticipantId id_;
  /// <summary>
  ///  The user's ID.
  /// </summary>
  public global::ParticipantId Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "presence" field.</summary>
  public const int PresenceFieldNumber = 8;
  private global::Presence presence_;
  /// <summary>
  ///   user presence status.
  /// </summary>
  public global::Presence Presence {
    get { return presence_; }
    set {
      presence_ = value;
    }
  }

  /// <summary>Field number for the "properties" field.</summary>
  public const int PropertiesFieldNumber = 10;
  private global::EntityProperties properties_;
  /// <summary>
  ///   user properties.
  /// </summary>
  public global::EntityProperties Properties {
    get { return properties_; }
    set {
      properties_ = value;
    }
  }

  /// <summary>Field number for the "entity_type" field.</summary>
  public const int EntityTypeFieldNumber = 13;
  private global::ParticipantType entityType_ = global::ParticipantType.PARTICIPANT_TYPE_UNKNOWN;
  public global::ParticipantType EntityType {
    get { return entityType_; }
    set {
      entityType_ = value;
    }
  }

  /// <summary>Field number for the "had_past_hangout_state" field.</summary>
  public const int HadPastHangoutStateFieldNumber = 16;
  private global::Entity.Types.PastHangoutState hadPastHangoutState_ = global::Entity.Types.PastHangoutState.PAST_HANGOUT_STATE_UNKNOWN;
  public global::Entity.Types.PastHangoutState HadPastHangoutState {
    get { return hadPastHangoutState_; }
    set {
      hadPastHangoutState_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as Entity);
  }

  public bool Equals(Entity other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Id, other.Id)) return false;
    if (!object.Equals(Presence, other.Presence)) return false;
    if (!object.Equals(Properties, other.Properties)) return false;
    if (EntityType != other.EntityType) return false;
    if (HadPastHangoutState != other.HadPastHangoutState) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (id_ != null) hash ^= Id.GetHashCode();
    if (presence_ != null) hash ^= Presence.GetHashCode();
    if (properties_ != null) hash ^= Properties.GetHashCode();
    if (EntityType != global::ParticipantType.PARTICIPANT_TYPE_UNKNOWN) hash ^= EntityType.GetHashCode();
    if (HadPastHangoutState != global::Entity.Types.PastHangoutState.PAST_HANGOUT_STATE_UNKNOWN) hash ^= HadPastHangoutState.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (presence_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Presence);
    }
    if (id_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(Id);
    }
    if (properties_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(Properties);
    }
    if (EntityType != global::ParticipantType.PARTICIPANT_TYPE_UNKNOWN) {
      output.WriteRawTag(104);
      output.WriteEnum((int) EntityType);
    }
    if (HadPastHangoutState != global::Entity.Types.PastHangoutState.PAST_HANGOUT_STATE_UNKNOWN) {
      output.WriteRawTag(128, 1);
      output.WriteEnum((int) HadPastHangoutState);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (id_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Id);
    }
    if (presence_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Presence);
    }
    if (properties_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Properties);
    }
    if (EntityType != global::ParticipantType.PARTICIPANT_TYPE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EntityType);
    }
    if (HadPastHangoutState != global::Entity.Types.PastHangoutState.PAST_HANGOUT_STATE_UNKNOWN) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) HadPastHangoutState);
    }
    return size;
  }

  public void MergeFrom(Entity other) {
    if (other == null) {
      return;
    }
    if (other.id_ != null) {
      if (id_ == null) {
        id_ = new global::ParticipantId();
      }
      Id.MergeFrom(other.Id);
    }
    if (other.presence_ != null) {
      if (presence_ == null) {
        presence_ = new global::Presence();
      }
      Presence.MergeFrom(other.Presence);
    }
    if (other.properties_ != null) {
      if (properties_ == null) {
        properties_ = new global::EntityProperties();
      }
      Properties.MergeFrom(other.Properties);
    }
    if (other.EntityType != global::ParticipantType.PARTICIPANT_TYPE_UNKNOWN) {
      EntityType = other.EntityType;
    }
    if (other.HadPastHangoutState != global::Entity.Types.PastHangoutState.PAST_HANGOUT_STATE_UNKNOWN) {
      HadPastHangoutState = other.HadPastHangoutState;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 66: {
          if (presence_ == null) {
            presence_ = new global::Presence();
          }
          input.ReadMessage(presence_);
          break;
        }
        case 74: {
          if (id_ == null) {
            id_ = new global::ParticipantId();
          }
          input.ReadMessage(id_);
          break;
        }
        case 82: {
          if (properties_ == null) {
            properties_ = new global::EntityProperties();
          }
          input.ReadMessage(properties_);
          break;
        }
        case 104: {
          entityType_ = (global::ParticipantType) input.ReadEnum();
          break;
        }
        case 128: {
          hadPastHangoutState_ = (global::Entity.Types.PastHangoutState) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the Entity message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    public enum PastHangoutState {
      PAST_HANGOUT_STATE_UNKNOWN = 0,
      PAST_HANGOUT_STATE_HAD_PAST_HANGOUT = 1,
      PAST_HANGOUT_STATE_NO_PAST_HANGOUT = 2,
    }

  }
  #endregion

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class EntityProperties : pb::IMessage<EntityProperties> {
  private static readonly pb::MessageParser<EntityProperties> _parser = new pb::MessageParser<EntityProperties>(() => new EntityProperties());
  public static pb::MessageParser<EntityProperties> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[41]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public EntityProperties() {
    OnConstruction();
  }

  partial void OnConstruction();

  public EntityProperties(EntityProperties other) : this() {
    type_ = other.type_;
    displayName_ = other.displayName_;
    firstName_ = other.firstName_;
    photoUrl_ = other.photoUrl_;
    email_ = other.email_.Clone();
    phone_ = other.phone_.Clone();
    inUsersDomain_ = other.inUsersDomain_;
    gender_ = other.gender_;
    photoUrlStatus_ = other.photoUrlStatus_;
    canonicalEmail_ = other.canonicalEmail_;
  }

  public EntityProperties Clone() {
    return new EntityProperties(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::ProfileType type_ = global::ProfileType.PROFILE_TYPE_NONE;
  public global::ProfileType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "display_name" field.</summary>
  public const int DisplayNameFieldNumber = 2;
  private string displayName_ = "";
  public string DisplayName {
    get { return displayName_; }
    set {
      displayName_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "first_name" field.</summary>
  public const int FirstNameFieldNumber = 3;
  private string firstName_ = "";
  public string FirstName {
    get { return firstName_; }
    set {
      firstName_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "photo_url" field.</summary>
  public const int PhotoUrlFieldNumber = 4;
  private string photoUrl_ = "";
  public string PhotoUrl {
    get { return photoUrl_; }
    set {
      photoUrl_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "email" field.</summary>
  public const int EmailFieldNumber = 5;
  private static readonly pb::FieldCodec<string> _repeated_email_codec
      = pb::FieldCodec.ForString(42);
  private readonly pbc::RepeatedField<string> email_ = new pbc::RepeatedField<string>();
  public pbc::RepeatedField<string> Email {
    get { return email_; }
  }

  /// <summary>Field number for the "phone" field.</summary>
  public const int PhoneFieldNumber = 6;
  private static readonly pb::FieldCodec<string> _repeated_phone_codec
      = pb::FieldCodec.ForString(50);
  private readonly pbc::RepeatedField<string> phone_ = new pbc::RepeatedField<string>();
  public pbc::RepeatedField<string> Phone {
    get { return phone_; }
  }

  /// <summary>Field number for the "in_users_domain" field.</summary>
  public const int InUsersDomainFieldNumber = 10;
  private bool inUsersDomain_;
  public bool InUsersDomain {
    get { return inUsersDomain_; }
    set {
      inUsersDomain_ = value;
    }
  }

  /// <summary>Field number for the "gender" field.</summary>
  public const int GenderFieldNumber = 11;
  private global::Gender gender_ = global::Gender.GENDER_UNKNOWN;
  public global::Gender Gender {
    get { return gender_; }
    set {
      gender_ = value;
    }
  }

  /// <summary>Field number for the "photo_url_status" field.</summary>
  public const int PhotoUrlStatusFieldNumber = 12;
  private global::PhotoUrlStatus photoUrlStatus_ = global::PhotoUrlStatus.PHOTO_URL_STATUS_UNKNOWN;
  public global::PhotoUrlStatus PhotoUrlStatus {
    get { return photoUrlStatus_; }
    set {
      photoUrlStatus_ = value;
    }
  }

  /// <summary>Field number for the "canonical_email" field.</summary>
  public const int CanonicalEmailFieldNumber = 15;
  private string canonicalEmail_ = "";
  public string CanonicalEmail {
    get { return canonicalEmail_; }
    set {
      canonicalEmail_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as EntityProperties);
  }

  public bool Equals(EntityProperties other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (DisplayName != other.DisplayName) return false;
    if (FirstName != other.FirstName) return false;
    if (PhotoUrl != other.PhotoUrl) return false;
    if(!email_.Equals(other.email_)) return false;
    if(!phone_.Equals(other.phone_)) return false;
    if (InUsersDomain != other.InUsersDomain) return false;
    if (Gender != other.Gender) return false;
    if (PhotoUrlStatus != other.PhotoUrlStatus) return false;
    if (CanonicalEmail != other.CanonicalEmail) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Type != global::ProfileType.PROFILE_TYPE_NONE) hash ^= Type.GetHashCode();
    if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
    if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
    if (PhotoUrl.Length != 0) hash ^= PhotoUrl.GetHashCode();
    hash ^= email_.GetHashCode();
    hash ^= phone_.GetHashCode();
    if (InUsersDomain != false) hash ^= InUsersDomain.GetHashCode();
    if (Gender != global::Gender.GENDER_UNKNOWN) hash ^= Gender.GetHashCode();
    if (PhotoUrlStatus != global::PhotoUrlStatus.PHOTO_URL_STATUS_UNKNOWN) hash ^= PhotoUrlStatus.GetHashCode();
    if (CanonicalEmail.Length != 0) hash ^= CanonicalEmail.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != global::ProfileType.PROFILE_TYPE_NONE) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (DisplayName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(DisplayName);
    }
    if (FirstName.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(FirstName);
    }
    if (PhotoUrl.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(PhotoUrl);
    }
    email_.WriteTo(output, _repeated_email_codec);
    phone_.WriteTo(output, _repeated_phone_codec);
    if (InUsersDomain != false) {
      output.WriteRawTag(80);
      output.WriteBool(InUsersDomain);
    }
    if (Gender != global::Gender.GENDER_UNKNOWN) {
      output.WriteRawTag(88);
      output.WriteEnum((int) Gender);
    }
    if (PhotoUrlStatus != global::PhotoUrlStatus.PHOTO_URL_STATUS_UNKNOWN) {
      output.WriteRawTag(96);
      output.WriteEnum((int) PhotoUrlStatus);
    }
    if (CanonicalEmail.Length != 0) {
      output.WriteRawTag(122);
      output.WriteString(CanonicalEmail);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Type != global::ProfileType.PROFILE_TYPE_NONE) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (DisplayName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
    }
    if (FirstName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
    }
    if (PhotoUrl.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PhotoUrl);
    }
    size += email_.CalculateSize(_repeated_email_codec);
    size += phone_.CalculateSize(_repeated_phone_codec);
    if (InUsersDomain != false) {
      size += 1 + 1;
    }
    if (Gender != global::Gender.GENDER_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Gender);
    }
    if (PhotoUrlStatus != global::PhotoUrlStatus.PHOTO_URL_STATUS_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PhotoUrlStatus);
    }
    if (CanonicalEmail.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CanonicalEmail);
    }
    return size;
  }

  public void MergeFrom(EntityProperties other) {
    if (other == null) {
      return;
    }
    if (other.Type != global::ProfileType.PROFILE_TYPE_NONE) {
      Type = other.Type;
    }
    if (other.DisplayName.Length != 0) {
      DisplayName = other.DisplayName;
    }
    if (other.FirstName.Length != 0) {
      FirstName = other.FirstName;
    }
    if (other.PhotoUrl.Length != 0) {
      PhotoUrl = other.PhotoUrl;
    }
    email_.Add(other.email_);
    phone_.Add(other.phone_);
    if (other.InUsersDomain != false) {
      InUsersDomain = other.InUsersDomain;
    }
    if (other.Gender != global::Gender.GENDER_UNKNOWN) {
      Gender = other.Gender;
    }
    if (other.PhotoUrlStatus != global::PhotoUrlStatus.PHOTO_URL_STATUS_UNKNOWN) {
      PhotoUrlStatus = other.PhotoUrlStatus;
    }
    if (other.CanonicalEmail.Length != 0) {
      CanonicalEmail = other.CanonicalEmail;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          type_ = (global::ProfileType) input.ReadEnum();
          break;
        }
        case 18: {
          DisplayName = input.ReadString();
          break;
        }
        case 26: {
          FirstName = input.ReadString();
          break;
        }
        case 34: {
          PhotoUrl = input.ReadString();
          break;
        }
        case 42: {
          email_.AddEntriesFrom(input, _repeated_email_codec);
          break;
        }
        case 50: {
          phone_.AddEntriesFrom(input, _repeated_phone_codec);
          break;
        }
        case 80: {
          InUsersDomain = input.ReadBool();
          break;
        }
        case 88: {
          gender_ = (global::Gender) input.ReadEnum();
          break;
        }
        case 96: {
          photoUrlStatus_ = (global::PhotoUrlStatus) input.ReadEnum();
          break;
        }
        case 122: {
          CanonicalEmail = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///  State of a conversation and recent events.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ConversationState : pb::IMessage<ConversationState> {
  private static readonly pb::MessageParser<ConversationState> _parser = new pb::MessageParser<ConversationState>(() => new ConversationState());
  public static pb::MessageParser<ConversationState> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[42]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public ConversationState() {
    OnConstruction();
  }

  partial void OnConstruction();

  public ConversationState(ConversationState other) : this() {
    ConversationId = other.conversationId_ != null ? other.ConversationId.Clone() : null;
    Conversation = other.conversation_ != null ? other.Conversation.Clone() : null;
    event_ = other.event_.Clone();
    EventContinuationToken = other.eventContinuationToken_ != null ? other.EventContinuationToken.Clone() : null;
  }

  public ConversationState Clone() {
    return new ConversationState(this);
  }

  /// <summary>Field number for the "conversation_id" field.</summary>
  public const int ConversationIdFieldNumber = 1;
  private global::ConversationId conversationId_;
  public global::ConversationId ConversationId {
    get { return conversationId_; }
    set {
      conversationId_ = value;
    }
  }

  /// <summary>Field number for the "conversation" field.</summary>
  public const int ConversationFieldNumber = 2;
  private global::Conversation conversation_;
  public global::Conversation Conversation {
    get { return conversation_; }
    set {
      conversation_ = value;
    }
  }

  /// <summary>Field number for the "event" field.</summary>
  public const int EventFieldNumber = 3;
  private static readonly pb::FieldCodec<global::Event> _repeated_event_codec
      = pb::FieldCodec.ForMessage(26, global::Event.Parser);
  private readonly pbc::RepeatedField<global::Event> event_ = new pbc::RepeatedField<global::Event>();
  public pbc::RepeatedField<global::Event> Event {
    get { return event_; }
  }

  /// <summary>Field number for the "event_continuation_token" field.</summary>
  public const int EventContinuationTokenFieldNumber = 5;
  private global::EventContinuationToken eventContinuationToken_;
  public global::EventContinuationToken EventContinuationToken {
    get { return eventContinuationToken_; }
    set {
      eventContinuationToken_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as ConversationState);
  }

  public bool Equals(ConversationState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ConversationId, other.ConversationId)) return false;
    if (!object.Equals(Conversation, other.Conversation)) return false;
    if(!event_.Equals(other.event_)) return false;
    if (!object.Equals(EventContinuationToken, other.EventContinuationToken)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (conversationId_ != null) hash ^= ConversationId.GetHashCode();
    if (conversation_ != null) hash ^= Conversation.GetHashCode();
    hash ^= event_.GetHashCode();
    if (eventContinuationToken_ != null) hash ^= EventContinuationToken.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (conversationId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ConversationId);
    }
    if (conversation_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Conversation);
    }
    event_.WriteTo(output, _repeated_event_codec);
    if (eventContinuationToken_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(EventContinuationToken);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (conversationId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationId);
    }
    if (conversation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Conversation);
    }
    size += event_.CalculateSize(_repeated_event_codec);
    if (eventContinuationToken_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventContinuationToken);
    }
    return size;
  }

  public void MergeFrom(ConversationState other) {
    if (other == null) {
      return;
    }
    if (other.conversationId_ != null) {
      if (conversationId_ == null) {
        conversationId_ = new global::ConversationId();
      }
      ConversationId.MergeFrom(other.ConversationId);
    }
    if (other.conversation_ != null) {
      if (conversation_ == null) {
        conversation_ = new global::Conversation();
      }
      Conversation.MergeFrom(other.Conversation);
    }
    event_.Add(other.event_);
    if (other.eventContinuationToken_ != null) {
      if (eventContinuationToken_ == null) {
        eventContinuationToken_ = new global::EventContinuationToken();
      }
      EventContinuationToken.MergeFrom(other.EventContinuationToken);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (conversationId_ == null) {
            conversationId_ = new global::ConversationId();
          }
          input.ReadMessage(conversationId_);
          break;
        }
        case 18: {
          if (conversation_ == null) {
            conversation_ = new global::Conversation();
          }
          input.ReadMessage(conversation_);
          break;
        }
        case 26: {
          event_.AddEntriesFrom(input, _repeated_event_codec);
          break;
        }
        case 42: {
          if (eventContinuationToken_ == null) {
            eventContinuationToken_ = new global::EventContinuationToken();
          }
          input.ReadMessage(eventContinuationToken_);
          break;
        }
      }
    }
  }

}

/// <summary>
///  Token that allows retrieving more events from a position in a conversation.
///  Specifying event_timestamp is sufficient.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class EventContinuationToken : pb::IMessage<EventContinuationToken> {
  private static readonly pb::MessageParser<EventContinuationToken> _parser = new pb::MessageParser<EventContinuationToken>(() => new EventContinuationToken());
  public static pb::MessageParser<EventContinuationToken> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[43]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public EventContinuationToken() {
    OnConstruction();
  }

  partial void OnConstruction();

  public EventContinuationToken(EventContinuationToken other) : this() {
    eventId_ = other.eventId_;
    storageContinuationToken_ = other.storageContinuationToken_;
    eventTimestamp_ = other.eventTimestamp_;
  }

  public EventContinuationToken Clone() {
    return new EventContinuationToken(this);
  }

  /// <summary>Field number for the "event_id" field.</summary>
  public const int EventIdFieldNumber = 1;
  private string eventId_ = "";
  public string EventId {
    get { return eventId_; }
    set {
      eventId_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "storage_continuation_token" field.</summary>
  public const int StorageContinuationTokenFieldNumber = 2;
  private pb::ByteString storageContinuationToken_ = pb::ByteString.Empty;
  public pb::ByteString StorageContinuationToken {
    get { return storageContinuationToken_; }
    set {
      storageContinuationToken_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "event_timestamp" field.</summary>
  public const int EventTimestampFieldNumber = 3;
  private ulong eventTimestamp_;
  public ulong EventTimestamp {
    get { return eventTimestamp_; }
    set {
      eventTimestamp_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as EventContinuationToken);
  }

  public bool Equals(EventContinuationToken other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EventId != other.EventId) return false;
    if (StorageContinuationToken != other.StorageContinuationToken) return false;
    if (EventTimestamp != other.EventTimestamp) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (EventId.Length != 0) hash ^= EventId.GetHashCode();
    if (StorageContinuationToken.Length != 0) hash ^= StorageContinuationToken.GetHashCode();
    if (EventTimestamp != 0UL) hash ^= EventTimestamp.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (EventId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(EventId);
    }
    if (StorageContinuationToken.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(StorageContinuationToken);
    }
    if (EventTimestamp != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(EventTimestamp);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (EventId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
    }
    if (StorageContinuationToken.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(StorageContinuationToken);
    }
    if (EventTimestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EventTimestamp);
    }
    return size;
  }

  public void MergeFrom(EventContinuationToken other) {
    if (other == null) {
      return;
    }
    if (other.EventId.Length != 0) {
      EventId = other.EventId;
    }
    if (other.StorageContinuationToken.Length != 0) {
      StorageContinuationToken = other.StorageContinuationToken;
    }
    if (other.EventTimestamp != 0UL) {
      EventTimestamp = other.EventTimestamp;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          EventId = input.ReadString();
          break;
        }
        case 18: {
          StorageContinuationToken = input.ReadBytes();
          break;
        }
        case 24: {
          EventTimestamp = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class EntityLookupSpec : pb::IMessage<EntityLookupSpec> {
  private static readonly pb::MessageParser<EntityLookupSpec> _parser = new pb::MessageParser<EntityLookupSpec>(() => new EntityLookupSpec());
  public static pb::MessageParser<EntityLookupSpec> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[44]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public EntityLookupSpec() {
    OnConstruction();
  }

  partial void OnConstruction();

  public EntityLookupSpec(EntityLookupSpec other) : this() {
    gaiaId_ = other.gaiaId_;
  }

  public EntityLookupSpec Clone() {
    return new EntityLookupSpec(this);
  }

  /// <summary>Field number for the "gaia_id" field.</summary>
  public const int GaiaIdFieldNumber = 1;
  private string gaiaId_ = "";
  public string GaiaId {
    get { return gaiaId_; }
    set {
      gaiaId_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as EntityLookupSpec);
  }

  public bool Equals(EntityLookupSpec other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GaiaId != other.GaiaId) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (GaiaId.Length != 0) hash ^= GaiaId.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (GaiaId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(GaiaId);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (GaiaId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GaiaId);
    }
    return size;
  }

  public void MergeFrom(EntityLookupSpec other) {
    if (other == null) {
      return;
    }
    if (other.GaiaId.Length != 0) {
      GaiaId = other.GaiaId;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          GaiaId = input.ReadString();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ConfigurationBit : pb::IMessage<ConfigurationBit> {
  private static readonly pb::MessageParser<ConfigurationBit> _parser = new pb::MessageParser<ConfigurationBit>(() => new ConfigurationBit());
  public static pb::MessageParser<ConfigurationBit> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[45]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public ConfigurationBit() {
    OnConstruction();
  }

  partial void OnConstruction();

  public ConfigurationBit(ConfigurationBit other) : this() {
    configurationBitType_ = other.configurationBitType_;
    value_ = other.value_;
  }

  public ConfigurationBit Clone() {
    return new ConfigurationBit(this);
  }

  /// <summary>Field number for the "configuration_bit_type" field.</summary>
  public const int ConfigurationBitTypeFieldNumber = 1;
  private global::ConfigurationBitType configurationBitType_ = global::ConfigurationBitType.CONFIGURATION_BIT_TYPE_UNKNOWN;
  public global::ConfigurationBitType ConfigurationBitType {
    get { return configurationBitType_; }
    set {
      configurationBitType_ = value;
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private bool value_;
  public bool Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as ConfigurationBit);
  }

  public bool Equals(ConfigurationBit other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ConfigurationBitType != other.ConfigurationBitType) return false;
    if (Value != other.Value) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (ConfigurationBitType != global::ConfigurationBitType.CONFIGURATION_BIT_TYPE_UNKNOWN) hash ^= ConfigurationBitType.GetHashCode();
    if (Value != false) hash ^= Value.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (ConfigurationBitType != global::ConfigurationBitType.CONFIGURATION_BIT_TYPE_UNKNOWN) {
      output.WriteRawTag(8);
      output.WriteEnum((int) ConfigurationBitType);
    }
    if (Value != false) {
      output.WriteRawTag(16);
      output.WriteBool(Value);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (ConfigurationBitType != global::ConfigurationBitType.CONFIGURATION_BIT_TYPE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConfigurationBitType);
    }
    if (Value != false) {
      size += 1 + 1;
    }
    return size;
  }

  public void MergeFrom(ConfigurationBit other) {
    if (other == null) {
      return;
    }
    if (other.ConfigurationBitType != global::ConfigurationBitType.CONFIGURATION_BIT_TYPE_UNKNOWN) {
      ConfigurationBitType = other.ConfigurationBitType;
    }
    if (other.Value != false) {
      Value = other.Value;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          configurationBitType_ = (global::ConfigurationBitType) input.ReadEnum();
          break;
        }
        case 16: {
          Value = input.ReadBool();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class RichPresenceState : pb::IMessage<RichPresenceState> {
  private static readonly pb::MessageParser<RichPresenceState> _parser = new pb::MessageParser<RichPresenceState>(() => new RichPresenceState());
  public static pb::MessageParser<RichPresenceState> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[46]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public RichPresenceState() {
    OnConstruction();
  }

  partial void OnConstruction();

  public RichPresenceState(RichPresenceState other) : this() {
    getRichPresenceEnabledState_ = other.getRichPresenceEnabledState_.Clone();
  }

  public RichPresenceState Clone() {
    return new RichPresenceState(this);
  }

  /// <summary>Field number for the "get_rich_presence_enabled_state" field.</summary>
  public const int GetRichPresenceEnabledStateFieldNumber = 3;
  private static readonly pb::FieldCodec<global::RichPresenceEnabledState> _repeated_getRichPresenceEnabledState_codec
      = pb::FieldCodec.ForMessage(26, global::RichPresenceEnabledState.Parser);
  private readonly pbc::RepeatedField<global::RichPresenceEnabledState> getRichPresenceEnabledState_ = new pbc::RepeatedField<global::RichPresenceEnabledState>();
  public pbc::RepeatedField<global::RichPresenceEnabledState> GetRichPresenceEnabledState {
    get { return getRichPresenceEnabledState_; }
  }

  public override bool Equals(object other) {
    return Equals(other as RichPresenceState);
  }

  public bool Equals(RichPresenceState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!getRichPresenceEnabledState_.Equals(other.getRichPresenceEnabledState_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= getRichPresenceEnabledState_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    getRichPresenceEnabledState_.WriteTo(output, _repeated_getRichPresenceEnabledState_codec);
  }

  public int CalculateSize() {
    int size = 0;
    size += getRichPresenceEnabledState_.CalculateSize(_repeated_getRichPresenceEnabledState_codec);
    return size;
  }

  public void MergeFrom(RichPresenceState other) {
    if (other == null) {
      return;
    }
    getRichPresenceEnabledState_.Add(other.getRichPresenceEnabledState_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 26: {
          getRichPresenceEnabledState_.AddEntriesFrom(input, _repeated_getRichPresenceEnabledState_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class RichPresenceEnabledState : pb::IMessage<RichPresenceEnabledState> {
  private static readonly pb::MessageParser<RichPresenceEnabledState> _parser = new pb::MessageParser<RichPresenceEnabledState>(() => new RichPresenceEnabledState());
  public static pb::MessageParser<RichPresenceEnabledState> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[47]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public RichPresenceEnabledState() {
    OnConstruction();
  }

  partial void OnConstruction();

  public RichPresenceEnabledState(RichPresenceEnabledState other) : this() {
    type_ = other.type_;
    enabled_ = other.enabled_;
  }

  public RichPresenceEnabledState Clone() {
    return new RichPresenceEnabledState(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::RichPresenceType type_ = global::RichPresenceType.RICH_PRESENCE_TYPE_UNKNOWN;
  public global::RichPresenceType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "enabled" field.</summary>
  public const int EnabledFieldNumber = 2;
  private bool enabled_;
  public bool Enabled {
    get { return enabled_; }
    set {
      enabled_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as RichPresenceEnabledState);
  }

  public bool Equals(RichPresenceEnabledState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (Enabled != other.Enabled) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Type != global::RichPresenceType.RICH_PRESENCE_TYPE_UNKNOWN) hash ^= Type.GetHashCode();
    if (Enabled != false) hash ^= Enabled.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != global::RichPresenceType.RICH_PRESENCE_TYPE_UNKNOWN) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (Enabled != false) {
      output.WriteRawTag(16);
      output.WriteBool(Enabled);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Type != global::RichPresenceType.RICH_PRESENCE_TYPE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Enabled != false) {
      size += 1 + 1;
    }
    return size;
  }

  public void MergeFrom(RichPresenceEnabledState other) {
    if (other == null) {
      return;
    }
    if (other.Type != global::RichPresenceType.RICH_PRESENCE_TYPE_UNKNOWN) {
      Type = other.Type;
    }
    if (other.Enabled != false) {
      Enabled = other.Enabled;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          type_ = (global::RichPresenceType) input.ReadEnum();
          break;
        }
        case 16: {
          Enabled = input.ReadBool();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DesktopOffSetting : pb::IMessage<DesktopOffSetting> {
  private static readonly pb::MessageParser<DesktopOffSetting> _parser = new pb::MessageParser<DesktopOffSetting>(() => new DesktopOffSetting());
  public static pb::MessageParser<DesktopOffSetting> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[48]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public DesktopOffSetting() {
    OnConstruction();
  }

  partial void OnConstruction();

  public DesktopOffSetting(DesktopOffSetting other) : this() {
    desktopOff_ = other.desktopOff_;
  }

  public DesktopOffSetting Clone() {
    return new DesktopOffSetting(this);
  }

  /// <summary>Field number for the "desktop_off" field.</summary>
  public const int DesktopOffFieldNumber = 1;
  private bool desktopOff_;
  /// <summary>
  ///  State of "desktop off" setting.
  /// </summary>
  public bool DesktopOff {
    get { return desktopOff_; }
    set {
      desktopOff_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as DesktopOffSetting);
  }

  public bool Equals(DesktopOffSetting other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DesktopOff != other.DesktopOff) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (DesktopOff != false) hash ^= DesktopOff.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (DesktopOff != false) {
      output.WriteRawTag(8);
      output.WriteBool(DesktopOff);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (DesktopOff != false) {
      size += 1 + 1;
    }
    return size;
  }

  public void MergeFrom(DesktopOffSetting other) {
    if (other == null) {
      return;
    }
    if (other.DesktopOff != false) {
      DesktopOff = other.DesktopOff;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          DesktopOff = input.ReadBool();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DesktopOffState : pb::IMessage<DesktopOffState> {
  private static readonly pb::MessageParser<DesktopOffState> _parser = new pb::MessageParser<DesktopOffState>(() => new DesktopOffState());
  public static pb::MessageParser<DesktopOffState> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[49]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public DesktopOffState() {
    OnConstruction();
  }

  partial void OnConstruction();

  public DesktopOffState(DesktopOffState other) : this() {
    desktopOff_ = other.desktopOff_;
    version_ = other.version_;
  }

  public DesktopOffState Clone() {
    return new DesktopOffState(this);
  }

  /// <summary>Field number for the "desktop_off" field.</summary>
  public const int DesktopOffFieldNumber = 1;
  private bool desktopOff_;
  /// <summary>
  ///  Whether Hangouts desktop is signed off or on.
  /// </summary>
  public bool DesktopOff {
    get { return desktopOff_; }
    set {
      desktopOff_ = value;
    }
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 2;
  private ulong version_;
  public ulong Version {
    get { return version_; }
    set {
      version_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as DesktopOffState);
  }

  public bool Equals(DesktopOffState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DesktopOff != other.DesktopOff) return false;
    if (Version != other.Version) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (DesktopOff != false) hash ^= DesktopOff.GetHashCode();
    if (Version != 0UL) hash ^= Version.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (DesktopOff != false) {
      output.WriteRawTag(8);
      output.WriteBool(DesktopOff);
    }
    if (Version != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Version);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (DesktopOff != false) {
      size += 1 + 1;
    }
    if (Version != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Version);
    }
    return size;
  }

  public void MergeFrom(DesktopOffState other) {
    if (other == null) {
      return;
    }
    if (other.DesktopOff != false) {
      DesktopOff = other.DesktopOff;
    }
    if (other.Version != 0UL) {
      Version = other.Version;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          DesktopOff = input.ReadBool();
          break;
        }
        case 16: {
          Version = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///  Enable or disable do-not-disturb mode. Not to be confused with
///  DoNotDisturbSetting, which is used to indicate the state of do-not-disturb
///  mode.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DndSetting : pb::IMessage<DndSetting> {
  private static readonly pb::MessageParser<DndSetting> _parser = new pb::MessageParser<DndSetting>(() => new DndSetting());
  public static pb::MessageParser<DndSetting> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[50]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public DndSetting() {
    OnConstruction();
  }

  partial void OnConstruction();

  public DndSetting(DndSetting other) : this() {
    doNotDisturb_ = other.doNotDisturb_;
    timeoutSecs_ = other.timeoutSecs_;
  }

  public DndSetting Clone() {
    return new DndSetting(this);
  }

  /// <summary>Field number for the "do_not_disturb" field.</summary>
  public const int DoNotDisturbFieldNumber = 1;
  private bool doNotDisturb_;
  /// <summary>
  ///  Whether to enable or disable do-not-disturb mode.
  /// </summary>
  public bool DoNotDisturb {
    get { return doNotDisturb_; }
    set {
      doNotDisturb_ = value;
    }
  }

  /// <summary>Field number for the "timeout_secs" field.</summary>
  public const int TimeoutSecsFieldNumber = 2;
  private ulong timeoutSecs_;
  /// <summary>
  ///  Do not disturb expiration in seconds.
  /// </summary>
  public ulong TimeoutSecs {
    get { return timeoutSecs_; }
    set {
      timeoutSecs_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as DndSetting);
  }

  public bool Equals(DndSetting other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DoNotDisturb != other.DoNotDisturb) return false;
    if (TimeoutSecs != other.TimeoutSecs) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (DoNotDisturb != false) hash ^= DoNotDisturb.GetHashCode();
    if (TimeoutSecs != 0UL) hash ^= TimeoutSecs.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (DoNotDisturb != false) {
      output.WriteRawTag(8);
      output.WriteBool(DoNotDisturb);
    }
    if (TimeoutSecs != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(TimeoutSecs);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (DoNotDisturb != false) {
      size += 1 + 1;
    }
    if (TimeoutSecs != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeoutSecs);
    }
    return size;
  }

  public void MergeFrom(DndSetting other) {
    if (other == null) {
      return;
    }
    if (other.DoNotDisturb != false) {
      DoNotDisturb = other.DoNotDisturb;
    }
    if (other.TimeoutSecs != 0UL) {
      TimeoutSecs = other.TimeoutSecs;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          DoNotDisturb = input.ReadBool();
          break;
        }
        case 16: {
          TimeoutSecs = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PresenceStateSetting : pb::IMessage<PresenceStateSetting> {
  private static readonly pb::MessageParser<PresenceStateSetting> _parser = new pb::MessageParser<PresenceStateSetting>(() => new PresenceStateSetting());
  public static pb::MessageParser<PresenceStateSetting> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[51]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public PresenceStateSetting() {
    OnConstruction();
  }

  partial void OnConstruction();

  public PresenceStateSetting(PresenceStateSetting other) : this() {
    timeoutSecs_ = other.timeoutSecs_;
    type_ = other.type_;
  }

  public PresenceStateSetting Clone() {
    return new PresenceStateSetting(this);
  }

  /// <summary>Field number for the "timeout_secs" field.</summary>
  public const int TimeoutSecsFieldNumber = 1;
  private ulong timeoutSecs_;
  public ulong TimeoutSecs {
    get { return timeoutSecs_; }
    set {
      timeoutSecs_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private global::ClientPresenceStateType type_ = global::ClientPresenceStateType.CLIENT_PRESENCE_STATE_UNKNOWN;
  public global::ClientPresenceStateType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as PresenceStateSetting);
  }

  public bool Equals(PresenceStateSetting other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TimeoutSecs != other.TimeoutSecs) return false;
    if (Type != other.Type) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (TimeoutSecs != 0UL) hash ^= TimeoutSecs.GetHashCode();
    if (Type != global::ClientPresenceStateType.CLIENT_PRESENCE_STATE_UNKNOWN) hash ^= Type.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (TimeoutSecs != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(TimeoutSecs);
    }
    if (Type != global::ClientPresenceStateType.CLIENT_PRESENCE_STATE_UNKNOWN) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Type);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (TimeoutSecs != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeoutSecs);
    }
    if (Type != global::ClientPresenceStateType.CLIENT_PRESENCE_STATE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    return size;
  }

  public void MergeFrom(PresenceStateSetting other) {
    if (other == null) {
      return;
    }
    if (other.TimeoutSecs != 0UL) {
      TimeoutSecs = other.TimeoutSecs;
    }
    if (other.Type != global::ClientPresenceStateType.CLIENT_PRESENCE_STATE_UNKNOWN) {
      Type = other.Type;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          TimeoutSecs = input.ReadUInt64();
          break;
        }
        case 16: {
          type_ = (global::ClientPresenceStateType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MoodMessage : pb::IMessage<MoodMessage> {
  private static readonly pb::MessageParser<MoodMessage> _parser = new pb::MessageParser<MoodMessage>(() => new MoodMessage());
  public static pb::MessageParser<MoodMessage> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[52]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public MoodMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  public MoodMessage(MoodMessage other) : this() {
    MoodContent = other.moodContent_ != null ? other.MoodContent.Clone() : null;
  }

  public MoodMessage Clone() {
    return new MoodMessage(this);
  }

  /// <summary>Field number for the "mood_content" field.</summary>
  public const int MoodContentFieldNumber = 1;
  private global::MoodContent moodContent_;
  public global::MoodContent MoodContent {
    get { return moodContent_; }
    set {
      moodContent_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as MoodMessage);
  }

  public bool Equals(MoodMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(MoodContent, other.MoodContent)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (moodContent_ != null) hash ^= MoodContent.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (moodContent_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(MoodContent);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (moodContent_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoodContent);
    }
    return size;
  }

  public void MergeFrom(MoodMessage other) {
    if (other == null) {
      return;
    }
    if (other.moodContent_ != null) {
      if (moodContent_ == null) {
        moodContent_ = new global::MoodContent();
      }
      MoodContent.MergeFrom(other.MoodContent);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (moodContent_ == null) {
            moodContent_ = new global::MoodContent();
          }
          input.ReadMessage(moodContent_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MoodContent : pb::IMessage<MoodContent> {
  private static readonly pb::MessageParser<MoodContent> _parser = new pb::MessageParser<MoodContent>(() => new MoodContent());
  public static pb::MessageParser<MoodContent> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[53]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public MoodContent() {
    OnConstruction();
  }

  partial void OnConstruction();

  public MoodContent(MoodContent other) : this() {
    segment_ = other.segment_.Clone();
  }

  public MoodContent Clone() {
    return new MoodContent(this);
  }

  /// <summary>Field number for the "segment" field.</summary>
  public const int SegmentFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Segment> _repeated_segment_codec
      = pb::FieldCodec.ForMessage(10, global::Segment.Parser);
  private readonly pbc::RepeatedField<global::Segment> segment_ = new pbc::RepeatedField<global::Segment>();
  public pbc::RepeatedField<global::Segment> Segment {
    get { return segment_; }
  }

  public override bool Equals(object other) {
    return Equals(other as MoodContent);
  }

  public bool Equals(MoodContent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!segment_.Equals(other.segment_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= segment_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    segment_.WriteTo(output, _repeated_segment_codec);
  }

  public int CalculateSize() {
    int size = 0;
    size += segment_.CalculateSize(_repeated_segment_codec);
    return size;
  }

  public void MergeFrom(MoodContent other) {
    if (other == null) {
      return;
    }
    segment_.Add(other.segment_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          segment_.AddEntriesFrom(input, _repeated_segment_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///  The user's mood message.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MoodSetting : pb::IMessage<MoodSetting> {
  private static readonly pb::MessageParser<MoodSetting> _parser = new pb::MessageParser<MoodSetting>(() => new MoodSetting());
  public static pb::MessageParser<MoodSetting> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[54]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public MoodSetting() {
    OnConstruction();
  }

  partial void OnConstruction();

  public MoodSetting(MoodSetting other) : this() {
    MoodMessage = other.moodMessage_ != null ? other.MoodMessage.Clone() : null;
  }

  public MoodSetting Clone() {
    return new MoodSetting(this);
  }

  /// <summary>Field number for the "mood_message" field.</summary>
  public const int MoodMessageFieldNumber = 1;
  private global::MoodMessage moodMessage_;
  public global::MoodMessage MoodMessage {
    get { return moodMessage_; }
    set {
      moodMessage_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as MoodSetting);
  }

  public bool Equals(MoodSetting other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(MoodMessage, other.MoodMessage)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (moodMessage_ != null) hash ^= MoodMessage.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (moodMessage_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(MoodMessage);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (moodMessage_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoodMessage);
    }
    return size;
  }

  public void MergeFrom(MoodSetting other) {
    if (other == null) {
      return;
    }
    if (other.moodMessage_ != null) {
      if (moodMessage_ == null) {
        moodMessage_ = new global::MoodMessage();
      }
      MoodMessage.MergeFrom(other.MoodMessage);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (moodMessage_ == null) {
            moodMessage_ = new global::MoodMessage();
          }
          input.ReadMessage(moodMessage_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MoodState : pb::IMessage<MoodState> {
  private static readonly pb::MessageParser<MoodState> _parser = new pb::MessageParser<MoodState>(() => new MoodState());
  public static pb::MessageParser<MoodState> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[55]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public MoodState() {
    OnConstruction();
  }

  partial void OnConstruction();

  public MoodState(MoodState other) : this() {
    MoodSetting = other.moodSetting_ != null ? other.MoodSetting.Clone() : null;
  }

  public MoodState Clone() {
    return new MoodState(this);
  }

  /// <summary>Field number for the "mood_setting" field.</summary>
  public const int MoodSettingFieldNumber = 4;
  private global::MoodSetting moodSetting_;
  public global::MoodSetting MoodSetting {
    get { return moodSetting_; }
    set {
      moodSetting_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as MoodState);
  }

  public bool Equals(MoodState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(MoodSetting, other.MoodSetting)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (moodSetting_ != null) hash ^= MoodSetting.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (moodSetting_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(MoodSetting);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (moodSetting_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoodSetting);
    }
    return size;
  }

  public void MergeFrom(MoodState other) {
    if (other == null) {
      return;
    }
    if (other.moodSetting_ != null) {
      if (moodSetting_ == null) {
        moodSetting_ = new global::MoodSetting();
      }
      MoodSetting.MergeFrom(other.MoodSetting);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 34: {
          if (moodSetting_ == null) {
            moodSetting_ = new global::MoodSetting();
          }
          input.ReadMessage(moodSetting_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DeleteAction : pb::IMessage<DeleteAction> {
  private static readonly pb::MessageParser<DeleteAction> _parser = new pb::MessageParser<DeleteAction>(() => new DeleteAction());
  public static pb::MessageParser<DeleteAction> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[56]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public DeleteAction() {
    OnConstruction();
  }

  partial void OnConstruction();

  public DeleteAction(DeleteAction other) : this() {
    deleteActionTimestamp_ = other.deleteActionTimestamp_;
    deleteUpperBoundTimestamp_ = other.deleteUpperBoundTimestamp_;
    deleteType_ = other.deleteType_;
  }

  public DeleteAction Clone() {
    return new DeleteAction(this);
  }

  /// <summary>Field number for the "delete_action_timestamp" field.</summary>
  public const int DeleteActionTimestampFieldNumber = 1;
  private ulong deleteActionTimestamp_;
  public ulong DeleteActionTimestamp {
    get { return deleteActionTimestamp_; }
    set {
      deleteActionTimestamp_ = value;
    }
  }

  /// <summary>Field number for the "delete_upper_bound_timestamp" field.</summary>
  public const int DeleteUpperBoundTimestampFieldNumber = 2;
  private ulong deleteUpperBoundTimestamp_;
  public ulong DeleteUpperBoundTimestamp {
    get { return deleteUpperBoundTimestamp_; }
    set {
      deleteUpperBoundTimestamp_ = value;
    }
  }

  /// <summary>Field number for the "delete_type" field.</summary>
  public const int DeleteTypeFieldNumber = 3;
  private global::DeleteType deleteType_ = global::DeleteType.DELETE_TYPE_UNKNOWN;
  public global::DeleteType DeleteType {
    get { return deleteType_; }
    set {
      deleteType_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as DeleteAction);
  }

  public bool Equals(DeleteAction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeleteActionTimestamp != other.DeleteActionTimestamp) return false;
    if (DeleteUpperBoundTimestamp != other.DeleteUpperBoundTimestamp) return false;
    if (DeleteType != other.DeleteType) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (DeleteActionTimestamp != 0UL) hash ^= DeleteActionTimestamp.GetHashCode();
    if (DeleteUpperBoundTimestamp != 0UL) hash ^= DeleteUpperBoundTimestamp.GetHashCode();
    if (DeleteType != global::DeleteType.DELETE_TYPE_UNKNOWN) hash ^= DeleteType.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (DeleteActionTimestamp != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(DeleteActionTimestamp);
    }
    if (DeleteUpperBoundTimestamp != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(DeleteUpperBoundTimestamp);
    }
    if (DeleteType != global::DeleteType.DELETE_TYPE_UNKNOWN) {
      output.WriteRawTag(24);
      output.WriteEnum((int) DeleteType);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (DeleteActionTimestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DeleteActionTimestamp);
    }
    if (DeleteUpperBoundTimestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DeleteUpperBoundTimestamp);
    }
    if (DeleteType != global::DeleteType.DELETE_TYPE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeleteType);
    }
    return size;
  }

  public void MergeFrom(DeleteAction other) {
    if (other == null) {
      return;
    }
    if (other.DeleteActionTimestamp != 0UL) {
      DeleteActionTimestamp = other.DeleteActionTimestamp;
    }
    if (other.DeleteUpperBoundTimestamp != 0UL) {
      DeleteUpperBoundTimestamp = other.DeleteUpperBoundTimestamp;
    }
    if (other.DeleteType != global::DeleteType.DELETE_TYPE_UNKNOWN) {
      DeleteType = other.DeleteType;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          DeleteActionTimestamp = input.ReadUInt64();
          break;
        }
        case 16: {
          DeleteUpperBoundTimestamp = input.ReadUInt64();
          break;
        }
        case 24: {
          deleteType_ = (global::DeleteType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class InviteeID : pb::IMessage<InviteeID> {
  private static readonly pb::MessageParser<InviteeID> _parser = new pb::MessageParser<InviteeID>(() => new InviteeID());
  public static pb::MessageParser<InviteeID> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[57]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public InviteeID() {
    OnConstruction();
  }

  partial void OnConstruction();

  public InviteeID(InviteeID other) : this() {
    gaiaId_ = other.gaiaId_;
    fallbackName_ = other.fallbackName_;
  }

  public InviteeID Clone() {
    return new InviteeID(this);
  }

  /// <summary>Field number for the "gaia_id" field.</summary>
  public const int GaiaIdFieldNumber = 1;
  private string gaiaId_ = "";
  public string GaiaId {
    get { return gaiaId_; }
    set {
      gaiaId_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "fallback_name" field.</summary>
  public const int FallbackNameFieldNumber = 4;
  private string fallbackName_ = "";
  public string FallbackName {
    get { return fallbackName_; }
    set {
      fallbackName_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as InviteeID);
  }

  public bool Equals(InviteeID other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GaiaId != other.GaiaId) return false;
    if (FallbackName != other.FallbackName) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (GaiaId.Length != 0) hash ^= GaiaId.GetHashCode();
    if (FallbackName.Length != 0) hash ^= FallbackName.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (GaiaId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(GaiaId);
    }
    if (FallbackName.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(FallbackName);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (GaiaId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GaiaId);
    }
    if (FallbackName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FallbackName);
    }
    return size;
  }

  public void MergeFrom(InviteeID other) {
    if (other == null) {
      return;
    }
    if (other.GaiaId.Length != 0) {
      GaiaId = other.GaiaId;
    }
    if (other.FallbackName.Length != 0) {
      FallbackName = other.FallbackName;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          GaiaId = input.ReadString();
          break;
        }
        case 34: {
          FallbackName = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///  Describes a user's country.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Country : pb::IMessage<Country> {
  private static readonly pb::MessageParser<Country> _parser = new pb::MessageParser<Country>(() => new Country());
  public static pb::MessageParser<Country> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[58]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public Country() {
    OnConstruction();
  }

  partial void OnConstruction();

  public Country(Country other) : this() {
    regionCode_ = other.regionCode_;
    countryCode_ = other.countryCode_;
  }

  public Country Clone() {
    return new Country(this);
  }

  /// <summary>Field number for the "region_code" field.</summary>
  public const int RegionCodeFieldNumber = 1;
  private string regionCode_ = "";
  /// <summary>
  ///  Abbreviated region code (eg. "CA").
  /// </summary>
  public string RegionCode {
    get { return regionCode_; }
    set {
      regionCode_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "country_code" field.</summary>
  public const int CountryCodeFieldNumber = 2;
  private ulong countryCode_;
  /// <summary>
  ///  Country's calling code (eg. "1").
  /// </summary>
  public ulong CountryCode {
    get { return countryCode_; }
    set {
      countryCode_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as Country);
  }

  public bool Equals(Country other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RegionCode != other.RegionCode) return false;
    if (CountryCode != other.CountryCode) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (RegionCode.Length != 0) hash ^= RegionCode.GetHashCode();
    if (CountryCode != 0UL) hash ^= CountryCode.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (RegionCode.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(RegionCode);
    }
    if (CountryCode != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(CountryCode);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (RegionCode.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RegionCode);
    }
    if (CountryCode != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CountryCode);
    }
    return size;
  }

  public void MergeFrom(Country other) {
    if (other == null) {
      return;
    }
    if (other.RegionCode.Length != 0) {
      RegionCode = other.RegionCode;
    }
    if (other.CountryCode != 0UL) {
      CountryCode = other.CountryCode;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          RegionCode = input.ReadString();
          break;
        }
        case 16: {
          CountryCode = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///  Sound settings in the desktop Hangouts client.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DesktopSoundSetting : pb::IMessage<DesktopSoundSetting> {
  private static readonly pb::MessageParser<DesktopSoundSetting> _parser = new pb::MessageParser<DesktopSoundSetting>(() => new DesktopSoundSetting());
  public static pb::MessageParser<DesktopSoundSetting> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[59]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public DesktopSoundSetting() {
    OnConstruction();
  }

  partial void OnConstruction();

  public DesktopSoundSetting(DesktopSoundSetting other) : this() {
    desktopSoundState_ = other.desktopSoundState_;
    desktopRingSoundState_ = other.desktopRingSoundState_;
  }

  public DesktopSoundSetting Clone() {
    return new DesktopSoundSetting(this);
  }

  /// <summary>Field number for the "desktop_sound_state" field.</summary>
  public const int DesktopSoundStateFieldNumber = 1;
  private global::SoundState desktopSoundState_ = global::SoundState.SOUND_STATE_UNKNOWN;
  /// <summary>
  ///  Whether to play sound for incoming messages.
  /// </summary>
  public global::SoundState DesktopSoundState {
    get { return desktopSoundState_; }
    set {
      desktopSoundState_ = value;
    }
  }

  /// <summary>Field number for the "desktop_ring_sound_state" field.</summary>
  public const int DesktopRingSoundStateFieldNumber = 2;
  private global::SoundState desktopRingSoundState_ = global::SoundState.SOUND_STATE_UNKNOWN;
  /// <summary>
  ///  Whether to ring for incoming calls.
  /// </summary>
  public global::SoundState DesktopRingSoundState {
    get { return desktopRingSoundState_; }
    set {
      desktopRingSoundState_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as DesktopSoundSetting);
  }

  public bool Equals(DesktopSoundSetting other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DesktopSoundState != other.DesktopSoundState) return false;
    if (DesktopRingSoundState != other.DesktopRingSoundState) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (DesktopSoundState != global::SoundState.SOUND_STATE_UNKNOWN) hash ^= DesktopSoundState.GetHashCode();
    if (DesktopRingSoundState != global::SoundState.SOUND_STATE_UNKNOWN) hash ^= DesktopRingSoundState.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (DesktopSoundState != global::SoundState.SOUND_STATE_UNKNOWN) {
      output.WriteRawTag(8);
      output.WriteEnum((int) DesktopSoundState);
    }
    if (DesktopRingSoundState != global::SoundState.SOUND_STATE_UNKNOWN) {
      output.WriteRawTag(16);
      output.WriteEnum((int) DesktopRingSoundState);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (DesktopSoundState != global::SoundState.SOUND_STATE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DesktopSoundState);
    }
    if (DesktopRingSoundState != global::SoundState.SOUND_STATE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DesktopRingSoundState);
    }
    return size;
  }

  public void MergeFrom(DesktopSoundSetting other) {
    if (other == null) {
      return;
    }
    if (other.DesktopSoundState != global::SoundState.SOUND_STATE_UNKNOWN) {
      DesktopSoundState = other.DesktopSoundState;
    }
    if (other.DesktopRingSoundState != global::SoundState.SOUND_STATE_UNKNOWN) {
      DesktopRingSoundState = other.DesktopRingSoundState;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          desktopSoundState_ = (global::SoundState) input.ReadEnum();
          break;
        }
        case 16: {
          desktopRingSoundState_ = (global::SoundState) input.ReadEnum();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PhoneData : pb::IMessage<PhoneData> {
  private static readonly pb::MessageParser<PhoneData> _parser = new pb::MessageParser<PhoneData>(() => new PhoneData());
  public static pb::MessageParser<PhoneData> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[60]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public PhoneData() {
    OnConstruction();
  }

  partial void OnConstruction();

  public PhoneData(PhoneData other) : this() {
    phone_ = other.phone_.Clone();
    callerIdSettingsMask_ = other.callerIdSettingsMask_;
  }

  public PhoneData Clone() {
    return new PhoneData(this);
  }

  /// <summary>Field number for the "phone" field.</summary>
  public const int PhoneFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Phone> _repeated_phone_codec
      = pb::FieldCodec.ForMessage(10, global::Phone.Parser);
  private readonly pbc::RepeatedField<global::Phone> phone_ = new pbc::RepeatedField<global::Phone>();
  public pbc::RepeatedField<global::Phone> Phone {
    get { return phone_; }
  }

  /// <summary>Field number for the "caller_id_settings_mask" field.</summary>
  public const int CallerIdSettingsMaskFieldNumber = 3;
  private global::CallerIdSettingsMask callerIdSettingsMask_ = global::CallerIdSettingsMask.CALLER_ID_SETTINGS_MASK_UNKNOWN;
  public global::CallerIdSettingsMask CallerIdSettingsMask {
    get { return callerIdSettingsMask_; }
    set {
      callerIdSettingsMask_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as PhoneData);
  }

  public bool Equals(PhoneData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!phone_.Equals(other.phone_)) return false;
    if (CallerIdSettingsMask != other.CallerIdSettingsMask) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= phone_.GetHashCode();
    if (CallerIdSettingsMask != global::CallerIdSettingsMask.CALLER_ID_SETTINGS_MASK_UNKNOWN) hash ^= CallerIdSettingsMask.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    phone_.WriteTo(output, _repeated_phone_codec);
    if (CallerIdSettingsMask != global::CallerIdSettingsMask.CALLER_ID_SETTINGS_MASK_UNKNOWN) {
      output.WriteRawTag(24);
      output.WriteEnum((int) CallerIdSettingsMask);
    }
  }

  public int CalculateSize() {
    int size = 0;
    size += phone_.CalculateSize(_repeated_phone_codec);
    if (CallerIdSettingsMask != global::CallerIdSettingsMask.CALLER_ID_SETTINGS_MASK_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CallerIdSettingsMask);
    }
    return size;
  }

  public void MergeFrom(PhoneData other) {
    if (other == null) {
      return;
    }
    phone_.Add(other.phone_);
    if (other.CallerIdSettingsMask != global::CallerIdSettingsMask.CALLER_ID_SETTINGS_MASK_UNKNOWN) {
      CallerIdSettingsMask = other.CallerIdSettingsMask;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          phone_.AddEntriesFrom(input, _repeated_phone_codec);
          break;
        }
        case 24: {
          callerIdSettingsMask_ = (global::CallerIdSettingsMask) input.ReadEnum();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Phone : pb::IMessage<Phone> {
  private static readonly pb::MessageParser<Phone> _parser = new pb::MessageParser<Phone>(() => new Phone());
  public static pb::MessageParser<Phone> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[61]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public Phone() {
    OnConstruction();
  }

  partial void OnConstruction();

  public Phone(Phone other) : this() {
    PhoneNumber = other.phoneNumber_ != null ? other.PhoneNumber.Clone() : null;
    googleVoice_ = other.googleVoice_;
    verificationStatus_ = other.verificationStatus_;
    discoverable_ = other.discoverable_;
    discoverabilityStatus_ = other.discoverabilityStatus_;
    primary_ = other.primary_;
  }

  public Phone Clone() {
    return new Phone(this);
  }

  /// <summary>Field number for the "phone_number" field.</summary>
  public const int PhoneNumberFieldNumber = 1;
  private global::PhoneNumber phoneNumber_;
  public global::PhoneNumber PhoneNumber {
    get { return phoneNumber_; }
    set {
      phoneNumber_ = value;
    }
  }

  /// <summary>Field number for the "google_voice" field.</summary>
  public const int GoogleVoiceFieldNumber = 2;
  private bool googleVoice_;
  public bool GoogleVoice {
    get { return googleVoice_; }
    set {
      googleVoice_ = value;
    }
  }

  /// <summary>Field number for the "verification_status" field.</summary>
  public const int VerificationStatusFieldNumber = 3;
  private global::PhoneVerificationStatus verificationStatus_ = global::PhoneVerificationStatus.PHONE_VERIFICATION_STATUS_UNKNOWN;
  public global::PhoneVerificationStatus VerificationStatus {
    get { return verificationStatus_; }
    set {
      verificationStatus_ = value;
    }
  }

  /// <summary>Field number for the "discoverable" field.</summary>
  public const int DiscoverableFieldNumber = 4;
  private bool discoverable_;
  public bool Discoverable {
    get { return discoverable_; }
    set {
      discoverable_ = value;
    }
  }

  /// <summary>Field number for the "discoverability_status" field.</summary>
  public const int DiscoverabilityStatusFieldNumber = 5;
  private global::PhoneDiscoverabilityStatus discoverabilityStatus_ = global::PhoneDiscoverabilityStatus.PHONE_DISCOVERABILITY_STATUS_UNKNOWN;
  public global::PhoneDiscoverabilityStatus DiscoverabilityStatus {
    get { return discoverabilityStatus_; }
    set {
      discoverabilityStatus_ = value;
    }
  }

  /// <summary>Field number for the "primary" field.</summary>
  public const int PrimaryFieldNumber = 6;
  private bool primary_;
  public bool Primary {
    get { return primary_; }
    set {
      primary_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as Phone);
  }

  public bool Equals(Phone other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(PhoneNumber, other.PhoneNumber)) return false;
    if (GoogleVoice != other.GoogleVoice) return false;
    if (VerificationStatus != other.VerificationStatus) return false;
    if (Discoverable != other.Discoverable) return false;
    if (DiscoverabilityStatus != other.DiscoverabilityStatus) return false;
    if (Primary != other.Primary) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (phoneNumber_ != null) hash ^= PhoneNumber.GetHashCode();
    if (GoogleVoice != false) hash ^= GoogleVoice.GetHashCode();
    if (VerificationStatus != global::PhoneVerificationStatus.PHONE_VERIFICATION_STATUS_UNKNOWN) hash ^= VerificationStatus.GetHashCode();
    if (Discoverable != false) hash ^= Discoverable.GetHashCode();
    if (DiscoverabilityStatus != global::PhoneDiscoverabilityStatus.PHONE_DISCOVERABILITY_STATUS_UNKNOWN) hash ^= DiscoverabilityStatus.GetHashCode();
    if (Primary != false) hash ^= Primary.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (phoneNumber_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(PhoneNumber);
    }
    if (GoogleVoice != false) {
      output.WriteRawTag(16);
      output.WriteBool(GoogleVoice);
    }
    if (VerificationStatus != global::PhoneVerificationStatus.PHONE_VERIFICATION_STATUS_UNKNOWN) {
      output.WriteRawTag(24);
      output.WriteEnum((int) VerificationStatus);
    }
    if (Discoverable != false) {
      output.WriteRawTag(32);
      output.WriteBool(Discoverable);
    }
    if (DiscoverabilityStatus != global::PhoneDiscoverabilityStatus.PHONE_DISCOVERABILITY_STATUS_UNKNOWN) {
      output.WriteRawTag(40);
      output.WriteEnum((int) DiscoverabilityStatus);
    }
    if (Primary != false) {
      output.WriteRawTag(48);
      output.WriteBool(Primary);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (phoneNumber_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PhoneNumber);
    }
    if (GoogleVoice != false) {
      size += 1 + 1;
    }
    if (VerificationStatus != global::PhoneVerificationStatus.PHONE_VERIFICATION_STATUS_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VerificationStatus);
    }
    if (Discoverable != false) {
      size += 1 + 1;
    }
    if (DiscoverabilityStatus != global::PhoneDiscoverabilityStatus.PHONE_DISCOVERABILITY_STATUS_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DiscoverabilityStatus);
    }
    if (Primary != false) {
      size += 1 + 1;
    }
    return size;
  }

  public void MergeFrom(Phone other) {
    if (other == null) {
      return;
    }
    if (other.phoneNumber_ != null) {
      if (phoneNumber_ == null) {
        phoneNumber_ = new global::PhoneNumber();
      }
      PhoneNumber.MergeFrom(other.PhoneNumber);
    }
    if (other.GoogleVoice != false) {
      GoogleVoice = other.GoogleVoice;
    }
    if (other.VerificationStatus != global::PhoneVerificationStatus.PHONE_VERIFICATION_STATUS_UNKNOWN) {
      VerificationStatus = other.VerificationStatus;
    }
    if (other.Discoverable != false) {
      Discoverable = other.Discoverable;
    }
    if (other.DiscoverabilityStatus != global::PhoneDiscoverabilityStatus.PHONE_DISCOVERABILITY_STATUS_UNKNOWN) {
      DiscoverabilityStatus = other.DiscoverabilityStatus;
    }
    if (other.Primary != false) {
      Primary = other.Primary;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (phoneNumber_ == null) {
            phoneNumber_ = new global::PhoneNumber();
          }
          input.ReadMessage(phoneNumber_);
          break;
        }
        case 16: {
          GoogleVoice = input.ReadBool();
          break;
        }
        case 24: {
          verificationStatus_ = (global::PhoneVerificationStatus) input.ReadEnum();
          break;
        }
        case 32: {
          Discoverable = input.ReadBool();
          break;
        }
        case 40: {
          discoverabilityStatus_ = (global::PhoneDiscoverabilityStatus) input.ReadEnum();
          break;
        }
        case 48: {
          Primary = input.ReadBool();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class I18nData : pb::IMessage<I18nData> {
  private static readonly pb::MessageParser<I18nData> _parser = new pb::MessageParser<I18nData>(() => new I18nData());
  public static pb::MessageParser<I18nData> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[62]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public I18nData() {
    OnConstruction();
  }

  partial void OnConstruction();

  public I18nData(I18nData other) : this() {
    nationalNumber_ = other.nationalNumber_;
    internationalNumber_ = other.internationalNumber_;
    countryCode_ = other.countryCode_;
    regionCode_ = other.regionCode_;
    isValid_ = other.isValid_;
    validationResult_ = other.validationResult_;
  }

  public I18nData Clone() {
    return new I18nData(this);
  }

  /// <summary>Field number for the "national_number" field.</summary>
  public const int NationalNumberFieldNumber = 1;
  private string nationalNumber_ = "";
  public string NationalNumber {
    get { return nationalNumber_; }
    set {
      nationalNumber_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "international_number" field.</summary>
  public const int InternationalNumberFieldNumber = 2;
  private string internationalNumber_ = "";
  public string InternationalNumber {
    get { return internationalNumber_; }
    set {
      internationalNumber_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "country_code" field.</summary>
  public const int CountryCodeFieldNumber = 3;
  private ulong countryCode_;
  public ulong CountryCode {
    get { return countryCode_; }
    set {
      countryCode_ = value;
    }
  }

  /// <summary>Field number for the "region_code" field.</summary>
  public const int RegionCodeFieldNumber = 4;
  private string regionCode_ = "";
  public string RegionCode {
    get { return regionCode_; }
    set {
      regionCode_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "is_valid" field.</summary>
  public const int IsValidFieldNumber = 5;
  private bool isValid_;
  public bool IsValid {
    get { return isValid_; }
    set {
      isValid_ = value;
    }
  }

  /// <summary>Field number for the "validation_result" field.</summary>
  public const int ValidationResultFieldNumber = 6;
  private global::PhoneValidationResult validationResult_ = global::PhoneValidationResult.PHONE_VALIDATION_RESULT_IS_POSSIBLE;
  public global::PhoneValidationResult ValidationResult {
    get { return validationResult_; }
    set {
      validationResult_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as I18nData);
  }

  public bool Equals(I18nData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NationalNumber != other.NationalNumber) return false;
    if (InternationalNumber != other.InternationalNumber) return false;
    if (CountryCode != other.CountryCode) return false;
    if (RegionCode != other.RegionCode) return false;
    if (IsValid != other.IsValid) return false;
    if (ValidationResult != other.ValidationResult) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (NationalNumber.Length != 0) hash ^= NationalNumber.GetHashCode();
    if (InternationalNumber.Length != 0) hash ^= InternationalNumber.GetHashCode();
    if (CountryCode != 0UL) hash ^= CountryCode.GetHashCode();
    if (RegionCode.Length != 0) hash ^= RegionCode.GetHashCode();
    if (IsValid != false) hash ^= IsValid.GetHashCode();
    if (ValidationResult != global::PhoneValidationResult.PHONE_VALIDATION_RESULT_IS_POSSIBLE) hash ^= ValidationResult.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (NationalNumber.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(NationalNumber);
    }
    if (InternationalNumber.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(InternationalNumber);
    }
    if (CountryCode != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(CountryCode);
    }
    if (RegionCode.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(RegionCode);
    }
    if (IsValid != false) {
      output.WriteRawTag(40);
      output.WriteBool(IsValid);
    }
    if (ValidationResult != global::PhoneValidationResult.PHONE_VALIDATION_RESULT_IS_POSSIBLE) {
      output.WriteRawTag(48);
      output.WriteEnum((int) ValidationResult);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (NationalNumber.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NationalNumber);
    }
    if (InternationalNumber.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(InternationalNumber);
    }
    if (CountryCode != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CountryCode);
    }
    if (RegionCode.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RegionCode);
    }
    if (IsValid != false) {
      size += 1 + 1;
    }
    if (ValidationResult != global::PhoneValidationResult.PHONE_VALIDATION_RESULT_IS_POSSIBLE) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ValidationResult);
    }
    return size;
  }

  public void MergeFrom(I18nData other) {
    if (other == null) {
      return;
    }
    if (other.NationalNumber.Length != 0) {
      NationalNumber = other.NationalNumber;
    }
    if (other.InternationalNumber.Length != 0) {
      InternationalNumber = other.InternationalNumber;
    }
    if (other.CountryCode != 0UL) {
      CountryCode = other.CountryCode;
    }
    if (other.RegionCode.Length != 0) {
      RegionCode = other.RegionCode;
    }
    if (other.IsValid != false) {
      IsValid = other.IsValid;
    }
    if (other.ValidationResult != global::PhoneValidationResult.PHONE_VALIDATION_RESULT_IS_POSSIBLE) {
      ValidationResult = other.ValidationResult;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          NationalNumber = input.ReadString();
          break;
        }
        case 18: {
          InternationalNumber = input.ReadString();
          break;
        }
        case 24: {
          CountryCode = input.ReadUInt64();
          break;
        }
        case 34: {
          RegionCode = input.ReadString();
          break;
        }
        case 40: {
          IsValid = input.ReadBool();
          break;
        }
        case 48: {
          validationResult_ = (global::PhoneValidationResult) input.ReadEnum();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PhoneNumber : pb::IMessage<PhoneNumber> {
  private static readonly pb::MessageParser<PhoneNumber> _parser = new pb::MessageParser<PhoneNumber>(() => new PhoneNumber());
  public static pb::MessageParser<PhoneNumber> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[63]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public PhoneNumber() {
    OnConstruction();
  }

  partial void OnConstruction();

  public PhoneNumber(PhoneNumber other) : this() {
    e164_ = other.e164_;
    I18NData = other.i18NData_ != null ? other.I18NData.Clone() : null;
  }

  public PhoneNumber Clone() {
    return new PhoneNumber(this);
  }

  /// <summary>Field number for the "e164" field.</summary>
  public const int E164FieldNumber = 1;
  private string e164_ = "";
  /// <summary>
  ///  Phone number as string (eg. "+15551234567").
  /// </summary>
  public string E164 {
    get { return e164_; }
    set {
      e164_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "i18n_data" field.</summary>
  public const int I18NDataFieldNumber = 2;
  private global::I18nData i18NData_;
  public global::I18nData I18NData {
    get { return i18NData_; }
    set {
      i18NData_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as PhoneNumber);
  }

  public bool Equals(PhoneNumber other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (E164 != other.E164) return false;
    if (!object.Equals(I18NData, other.I18NData)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (E164.Length != 0) hash ^= E164.GetHashCode();
    if (i18NData_ != null) hash ^= I18NData.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (E164.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(E164);
    }
    if (i18NData_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(I18NData);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (E164.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(E164);
    }
    if (i18NData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(I18NData);
    }
    return size;
  }

  public void MergeFrom(PhoneNumber other) {
    if (other == null) {
      return;
    }
    if (other.E164.Length != 0) {
      E164 = other.E164;
    }
    if (other.i18NData_ != null) {
      if (i18NData_ == null) {
        i18NData_ = new global::I18nData();
      }
      I18NData.MergeFrom(other.I18NData);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          E164 = input.ReadString();
          break;
        }
        case 18: {
          if (i18NData_ == null) {
            i18NData_ = new global::I18nData();
          }
          input.ReadMessage(i18NData_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SuggestedContactGroupHash : pb::IMessage<SuggestedContactGroupHash> {
  private static readonly pb::MessageParser<SuggestedContactGroupHash> _parser = new pb::MessageParser<SuggestedContactGroupHash>(() => new SuggestedContactGroupHash());
  public static pb::MessageParser<SuggestedContactGroupHash> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[64]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SuggestedContactGroupHash() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SuggestedContactGroupHash(SuggestedContactGroupHash other) : this() {
    maxResults_ = other.maxResults_;
    hash_ = other.hash_;
  }

  public SuggestedContactGroupHash Clone() {
    return new SuggestedContactGroupHash(this);
  }

  /// <summary>Field number for the "max_results" field.</summary>
  public const int MaxResultsFieldNumber = 1;
  private ulong maxResults_;
  /// <summary>
  ///  Number of results to return from this group.
  /// </summary>
  public ulong MaxResults {
    get { return maxResults_; }
    set {
      maxResults_ = value;
    }
  }

  /// <summary>Field number for the "hash" field.</summary>
  public const int HashFieldNumber = 2;
  private pb::ByteString hash_ = pb::ByteString.Empty;
  /// <summary>
  ///  A 4-byte hash.
  /// </summary>
  public pb::ByteString Hash {
    get { return hash_; }
    set {
      hash_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SuggestedContactGroupHash);
  }

  public bool Equals(SuggestedContactGroupHash other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MaxResults != other.MaxResults) return false;
    if (Hash != other.Hash) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (MaxResults != 0UL) hash ^= MaxResults.GetHashCode();
    if (Hash.Length != 0) hash ^= Hash.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (MaxResults != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(MaxResults);
    }
    if (Hash.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Hash);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (MaxResults != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxResults);
    }
    if (Hash.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
    }
    return size;
  }

  public void MergeFrom(SuggestedContactGroupHash other) {
    if (other == null) {
      return;
    }
    if (other.MaxResults != 0UL) {
      MaxResults = other.MaxResults;
    }
    if (other.Hash.Length != 0) {
      Hash = other.Hash;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          MaxResults = input.ReadUInt64();
          break;
        }
        case 18: {
          Hash = input.ReadBytes();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SuggestedContact : pb::IMessage<SuggestedContact> {
  private static readonly pb::MessageParser<SuggestedContact> _parser = new pb::MessageParser<SuggestedContact>(() => new SuggestedContact());
  public static pb::MessageParser<SuggestedContact> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[65]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SuggestedContact() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SuggestedContact(SuggestedContact other) : this() {
    Entity = other.entity_ != null ? other.Entity.Clone() : null;
    invitationStatus_ = other.invitationStatus_;
  }

  public SuggestedContact Clone() {
    return new SuggestedContact(this);
  }

  /// <summary>Field number for the "entity" field.</summary>
  public const int EntityFieldNumber = 1;
  private global::Entity entity_;
  public global::Entity Entity {
    get { return entity_; }
    set {
      entity_ = value;
    }
  }

  /// <summary>Field number for the "invitation_status" field.</summary>
  public const int InvitationStatusFieldNumber = 2;
  private global::InvitationStatus invitationStatus_ = global::InvitationStatus.INVITATION_STATUS_UNKNOWN;
  public global::InvitationStatus InvitationStatus {
    get { return invitationStatus_; }
    set {
      invitationStatus_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SuggestedContact);
  }

  public bool Equals(SuggestedContact other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Entity, other.Entity)) return false;
    if (InvitationStatus != other.InvitationStatus) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (entity_ != null) hash ^= Entity.GetHashCode();
    if (InvitationStatus != global::InvitationStatus.INVITATION_STATUS_UNKNOWN) hash ^= InvitationStatus.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (entity_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Entity);
    }
    if (InvitationStatus != global::InvitationStatus.INVITATION_STATUS_UNKNOWN) {
      output.WriteRawTag(16);
      output.WriteEnum((int) InvitationStatus);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (entity_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Entity);
    }
    if (InvitationStatus != global::InvitationStatus.INVITATION_STATUS_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InvitationStatus);
    }
    return size;
  }

  public void MergeFrom(SuggestedContact other) {
    if (other == null) {
      return;
    }
    if (other.entity_ != null) {
      if (entity_ == null) {
        entity_ = new global::Entity();
      }
      Entity.MergeFrom(other.Entity);
    }
    if (other.InvitationStatus != global::InvitationStatus.INVITATION_STATUS_UNKNOWN) {
      InvitationStatus = other.InvitationStatus;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (entity_ == null) {
            entity_ = new global::Entity();
          }
          input.ReadMessage(entity_);
          break;
        }
        case 16: {
          invitationStatus_ = (global::InvitationStatus) input.ReadEnum();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SuggestedContactGroup : pb::IMessage<SuggestedContactGroup> {
  private static readonly pb::MessageParser<SuggestedContactGroup> _parser = new pb::MessageParser<SuggestedContactGroup>(() => new SuggestedContactGroup());
  public static pb::MessageParser<SuggestedContactGroup> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[66]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SuggestedContactGroup() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SuggestedContactGroup(SuggestedContactGroup other) : this() {
    hashMatched_ = other.hashMatched_;
    hash_ = other.hash_;
    contact_ = other.contact_.Clone();
  }

  public SuggestedContactGroup Clone() {
    return new SuggestedContactGroup(this);
  }

  /// <summary>Field number for the "hash_matched" field.</summary>
  public const int HashMatchedFieldNumber = 1;
  private bool hashMatched_;
  public bool HashMatched {
    get { return hashMatched_; }
    set {
      hashMatched_ = value;
    }
  }

  /// <summary>Field number for the "hash" field.</summary>
  public const int HashFieldNumber = 2;
  private pb::ByteString hash_ = pb::ByteString.Empty;
  /// <summary>
  ///  A 4-byte hash.
  /// </summary>
  public pb::ByteString Hash {
    get { return hash_; }
    set {
      hash_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "contact" field.</summary>
  public const int ContactFieldNumber = 3;
  private static readonly pb::FieldCodec<global::SuggestedContact> _repeated_contact_codec
      = pb::FieldCodec.ForMessage(26, global::SuggestedContact.Parser);
  private readonly pbc::RepeatedField<global::SuggestedContact> contact_ = new pbc::RepeatedField<global::SuggestedContact>();
  public pbc::RepeatedField<global::SuggestedContact> Contact {
    get { return contact_; }
  }

  public override bool Equals(object other) {
    return Equals(other as SuggestedContactGroup);
  }

  public bool Equals(SuggestedContactGroup other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HashMatched != other.HashMatched) return false;
    if (Hash != other.Hash) return false;
    if(!contact_.Equals(other.contact_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (HashMatched != false) hash ^= HashMatched.GetHashCode();
    if (Hash.Length != 0) hash ^= Hash.GetHashCode();
    hash ^= contact_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (HashMatched != false) {
      output.WriteRawTag(8);
      output.WriteBool(HashMatched);
    }
    if (Hash.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Hash);
    }
    contact_.WriteTo(output, _repeated_contact_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (HashMatched != false) {
      size += 1 + 1;
    }
    if (Hash.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
    }
    size += contact_.CalculateSize(_repeated_contact_codec);
    return size;
  }

  public void MergeFrom(SuggestedContactGroup other) {
    if (other == null) {
      return;
    }
    if (other.HashMatched != false) {
      HashMatched = other.HashMatched;
    }
    if (other.Hash.Length != 0) {
      Hash = other.Hash;
    }
    contact_.Add(other.contact_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          HashMatched = input.ReadBool();
          break;
        }
        case 18: {
          Hash = input.ReadBytes();
          break;
        }
        case 26: {
          contact_.AddEntriesFrom(input, _repeated_contact_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///  Pushed from the server to the client to notify it of state changes. Includes
///  exactly one type of notification, and ly updates the attributes of a
///  conversation.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StateUpdate : pb::IMessage<StateUpdate> {
  private static readonly pb::MessageParser<StateUpdate> _parser = new pb::MessageParser<StateUpdate>(() => new StateUpdate());
  public static pb::MessageParser<StateUpdate> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[67]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public StateUpdate() {
    OnConstruction();
  }

  partial void OnConstruction();

  public StateUpdate(StateUpdate other) : this() {
    StateUpdateHeader = other.stateUpdateHeader_ != null ? other.StateUpdateHeader.Clone() : null;
    Conversation = other.conversation_ != null ? other.Conversation.Clone() : null;
    switch (other.StateUpdateCase) {
      case StateUpdateOneofCase.EventNotification:
        EventNotification = other.EventNotification.Clone();
        break;
      case StateUpdateOneofCase.FocusNotification:
        FocusNotification = other.FocusNotification.Clone();
        break;
      case StateUpdateOneofCase.TypingNotification:
        TypingNotification = other.TypingNotification.Clone();
        break;
      case StateUpdateOneofCase.NotificationLevelNotification:
        NotificationLevelNotification = other.NotificationLevelNotification.Clone();
        break;
      case StateUpdateOneofCase.ReplyToInviteNotification:
        ReplyToInviteNotification = other.ReplyToInviteNotification.Clone();
        break;
      case StateUpdateOneofCase.WatermarkNotification:
        WatermarkNotification = other.WatermarkNotification.Clone();
        break;
      case StateUpdateOneofCase.ViewModification:
        ViewModification = other.ViewModification.Clone();
        break;
      case StateUpdateOneofCase.EasterEggNotification:
        EasterEggNotification = other.EasterEggNotification.Clone();
        break;
      case StateUpdateOneofCase.SelfPresenceNotification:
        SelfPresenceNotification = other.SelfPresenceNotification.Clone();
        break;
      case StateUpdateOneofCase.DeleteNotification:
        DeleteNotification = other.DeleteNotification.Clone();
        break;
      case StateUpdateOneofCase.PresenceNotification:
        PresenceNotification = other.PresenceNotification.Clone();
        break;
      case StateUpdateOneofCase.BlockNotification:
        BlockNotification = other.BlockNotification.Clone();
        break;
      case StateUpdateOneofCase.NotificationSettingNotification:
        NotificationSettingNotification = other.NotificationSettingNotification.Clone();
        break;
      case StateUpdateOneofCase.RichPresenceEnabledStateNotification:
        RichPresenceEnabledStateNotification = other.RichPresenceEnabledStateNotification.Clone();
        break;
    }

  }

  public StateUpdate Clone() {
    return new StateUpdate(this);
  }

  /// <summary>Field number for the "state_update_header" field.</summary>
  public const int StateUpdateHeaderFieldNumber = 1;
  private global::StateUpdateHeader stateUpdateHeader_;
  public global::StateUpdateHeader StateUpdateHeader {
    get { return stateUpdateHeader_; }
    set {
      stateUpdateHeader_ = value;
    }
  }

  /// <summary>Field number for the "conversation" field.</summary>
  public const int ConversationFieldNumber = 13;
  private global::Conversation conversation_;
  /// <summary>
  ///  If set, includes conversation attributes that have been updated by the
  ///  notification.
  /// </summary>
  public global::Conversation Conversation {
    get { return conversation_; }
    set {
      conversation_ = value;
    }
  }

  /// <summary>Field number for the "event_notification" field.</summary>
  public const int EventNotificationFieldNumber = 3;
  public global::EventNotification EventNotification {
    get { return stateUpdateCase_ == StateUpdateOneofCase.EventNotification ? (global::EventNotification) stateUpdate_ : null; }
    set {
      stateUpdate_ = value;
      stateUpdateCase_ = value == null ? StateUpdateOneofCase.None : StateUpdateOneofCase.EventNotification;
    }
  }

  /// <summary>Field number for the "focus_notification" field.</summary>
  public const int FocusNotificationFieldNumber = 4;
  public global::SetFocusNotification FocusNotification {
    get { return stateUpdateCase_ == StateUpdateOneofCase.FocusNotification ? (global::SetFocusNotification) stateUpdate_ : null; }
    set {
      stateUpdate_ = value;
      stateUpdateCase_ = value == null ? StateUpdateOneofCase.None : StateUpdateOneofCase.FocusNotification;
    }
  }

  /// <summary>Field number for the "typing_notification" field.</summary>
  public const int TypingNotificationFieldNumber = 5;
  public global::SetTypingNotification TypingNotification {
    get { return stateUpdateCase_ == StateUpdateOneofCase.TypingNotification ? (global::SetTypingNotification) stateUpdate_ : null; }
    set {
      stateUpdate_ = value;
      stateUpdateCase_ = value == null ? StateUpdateOneofCase.None : StateUpdateOneofCase.TypingNotification;
    }
  }

  /// <summary>Field number for the "notification_level_notification" field.</summary>
  public const int NotificationLevelNotificationFieldNumber = 6;
  public global::SetConversationNotificationLevelNotification NotificationLevelNotification {
    get { return stateUpdateCase_ == StateUpdateOneofCase.NotificationLevelNotification ? (global::SetConversationNotificationLevelNotification) stateUpdate_ : null; }
    set {
      stateUpdate_ = value;
      stateUpdateCase_ = value == null ? StateUpdateOneofCase.None : StateUpdateOneofCase.NotificationLevelNotification;
    }
  }

  /// <summary>Field number for the "reply_to_invite_notification" field.</summary>
  public const int ReplyToInviteNotificationFieldNumber = 7;
  public global::ReplyToInviteNotification ReplyToInviteNotification {
    get { return stateUpdateCase_ == StateUpdateOneofCase.ReplyToInviteNotification ? (global::ReplyToInviteNotification) stateUpdate_ : null; }
    set {
      stateUpdate_ = value;
      stateUpdateCase_ = value == null ? StateUpdateOneofCase.None : StateUpdateOneofCase.ReplyToInviteNotification;
    }
  }

  /// <summary>Field number for the "watermark_notification" field.</summary>
  public const int WatermarkNotificationFieldNumber = 8;
  public global::WatermarkNotification WatermarkNotification {
    get { return stateUpdateCase_ == StateUpdateOneofCase.WatermarkNotification ? (global::WatermarkNotification) stateUpdate_ : null; }
    set {
      stateUpdate_ = value;
      stateUpdateCase_ = value == null ? StateUpdateOneofCase.None : StateUpdateOneofCase.WatermarkNotification;
    }
  }

  /// <summary>Field number for the "view_modification" field.</summary>
  public const int ViewModificationFieldNumber = 11;
  public global::ConversationViewModification ViewModification {
    get { return stateUpdateCase_ == StateUpdateOneofCase.ViewModification ? (global::ConversationViewModification) stateUpdate_ : null; }
    set {
      stateUpdate_ = value;
      stateUpdateCase_ = value == null ? StateUpdateOneofCase.None : StateUpdateOneofCase.ViewModification;
    }
  }

  /// <summary>Field number for the "easter_egg_notification" field.</summary>
  public const int EasterEggNotificationFieldNumber = 12;
  public global::EasterEggNotification EasterEggNotification {
    get { return stateUpdateCase_ == StateUpdateOneofCase.EasterEggNotification ? (global::EasterEggNotification) stateUpdate_ : null; }
    set {
      stateUpdate_ = value;
      stateUpdateCase_ = value == null ? StateUpdateOneofCase.None : StateUpdateOneofCase.EasterEggNotification;
    }
  }

  /// <summary>Field number for the "self_presence_notification" field.</summary>
  public const int SelfPresenceNotificationFieldNumber = 14;
  public global::SelfPresenceNotification SelfPresenceNotification {
    get { return stateUpdateCase_ == StateUpdateOneofCase.SelfPresenceNotification ? (global::SelfPresenceNotification) stateUpdate_ : null; }
    set {
      stateUpdate_ = value;
      stateUpdateCase_ = value == null ? StateUpdateOneofCase.None : StateUpdateOneofCase.SelfPresenceNotification;
    }
  }

  /// <summary>Field number for the "delete_notification" field.</summary>
  public const int DeleteNotificationFieldNumber = 15;
  public global::DeleteActionNotification DeleteNotification {
    get { return stateUpdateCase_ == StateUpdateOneofCase.DeleteNotification ? (global::DeleteActionNotification) stateUpdate_ : null; }
    set {
      stateUpdate_ = value;
      stateUpdateCase_ = value == null ? StateUpdateOneofCase.None : StateUpdateOneofCase.DeleteNotification;
    }
  }

  /// <summary>Field number for the "presence_notification" field.</summary>
  public const int PresenceNotificationFieldNumber = 16;
  public global::PresenceNotification PresenceNotification {
    get { return stateUpdateCase_ == StateUpdateOneofCase.PresenceNotification ? (global::PresenceNotification) stateUpdate_ : null; }
    set {
      stateUpdate_ = value;
      stateUpdateCase_ = value == null ? StateUpdateOneofCase.None : StateUpdateOneofCase.PresenceNotification;
    }
  }

  /// <summary>Field number for the "block_notification" field.</summary>
  public const int BlockNotificationFieldNumber = 17;
  public global::BlockNotification BlockNotification {
    get { return stateUpdateCase_ == StateUpdateOneofCase.BlockNotification ? (global::BlockNotification) stateUpdate_ : null; }
    set {
      stateUpdate_ = value;
      stateUpdateCase_ = value == null ? StateUpdateOneofCase.None : StateUpdateOneofCase.BlockNotification;
    }
  }

  /// <summary>Field number for the "notification_setting_notification" field.</summary>
  public const int NotificationSettingNotificationFieldNumber = 19;
  public global::SetNotificationSettingNotification NotificationSettingNotification {
    get { return stateUpdateCase_ == StateUpdateOneofCase.NotificationSettingNotification ? (global::SetNotificationSettingNotification) stateUpdate_ : null; }
    set {
      stateUpdate_ = value;
      stateUpdateCase_ = value == null ? StateUpdateOneofCase.None : StateUpdateOneofCase.NotificationSettingNotification;
    }
  }

  /// <summary>Field number for the "rich_presence_enabled_state_notification" field.</summary>
  public const int RichPresenceEnabledStateNotificationFieldNumber = 20;
  public global::RichPresenceEnabledStateNotification RichPresenceEnabledStateNotification {
    get { return stateUpdateCase_ == StateUpdateOneofCase.RichPresenceEnabledStateNotification ? (global::RichPresenceEnabledStateNotification) stateUpdate_ : null; }
    set {
      stateUpdate_ = value;
      stateUpdateCase_ = value == null ? StateUpdateOneofCase.None : StateUpdateOneofCase.RichPresenceEnabledStateNotification;
    }
  }

  private object stateUpdate_;
  /// <summary>Enum of possible cases for the "state_update" oneof.</summary>
  public enum StateUpdateOneofCase {
    None = 0,
    EventNotification = 3,
    FocusNotification = 4,
    TypingNotification = 5,
    NotificationLevelNotification = 6,
    ReplyToInviteNotification = 7,
    WatermarkNotification = 8,
    ViewModification = 11,
    EasterEggNotification = 12,
    SelfPresenceNotification = 14,
    DeleteNotification = 15,
    PresenceNotification = 16,
    BlockNotification = 17,
    NotificationSettingNotification = 19,
    RichPresenceEnabledStateNotification = 20,
  }
  private StateUpdateOneofCase stateUpdateCase_ = StateUpdateOneofCase.None;
  public StateUpdateOneofCase StateUpdateCase {
    get { return stateUpdateCase_; }
  }

  public void ClearStateUpdate() {
    stateUpdateCase_ = StateUpdateOneofCase.None;
    stateUpdate_ = null;
  }

  public override bool Equals(object other) {
    return Equals(other as StateUpdate);
  }

  public bool Equals(StateUpdate other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(StateUpdateHeader, other.StateUpdateHeader)) return false;
    if (!object.Equals(Conversation, other.Conversation)) return false;
    if (!object.Equals(EventNotification, other.EventNotification)) return false;
    if (!object.Equals(FocusNotification, other.FocusNotification)) return false;
    if (!object.Equals(TypingNotification, other.TypingNotification)) return false;
    if (!object.Equals(NotificationLevelNotification, other.NotificationLevelNotification)) return false;
    if (!object.Equals(ReplyToInviteNotification, other.ReplyToInviteNotification)) return false;
    if (!object.Equals(WatermarkNotification, other.WatermarkNotification)) return false;
    if (!object.Equals(ViewModification, other.ViewModification)) return false;
    if (!object.Equals(EasterEggNotification, other.EasterEggNotification)) return false;
    if (!object.Equals(SelfPresenceNotification, other.SelfPresenceNotification)) return false;
    if (!object.Equals(DeleteNotification, other.DeleteNotification)) return false;
    if (!object.Equals(PresenceNotification, other.PresenceNotification)) return false;
    if (!object.Equals(BlockNotification, other.BlockNotification)) return false;
    if (!object.Equals(NotificationSettingNotification, other.NotificationSettingNotification)) return false;
    if (!object.Equals(RichPresenceEnabledStateNotification, other.RichPresenceEnabledStateNotification)) return false;
    if (StateUpdateCase != other.StateUpdateCase) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (stateUpdateHeader_ != null) hash ^= StateUpdateHeader.GetHashCode();
    if (conversation_ != null) hash ^= Conversation.GetHashCode();
    if (stateUpdateCase_ == StateUpdateOneofCase.EventNotification) hash ^= EventNotification.GetHashCode();
    if (stateUpdateCase_ == StateUpdateOneofCase.FocusNotification) hash ^= FocusNotification.GetHashCode();
    if (stateUpdateCase_ == StateUpdateOneofCase.TypingNotification) hash ^= TypingNotification.GetHashCode();
    if (stateUpdateCase_ == StateUpdateOneofCase.NotificationLevelNotification) hash ^= NotificationLevelNotification.GetHashCode();
    if (stateUpdateCase_ == StateUpdateOneofCase.ReplyToInviteNotification) hash ^= ReplyToInviteNotification.GetHashCode();
    if (stateUpdateCase_ == StateUpdateOneofCase.WatermarkNotification) hash ^= WatermarkNotification.GetHashCode();
    if (stateUpdateCase_ == StateUpdateOneofCase.ViewModification) hash ^= ViewModification.GetHashCode();
    if (stateUpdateCase_ == StateUpdateOneofCase.EasterEggNotification) hash ^= EasterEggNotification.GetHashCode();
    if (stateUpdateCase_ == StateUpdateOneofCase.SelfPresenceNotification) hash ^= SelfPresenceNotification.GetHashCode();
    if (stateUpdateCase_ == StateUpdateOneofCase.DeleteNotification) hash ^= DeleteNotification.GetHashCode();
    if (stateUpdateCase_ == StateUpdateOneofCase.PresenceNotification) hash ^= PresenceNotification.GetHashCode();
    if (stateUpdateCase_ == StateUpdateOneofCase.BlockNotification) hash ^= BlockNotification.GetHashCode();
    if (stateUpdateCase_ == StateUpdateOneofCase.NotificationSettingNotification) hash ^= NotificationSettingNotification.GetHashCode();
    if (stateUpdateCase_ == StateUpdateOneofCase.RichPresenceEnabledStateNotification) hash ^= RichPresenceEnabledStateNotification.GetHashCode();
    hash ^= (int) stateUpdateCase_;
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (stateUpdateHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(StateUpdateHeader);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.EventNotification) {
      output.WriteRawTag(26);
      output.WriteMessage(EventNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.FocusNotification) {
      output.WriteRawTag(34);
      output.WriteMessage(FocusNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.TypingNotification) {
      output.WriteRawTag(42);
      output.WriteMessage(TypingNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.NotificationLevelNotification) {
      output.WriteRawTag(50);
      output.WriteMessage(NotificationLevelNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.ReplyToInviteNotification) {
      output.WriteRawTag(58);
      output.WriteMessage(ReplyToInviteNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.WatermarkNotification) {
      output.WriteRawTag(66);
      output.WriteMessage(WatermarkNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.ViewModification) {
      output.WriteRawTag(90);
      output.WriteMessage(ViewModification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.EasterEggNotification) {
      output.WriteRawTag(98);
      output.WriteMessage(EasterEggNotification);
    }
    if (conversation_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(Conversation);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.SelfPresenceNotification) {
      output.WriteRawTag(114);
      output.WriteMessage(SelfPresenceNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.DeleteNotification) {
      output.WriteRawTag(122);
      output.WriteMessage(DeleteNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.PresenceNotification) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(PresenceNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.BlockNotification) {
      output.WriteRawTag(138, 1);
      output.WriteMessage(BlockNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.NotificationSettingNotification) {
      output.WriteRawTag(154, 1);
      output.WriteMessage(NotificationSettingNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.RichPresenceEnabledStateNotification) {
      output.WriteRawTag(162, 1);
      output.WriteMessage(RichPresenceEnabledStateNotification);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (stateUpdateHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StateUpdateHeader);
    }
    if (conversation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Conversation);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.EventNotification) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.FocusNotification) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FocusNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.TypingNotification) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TypingNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.NotificationLevelNotification) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotificationLevelNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.ReplyToInviteNotification) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReplyToInviteNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.WatermarkNotification) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(WatermarkNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.ViewModification) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ViewModification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.EasterEggNotification) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EasterEggNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.SelfPresenceNotification) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfPresenceNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.DeleteNotification) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeleteNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.PresenceNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(PresenceNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.BlockNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(BlockNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.NotificationSettingNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(NotificationSettingNotification);
    }
    if (stateUpdateCase_ == StateUpdateOneofCase.RichPresenceEnabledStateNotification) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(RichPresenceEnabledStateNotification);
    }
    return size;
  }

  public void MergeFrom(StateUpdate other) {
    if (other == null) {
      return;
    }
    if (other.stateUpdateHeader_ != null) {
      if (stateUpdateHeader_ == null) {
        stateUpdateHeader_ = new global::StateUpdateHeader();
      }
      StateUpdateHeader.MergeFrom(other.StateUpdateHeader);
    }
    if (other.conversation_ != null) {
      if (conversation_ == null) {
        conversation_ = new global::Conversation();
      }
      Conversation.MergeFrom(other.Conversation);
    }
    switch (other.StateUpdateCase) {
      case StateUpdateOneofCase.EventNotification:
        EventNotification = other.EventNotification;
        break;
      case StateUpdateOneofCase.FocusNotification:
        FocusNotification = other.FocusNotification;
        break;
      case StateUpdateOneofCase.TypingNotification:
        TypingNotification = other.TypingNotification;
        break;
      case StateUpdateOneofCase.NotificationLevelNotification:
        NotificationLevelNotification = other.NotificationLevelNotification;
        break;
      case StateUpdateOneofCase.ReplyToInviteNotification:
        ReplyToInviteNotification = other.ReplyToInviteNotification;
        break;
      case StateUpdateOneofCase.WatermarkNotification:
        WatermarkNotification = other.WatermarkNotification;
        break;
      case StateUpdateOneofCase.ViewModification:
        ViewModification = other.ViewModification;
        break;
      case StateUpdateOneofCase.EasterEggNotification:
        EasterEggNotification = other.EasterEggNotification;
        break;
      case StateUpdateOneofCase.SelfPresenceNotification:
        SelfPresenceNotification = other.SelfPresenceNotification;
        break;
      case StateUpdateOneofCase.DeleteNotification:
        DeleteNotification = other.DeleteNotification;
        break;
      case StateUpdateOneofCase.PresenceNotification:
        PresenceNotification = other.PresenceNotification;
        break;
      case StateUpdateOneofCase.BlockNotification:
        BlockNotification = other.BlockNotification;
        break;
      case StateUpdateOneofCase.NotificationSettingNotification:
        NotificationSettingNotification = other.NotificationSettingNotification;
        break;
      case StateUpdateOneofCase.RichPresenceEnabledStateNotification:
        RichPresenceEnabledStateNotification = other.RichPresenceEnabledStateNotification;
        break;
    }

  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (stateUpdateHeader_ == null) {
            stateUpdateHeader_ = new global::StateUpdateHeader();
          }
          input.ReadMessage(stateUpdateHeader_);
          break;
        }
        case 26: {
          global::EventNotification subBuilder = new global::EventNotification();
          if (stateUpdateCase_ == StateUpdateOneofCase.EventNotification) {
            subBuilder.MergeFrom(EventNotification);
          }
          input.ReadMessage(subBuilder);
          EventNotification = subBuilder;
          break;
        }
        case 34: {
          global::SetFocusNotification subBuilder = new global::SetFocusNotification();
          if (stateUpdateCase_ == StateUpdateOneofCase.FocusNotification) {
            subBuilder.MergeFrom(FocusNotification);
          }
          input.ReadMessage(subBuilder);
          FocusNotification = subBuilder;
          break;
        }
        case 42: {
          global::SetTypingNotification subBuilder = new global::SetTypingNotification();
          if (stateUpdateCase_ == StateUpdateOneofCase.TypingNotification) {
            subBuilder.MergeFrom(TypingNotification);
          }
          input.ReadMessage(subBuilder);
          TypingNotification = subBuilder;
          break;
        }
        case 50: {
          global::SetConversationNotificationLevelNotification subBuilder = new global::SetConversationNotificationLevelNotification();
          if (stateUpdateCase_ == StateUpdateOneofCase.NotificationLevelNotification) {
            subBuilder.MergeFrom(NotificationLevelNotification);
          }
          input.ReadMessage(subBuilder);
          NotificationLevelNotification = subBuilder;
          break;
        }
        case 58: {
          global::ReplyToInviteNotification subBuilder = new global::ReplyToInviteNotification();
          if (stateUpdateCase_ == StateUpdateOneofCase.ReplyToInviteNotification) {
            subBuilder.MergeFrom(ReplyToInviteNotification);
          }
          input.ReadMessage(subBuilder);
          ReplyToInviteNotification = subBuilder;
          break;
        }
        case 66: {
          global::WatermarkNotification subBuilder = new global::WatermarkNotification();
          if (stateUpdateCase_ == StateUpdateOneofCase.WatermarkNotification) {
            subBuilder.MergeFrom(WatermarkNotification);
          }
          input.ReadMessage(subBuilder);
          WatermarkNotification = subBuilder;
          break;
        }
        case 90: {
          global::ConversationViewModification subBuilder = new global::ConversationViewModification();
          if (stateUpdateCase_ == StateUpdateOneofCase.ViewModification) {
            subBuilder.MergeFrom(ViewModification);
          }
          input.ReadMessage(subBuilder);
          ViewModification = subBuilder;
          break;
        }
        case 98: {
          global::EasterEggNotification subBuilder = new global::EasterEggNotification();
          if (stateUpdateCase_ == StateUpdateOneofCase.EasterEggNotification) {
            subBuilder.MergeFrom(EasterEggNotification);
          }
          input.ReadMessage(subBuilder);
          EasterEggNotification = subBuilder;
          break;
        }
        case 106: {
          if (conversation_ == null) {
            conversation_ = new global::Conversation();
          }
          input.ReadMessage(conversation_);
          break;
        }
        case 114: {
          global::SelfPresenceNotification subBuilder = new global::SelfPresenceNotification();
          if (stateUpdateCase_ == StateUpdateOneofCase.SelfPresenceNotification) {
            subBuilder.MergeFrom(SelfPresenceNotification);
          }
          input.ReadMessage(subBuilder);
          SelfPresenceNotification = subBuilder;
          break;
        }
        case 122: {
          global::DeleteActionNotification subBuilder = new global::DeleteActionNotification();
          if (stateUpdateCase_ == StateUpdateOneofCase.DeleteNotification) {
            subBuilder.MergeFrom(DeleteNotification);
          }
          input.ReadMessage(subBuilder);
          DeleteNotification = subBuilder;
          break;
        }
        case 130: {
          global::PresenceNotification subBuilder = new global::PresenceNotification();
          if (stateUpdateCase_ == StateUpdateOneofCase.PresenceNotification) {
            subBuilder.MergeFrom(PresenceNotification);
          }
          input.ReadMessage(subBuilder);
          PresenceNotification = subBuilder;
          break;
        }
        case 138: {
          global::BlockNotification subBuilder = new global::BlockNotification();
          if (stateUpdateCase_ == StateUpdateOneofCase.BlockNotification) {
            subBuilder.MergeFrom(BlockNotification);
          }
          input.ReadMessage(subBuilder);
          BlockNotification = subBuilder;
          break;
        }
        case 154: {
          global::SetNotificationSettingNotification subBuilder = new global::SetNotificationSettingNotification();
          if (stateUpdateCase_ == StateUpdateOneofCase.NotificationSettingNotification) {
            subBuilder.MergeFrom(NotificationSettingNotification);
          }
          input.ReadMessage(subBuilder);
          NotificationSettingNotification = subBuilder;
          break;
        }
        case 162: {
          global::RichPresenceEnabledStateNotification subBuilder = new global::RichPresenceEnabledStateNotification();
          if (stateUpdateCase_ == StateUpdateOneofCase.RichPresenceEnabledStateNotification) {
            subBuilder.MergeFrom(RichPresenceEnabledStateNotification);
          }
          input.ReadMessage(subBuilder);
          RichPresenceEnabledStateNotification = subBuilder;
          break;
        }
      }
    }
  }

}

/// <summary>
///  Header for StateUpdate messages.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StateUpdateHeader : pb::IMessage<StateUpdateHeader> {
  private static readonly pb::MessageParser<StateUpdateHeader> _parser = new pb::MessageParser<StateUpdateHeader>(() => new StateUpdateHeader());
  public static pb::MessageParser<StateUpdateHeader> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[68]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public StateUpdateHeader() {
    OnConstruction();
  }

  partial void OnConstruction();

  public StateUpdateHeader(StateUpdateHeader other) : this() {
    activeClientState_ = other.activeClientState_;
    requestTraceId_ = other.requestTraceId_;
    NotificationSettings = other.notificationSettings_ != null ? other.NotificationSettings.Clone() : null;
    currentServerTime_ = other.currentServerTime_;
  }

  public StateUpdateHeader Clone() {
    return new StateUpdateHeader(this);
  }

  /// <summary>Field number for the "active_client_state" field.</summary>
  public const int ActiveClientStateFieldNumber = 1;
  private global::ActiveClientState activeClientState_ = global::ActiveClientState.ACTIVE_CLIENT_STATE_NO_ACTIVE;
  public global::ActiveClientState ActiveClientState {
    get { return activeClientState_; }
    set {
      activeClientState_ = value;
    }
  }

  /// <summary>Field number for the "request_trace_id" field.</summary>
  public const int RequestTraceIdFieldNumber = 3;
  private string requestTraceId_ = "";
  public string RequestTraceId {
    get { return requestTraceId_; }
    set {
      requestTraceId_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "notification_settings" field.</summary>
  public const int NotificationSettingsFieldNumber = 4;
  private global::NotificationSettings notificationSettings_;
  public global::NotificationSettings NotificationSettings {
    get { return notificationSettings_; }
    set {
      notificationSettings_ = value;
    }
  }

  /// <summary>Field number for the "current_server_time" field.</summary>
  public const int CurrentServerTimeFieldNumber = 5;
  private ulong currentServerTime_;
  public ulong CurrentServerTime {
    get { return currentServerTime_; }
    set {
      currentServerTime_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as StateUpdateHeader);
  }

  public bool Equals(StateUpdateHeader other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ActiveClientState != other.ActiveClientState) return false;
    if (RequestTraceId != other.RequestTraceId) return false;
    if (!object.Equals(NotificationSettings, other.NotificationSettings)) return false;
    if (CurrentServerTime != other.CurrentServerTime) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (ActiveClientState != global::ActiveClientState.ACTIVE_CLIENT_STATE_NO_ACTIVE) hash ^= ActiveClientState.GetHashCode();
    if (RequestTraceId.Length != 0) hash ^= RequestTraceId.GetHashCode();
    if (notificationSettings_ != null) hash ^= NotificationSettings.GetHashCode();
    if (CurrentServerTime != 0UL) hash ^= CurrentServerTime.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (ActiveClientState != global::ActiveClientState.ACTIVE_CLIENT_STATE_NO_ACTIVE) {
      output.WriteRawTag(8);
      output.WriteEnum((int) ActiveClientState);
    }
    if (RequestTraceId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(RequestTraceId);
    }
    if (notificationSettings_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(NotificationSettings);
    }
    if (CurrentServerTime != 0UL) {
      output.WriteRawTag(40);
      output.WriteUInt64(CurrentServerTime);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (ActiveClientState != global::ActiveClientState.ACTIVE_CLIENT_STATE_NO_ACTIVE) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActiveClientState);
    }
    if (RequestTraceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestTraceId);
    }
    if (notificationSettings_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NotificationSettings);
    }
    if (CurrentServerTime != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CurrentServerTime);
    }
    return size;
  }

  public void MergeFrom(StateUpdateHeader other) {
    if (other == null) {
      return;
    }
    if (other.ActiveClientState != global::ActiveClientState.ACTIVE_CLIENT_STATE_NO_ACTIVE) {
      ActiveClientState = other.ActiveClientState;
    }
    if (other.RequestTraceId.Length != 0) {
      RequestTraceId = other.RequestTraceId;
    }
    if (other.notificationSettings_ != null) {
      if (notificationSettings_ == null) {
        notificationSettings_ = new global::NotificationSettings();
      }
      NotificationSettings.MergeFrom(other.NotificationSettings);
    }
    if (other.CurrentServerTime != 0UL) {
      CurrentServerTime = other.CurrentServerTime;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          activeClientState_ = (global::ActiveClientState) input.ReadEnum();
          break;
        }
        case 26: {
          RequestTraceId = input.ReadString();
          break;
        }
        case 34: {
          if (notificationSettings_ == null) {
            notificationSettings_ = new global::NotificationSettings();
          }
          input.ReadMessage(notificationSettings_);
          break;
        }
        case 40: {
          CurrentServerTime = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///  List of StateUpdate messages to allow pushing multiple notifications from
///  the server to the client simultaneously.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class BatchUpdate : pb::IMessage<BatchUpdate> {
  private static readonly pb::MessageParser<BatchUpdate> _parser = new pb::MessageParser<BatchUpdate>(() => new BatchUpdate());
  public static pb::MessageParser<BatchUpdate> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[69]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public BatchUpdate() {
    OnConstruction();
  }

  partial void OnConstruction();

  public BatchUpdate(BatchUpdate other) : this() {
    stateUpdate_ = other.stateUpdate_.Clone();
  }

  public BatchUpdate Clone() {
    return new BatchUpdate(this);
  }

  /// <summary>Field number for the "state_update" field.</summary>
  public const int StateUpdateFieldNumber = 1;
  private static readonly pb::FieldCodec<global::StateUpdate> _repeated_stateUpdate_codec
      = pb::FieldCodec.ForMessage(10, global::StateUpdate.Parser);
  private readonly pbc::RepeatedField<global::StateUpdate> stateUpdate_ = new pbc::RepeatedField<global::StateUpdate>();
  public pbc::RepeatedField<global::StateUpdate> StateUpdate {
    get { return stateUpdate_; }
  }

  public override bool Equals(object other) {
    return Equals(other as BatchUpdate);
  }

  public bool Equals(BatchUpdate other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!stateUpdate_.Equals(other.stateUpdate_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= stateUpdate_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    stateUpdate_.WriteTo(output, _repeated_stateUpdate_codec);
  }

  public int CalculateSize() {
    int size = 0;
    size += stateUpdate_.CalculateSize(_repeated_stateUpdate_codec);
    return size;
  }

  public void MergeFrom(BatchUpdate other) {
    if (other == null) {
      return;
    }
    stateUpdate_.Add(other.stateUpdate_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          stateUpdate_.AddEntriesFrom(input, _repeated_stateUpdate_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class EventNotification : pb::IMessage<EventNotification> {
  private static readonly pb::MessageParser<EventNotification> _parser = new pb::MessageParser<EventNotification>(() => new EventNotification());
  public static pb::MessageParser<EventNotification> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[70]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public EventNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  public EventNotification(EventNotification other) : this() {
    Event = other.event_ != null ? other.Event.Clone() : null;
  }

  public EventNotification Clone() {
    return new EventNotification(this);
  }

  /// <summary>Field number for the "event" field.</summary>
  public const int EventFieldNumber = 1;
  private global::Event event_;
  public global::Event Event {
    get { return event_; }
    set {
      event_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as EventNotification);
  }

  public bool Equals(EventNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Event, other.Event)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (event_ != null) hash ^= Event.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (event_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Event);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (event_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Event);
    }
    return size;
  }

  public void MergeFrom(EventNotification other) {
    if (other == null) {
      return;
    }
    if (other.event_ != null) {
      if (event_ == null) {
        event_ = new global::Event();
      }
      Event.MergeFrom(other.Event);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (event_ == null) {
            event_ = new global::Event();
          }
          input.ReadMessage(event_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SetFocusNotification : pb::IMessage<SetFocusNotification> {
  private static readonly pb::MessageParser<SetFocusNotification> _parser = new pb::MessageParser<SetFocusNotification>(() => new SetFocusNotification());
  public static pb::MessageParser<SetFocusNotification> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[71]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SetFocusNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SetFocusNotification(SetFocusNotification other) : this() {
    ConversationId = other.conversationId_ != null ? other.ConversationId.Clone() : null;
    SenderId = other.senderId_ != null ? other.SenderId.Clone() : null;
    timestamp_ = other.timestamp_;
    type_ = other.type_;
    device_ = other.device_;
  }

  public SetFocusNotification Clone() {
    return new SetFocusNotification(this);
  }

  /// <summary>Field number for the "conversation_id" field.</summary>
  public const int ConversationIdFieldNumber = 1;
  private global::ConversationId conversationId_;
  public global::ConversationId ConversationId {
    get { return conversationId_; }
    set {
      conversationId_ = value;
    }
  }

  /// <summary>Field number for the "sender_id" field.</summary>
  public const int SenderIdFieldNumber = 2;
  private global::ParticipantId senderId_;
  public global::ParticipantId SenderId {
    get { return senderId_; }
    set {
      senderId_ = value;
    }
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 3;
  private ulong timestamp_;
  public ulong Timestamp {
    get { return timestamp_; }
    set {
      timestamp_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 4;
  private global::FocusType type_ = global::FocusType.FOCUS_TYPE_UNKNOWN;
  public global::FocusType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "device" field.</summary>
  public const int DeviceFieldNumber = 5;
  private global::FocusDevice device_ = global::FocusDevice.FOCUS_DEVICE_UNSPECIFIED;
  public global::FocusDevice Device {
    get { return device_; }
    set {
      device_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SetFocusNotification);
  }

  public bool Equals(SetFocusNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ConversationId, other.ConversationId)) return false;
    if (!object.Equals(SenderId, other.SenderId)) return false;
    if (Timestamp != other.Timestamp) return false;
    if (Type != other.Type) return false;
    if (Device != other.Device) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (conversationId_ != null) hash ^= ConversationId.GetHashCode();
    if (senderId_ != null) hash ^= SenderId.GetHashCode();
    if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
    if (Type != global::FocusType.FOCUS_TYPE_UNKNOWN) hash ^= Type.GetHashCode();
    if (Device != global::FocusDevice.FOCUS_DEVICE_UNSPECIFIED) hash ^= Device.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (conversationId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ConversationId);
    }
    if (senderId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(SenderId);
    }
    if (Timestamp != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(Timestamp);
    }
    if (Type != global::FocusType.FOCUS_TYPE_UNKNOWN) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Type);
    }
    if (Device != global::FocusDevice.FOCUS_DEVICE_UNSPECIFIED) {
      output.WriteRawTag(40);
      output.WriteEnum((int) Device);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (conversationId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationId);
    }
    if (senderId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SenderId);
    }
    if (Timestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
    }
    if (Type != global::FocusType.FOCUS_TYPE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Device != global::FocusDevice.FOCUS_DEVICE_UNSPECIFIED) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Device);
    }
    return size;
  }

  public void MergeFrom(SetFocusNotification other) {
    if (other == null) {
      return;
    }
    if (other.conversationId_ != null) {
      if (conversationId_ == null) {
        conversationId_ = new global::ConversationId();
      }
      ConversationId.MergeFrom(other.ConversationId);
    }
    if (other.senderId_ != null) {
      if (senderId_ == null) {
        senderId_ = new global::ParticipantId();
      }
      SenderId.MergeFrom(other.SenderId);
    }
    if (other.Timestamp != 0UL) {
      Timestamp = other.Timestamp;
    }
    if (other.Type != global::FocusType.FOCUS_TYPE_UNKNOWN) {
      Type = other.Type;
    }
    if (other.Device != global::FocusDevice.FOCUS_DEVICE_UNSPECIFIED) {
      Device = other.Device;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (conversationId_ == null) {
            conversationId_ = new global::ConversationId();
          }
          input.ReadMessage(conversationId_);
          break;
        }
        case 18: {
          if (senderId_ == null) {
            senderId_ = new global::ParticipantId();
          }
          input.ReadMessage(senderId_);
          break;
        }
        case 24: {
          Timestamp = input.ReadUInt64();
          break;
        }
        case 32: {
          type_ = (global::FocusType) input.ReadEnum();
          break;
        }
        case 40: {
          device_ = (global::FocusDevice) input.ReadEnum();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SetTypingNotification : pb::IMessage<SetTypingNotification> {
  private static readonly pb::MessageParser<SetTypingNotification> _parser = new pb::MessageParser<SetTypingNotification>(() => new SetTypingNotification());
  public static pb::MessageParser<SetTypingNotification> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[72]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SetTypingNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SetTypingNotification(SetTypingNotification other) : this() {
    ConversationId = other.conversationId_ != null ? other.ConversationId.Clone() : null;
    SenderId = other.senderId_ != null ? other.SenderId.Clone() : null;
    timestamp_ = other.timestamp_;
    type_ = other.type_;
  }

  public SetTypingNotification Clone() {
    return new SetTypingNotification(this);
  }

  /// <summary>Field number for the "conversation_id" field.</summary>
  public const int ConversationIdFieldNumber = 1;
  private global::ConversationId conversationId_;
  public global::ConversationId ConversationId {
    get { return conversationId_; }
    set {
      conversationId_ = value;
    }
  }

  /// <summary>Field number for the "sender_id" field.</summary>
  public const int SenderIdFieldNumber = 2;
  private global::ParticipantId senderId_;
  public global::ParticipantId SenderId {
    get { return senderId_; }
    set {
      senderId_ = value;
    }
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 3;
  private ulong timestamp_;
  public ulong Timestamp {
    get { return timestamp_; }
    set {
      timestamp_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 4;
  private global::TypingType type_ = global::TypingType.TYPING_TYPE_UNKNOWN;
  public global::TypingType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SetTypingNotification);
  }

  public bool Equals(SetTypingNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ConversationId, other.ConversationId)) return false;
    if (!object.Equals(SenderId, other.SenderId)) return false;
    if (Timestamp != other.Timestamp) return false;
    if (Type != other.Type) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (conversationId_ != null) hash ^= ConversationId.GetHashCode();
    if (senderId_ != null) hash ^= SenderId.GetHashCode();
    if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
    if (Type != global::TypingType.TYPING_TYPE_UNKNOWN) hash ^= Type.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (conversationId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ConversationId);
    }
    if (senderId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(SenderId);
    }
    if (Timestamp != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(Timestamp);
    }
    if (Type != global::TypingType.TYPING_TYPE_UNKNOWN) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Type);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (conversationId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationId);
    }
    if (senderId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SenderId);
    }
    if (Timestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
    }
    if (Type != global::TypingType.TYPING_TYPE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    return size;
  }

  public void MergeFrom(SetTypingNotification other) {
    if (other == null) {
      return;
    }
    if (other.conversationId_ != null) {
      if (conversationId_ == null) {
        conversationId_ = new global::ConversationId();
      }
      ConversationId.MergeFrom(other.ConversationId);
    }
    if (other.senderId_ != null) {
      if (senderId_ == null) {
        senderId_ = new global::ParticipantId();
      }
      SenderId.MergeFrom(other.SenderId);
    }
    if (other.Timestamp != 0UL) {
      Timestamp = other.Timestamp;
    }
    if (other.Type != global::TypingType.TYPING_TYPE_UNKNOWN) {
      Type = other.Type;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (conversationId_ == null) {
            conversationId_ = new global::ConversationId();
          }
          input.ReadMessage(conversationId_);
          break;
        }
        case 18: {
          if (senderId_ == null) {
            senderId_ = new global::ParticipantId();
          }
          input.ReadMessage(senderId_);
          break;
        }
        case 24: {
          Timestamp = input.ReadUInt64();
          break;
        }
        case 32: {
          type_ = (global::TypingType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SetConversationNotificationLevelNotification : pb::IMessage<SetConversationNotificationLevelNotification> {
  private static readonly pb::MessageParser<SetConversationNotificationLevelNotification> _parser = new pb::MessageParser<SetConversationNotificationLevelNotification>(() => new SetConversationNotificationLevelNotification());
  public static pb::MessageParser<SetConversationNotificationLevelNotification> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[73]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SetConversationNotificationLevelNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SetConversationNotificationLevelNotification(SetConversationNotificationLevelNotification other) : this() {
    ConversationId = other.conversationId_ != null ? other.ConversationId.Clone() : null;
    level_ = other.level_;
    timestamp_ = other.timestamp_;
  }

  public SetConversationNotificationLevelNotification Clone() {
    return new SetConversationNotificationLevelNotification(this);
  }

  /// <summary>Field number for the "conversation_id" field.</summary>
  public const int ConversationIdFieldNumber = 1;
  private global::ConversationId conversationId_;
  public global::ConversationId ConversationId {
    get { return conversationId_; }
    set {
      conversationId_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private global::NotificationLevel level_ = global::NotificationLevel.NOTIFICATION_LEVEL_UNKNOWN;
  public global::NotificationLevel Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 4;
  private ulong timestamp_;
  public ulong Timestamp {
    get { return timestamp_; }
    set {
      timestamp_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SetConversationNotificationLevelNotification);
  }

  public bool Equals(SetConversationNotificationLevelNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ConversationId, other.ConversationId)) return false;
    if (Level != other.Level) return false;
    if (Timestamp != other.Timestamp) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (conversationId_ != null) hash ^= ConversationId.GetHashCode();
    if (Level != global::NotificationLevel.NOTIFICATION_LEVEL_UNKNOWN) hash ^= Level.GetHashCode();
    if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (conversationId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ConversationId);
    }
    if (Level != global::NotificationLevel.NOTIFICATION_LEVEL_UNKNOWN) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Level);
    }
    if (Timestamp != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(Timestamp);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (conversationId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationId);
    }
    if (Level != global::NotificationLevel.NOTIFICATION_LEVEL_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Level);
    }
    if (Timestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
    }
    return size;
  }

  public void MergeFrom(SetConversationNotificationLevelNotification other) {
    if (other == null) {
      return;
    }
    if (other.conversationId_ != null) {
      if (conversationId_ == null) {
        conversationId_ = new global::ConversationId();
      }
      ConversationId.MergeFrom(other.ConversationId);
    }
    if (other.Level != global::NotificationLevel.NOTIFICATION_LEVEL_UNKNOWN) {
      Level = other.Level;
    }
    if (other.Timestamp != 0UL) {
      Timestamp = other.Timestamp;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (conversationId_ == null) {
            conversationId_ = new global::ConversationId();
          }
          input.ReadMessage(conversationId_);
          break;
        }
        case 16: {
          level_ = (global::NotificationLevel) input.ReadEnum();
          break;
        }
        case 32: {
          Timestamp = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReplyToInviteNotification : pb::IMessage<ReplyToInviteNotification> {
  private static readonly pb::MessageParser<ReplyToInviteNotification> _parser = new pb::MessageParser<ReplyToInviteNotification>(() => new ReplyToInviteNotification());
  public static pb::MessageParser<ReplyToInviteNotification> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[74]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public ReplyToInviteNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  public ReplyToInviteNotification(ReplyToInviteNotification other) : this() {
    ConversationId = other.conversationId_ != null ? other.ConversationId.Clone() : null;
    type_ = other.type_;
  }

  public ReplyToInviteNotification Clone() {
    return new ReplyToInviteNotification(this);
  }

  /// <summary>Field number for the "conversation_id" field.</summary>
  public const int ConversationIdFieldNumber = 1;
  private global::ConversationId conversationId_;
  public global::ConversationId ConversationId {
    get { return conversationId_; }
    set {
      conversationId_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private global::ReplyToInviteType type_ = global::ReplyToInviteType.REPLY_TO_INVITE_TYPE_UNKNOWN;
  public global::ReplyToInviteType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as ReplyToInviteNotification);
  }

  public bool Equals(ReplyToInviteNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ConversationId, other.ConversationId)) return false;
    if (Type != other.Type) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (conversationId_ != null) hash ^= ConversationId.GetHashCode();
    if (Type != global::ReplyToInviteType.REPLY_TO_INVITE_TYPE_UNKNOWN) hash ^= Type.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (conversationId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ConversationId);
    }
    if (Type != global::ReplyToInviteType.REPLY_TO_INVITE_TYPE_UNKNOWN) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Type);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (conversationId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationId);
    }
    if (Type != global::ReplyToInviteType.REPLY_TO_INVITE_TYPE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    return size;
  }

  public void MergeFrom(ReplyToInviteNotification other) {
    if (other == null) {
      return;
    }
    if (other.conversationId_ != null) {
      if (conversationId_ == null) {
        conversationId_ = new global::ConversationId();
      }
      ConversationId.MergeFrom(other.ConversationId);
    }
    if (other.Type != global::ReplyToInviteType.REPLY_TO_INVITE_TYPE_UNKNOWN) {
      Type = other.Type;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (conversationId_ == null) {
            conversationId_ = new global::ConversationId();
          }
          input.ReadMessage(conversationId_);
          break;
        }
        case 16: {
          type_ = (global::ReplyToInviteType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class WatermarkNotification : pb::IMessage<WatermarkNotification> {
  private static readonly pb::MessageParser<WatermarkNotification> _parser = new pb::MessageParser<WatermarkNotification>(() => new WatermarkNotification());
  public static pb::MessageParser<WatermarkNotification> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[75]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public WatermarkNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  public WatermarkNotification(WatermarkNotification other) : this() {
    SenderId = other.senderId_ != null ? other.SenderId.Clone() : null;
    ConversationId = other.conversationId_ != null ? other.ConversationId.Clone() : null;
    latestReadTimestamp_ = other.latestReadTimestamp_;
  }

  public WatermarkNotification Clone() {
    return new WatermarkNotification(this);
  }

  /// <summary>Field number for the "sender_id" field.</summary>
  public const int SenderIdFieldNumber = 1;
  private global::ParticipantId senderId_;
  public global::ParticipantId SenderId {
    get { return senderId_; }
    set {
      senderId_ = value;
    }
  }

  /// <summary>Field number for the "conversation_id" field.</summary>
  public const int ConversationIdFieldNumber = 2;
  private global::ConversationId conversationId_;
  public global::ConversationId ConversationId {
    get { return conversationId_; }
    set {
      conversationId_ = value;
    }
  }

  /// <summary>Field number for the "latest_read_timestamp" field.</summary>
  public const int LatestReadTimestampFieldNumber = 3;
  private ulong latestReadTimestamp_;
  public ulong LatestReadTimestamp {
    get { return latestReadTimestamp_; }
    set {
      latestReadTimestamp_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as WatermarkNotification);
  }

  public bool Equals(WatermarkNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(SenderId, other.SenderId)) return false;
    if (!object.Equals(ConversationId, other.ConversationId)) return false;
    if (LatestReadTimestamp != other.LatestReadTimestamp) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (senderId_ != null) hash ^= SenderId.GetHashCode();
    if (conversationId_ != null) hash ^= ConversationId.GetHashCode();
    if (LatestReadTimestamp != 0UL) hash ^= LatestReadTimestamp.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (senderId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(SenderId);
    }
    if (conversationId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ConversationId);
    }
    if (LatestReadTimestamp != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(LatestReadTimestamp);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (senderId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SenderId);
    }
    if (conversationId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationId);
    }
    if (LatestReadTimestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LatestReadTimestamp);
    }
    return size;
  }

  public void MergeFrom(WatermarkNotification other) {
    if (other == null) {
      return;
    }
    if (other.senderId_ != null) {
      if (senderId_ == null) {
        senderId_ = new global::ParticipantId();
      }
      SenderId.MergeFrom(other.SenderId);
    }
    if (other.conversationId_ != null) {
      if (conversationId_ == null) {
        conversationId_ = new global::ConversationId();
      }
      ConversationId.MergeFrom(other.ConversationId);
    }
    if (other.LatestReadTimestamp != 0UL) {
      LatestReadTimestamp = other.LatestReadTimestamp;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (senderId_ == null) {
            senderId_ = new global::ParticipantId();
          }
          input.ReadMessage(senderId_);
          break;
        }
        case 18: {
          if (conversationId_ == null) {
            conversationId_ = new global::ConversationId();
          }
          input.ReadMessage(conversationId_);
          break;
        }
        case 24: {
          LatestReadTimestamp = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ConversationViewModification : pb::IMessage<ConversationViewModification> {
  private static readonly pb::MessageParser<ConversationViewModification> _parser = new pb::MessageParser<ConversationViewModification>(() => new ConversationViewModification());
  public static pb::MessageParser<ConversationViewModification> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[76]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public ConversationViewModification() {
    OnConstruction();
  }

  partial void OnConstruction();

  public ConversationViewModification(ConversationViewModification other) : this() {
    ConversationId = other.conversationId_ != null ? other.ConversationId.Clone() : null;
    oldView_ = other.oldView_;
    newView_ = other.newView_;
  }

  public ConversationViewModification Clone() {
    return new ConversationViewModification(this);
  }

  /// <summary>Field number for the "conversation_id" field.</summary>
  public const int ConversationIdFieldNumber = 1;
  private global::ConversationId conversationId_;
  public global::ConversationId ConversationId {
    get { return conversationId_; }
    set {
      conversationId_ = value;
    }
  }

  /// <summary>Field number for the "old_view" field.</summary>
  public const int OldViewFieldNumber = 2;
  private global::ConversationView oldView_ = global::ConversationView.CONVERSATION_VIEW_UNKNOWN;
  public global::ConversationView OldView {
    get { return oldView_; }
    set {
      oldView_ = value;
    }
  }

  /// <summary>Field number for the "new_view" field.</summary>
  public const int NewViewFieldNumber = 3;
  private global::ConversationView newView_ = global::ConversationView.CONVERSATION_VIEW_UNKNOWN;
  public global::ConversationView NewView {
    get { return newView_; }
    set {
      newView_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as ConversationViewModification);
  }

  public bool Equals(ConversationViewModification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ConversationId, other.ConversationId)) return false;
    if (OldView != other.OldView) return false;
    if (NewView != other.NewView) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (conversationId_ != null) hash ^= ConversationId.GetHashCode();
    if (OldView != global::ConversationView.CONVERSATION_VIEW_UNKNOWN) hash ^= OldView.GetHashCode();
    if (NewView != global::ConversationView.CONVERSATION_VIEW_UNKNOWN) hash ^= NewView.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (conversationId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ConversationId);
    }
    if (OldView != global::ConversationView.CONVERSATION_VIEW_UNKNOWN) {
      output.WriteRawTag(16);
      output.WriteEnum((int) OldView);
    }
    if (NewView != global::ConversationView.CONVERSATION_VIEW_UNKNOWN) {
      output.WriteRawTag(24);
      output.WriteEnum((int) NewView);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (conversationId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationId);
    }
    if (OldView != global::ConversationView.CONVERSATION_VIEW_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OldView);
    }
    if (NewView != global::ConversationView.CONVERSATION_VIEW_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NewView);
    }
    return size;
  }

  public void MergeFrom(ConversationViewModification other) {
    if (other == null) {
      return;
    }
    if (other.conversationId_ != null) {
      if (conversationId_ == null) {
        conversationId_ = new global::ConversationId();
      }
      ConversationId.MergeFrom(other.ConversationId);
    }
    if (other.OldView != global::ConversationView.CONVERSATION_VIEW_UNKNOWN) {
      OldView = other.OldView;
    }
    if (other.NewView != global::ConversationView.CONVERSATION_VIEW_UNKNOWN) {
      NewView = other.NewView;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (conversationId_ == null) {
            conversationId_ = new global::ConversationId();
          }
          input.ReadMessage(conversationId_);
          break;
        }
        case 16: {
          oldView_ = (global::ConversationView) input.ReadEnum();
          break;
        }
        case 24: {
          newView_ = (global::ConversationView) input.ReadEnum();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class EasterEggNotification : pb::IMessage<EasterEggNotification> {
  private static readonly pb::MessageParser<EasterEggNotification> _parser = new pb::MessageParser<EasterEggNotification>(() => new EasterEggNotification());
  public static pb::MessageParser<EasterEggNotification> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[77]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public EasterEggNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  public EasterEggNotification(EasterEggNotification other) : this() {
    SenderId = other.senderId_ != null ? other.SenderId.Clone() : null;
    ConversationId = other.conversationId_ != null ? other.ConversationId.Clone() : null;
    EasterEgg = other.easterEgg_ != null ? other.EasterEgg.Clone() : null;
  }

  public EasterEggNotification Clone() {
    return new EasterEggNotification(this);
  }

  /// <summary>Field number for the "sender_id" field.</summary>
  public const int SenderIdFieldNumber = 1;
  private global::ParticipantId senderId_;
  public global::ParticipantId SenderId {
    get { return senderId_; }
    set {
      senderId_ = value;
    }
  }

  /// <summary>Field number for the "conversation_id" field.</summary>
  public const int ConversationIdFieldNumber = 2;
  private global::ConversationId conversationId_;
  public global::ConversationId ConversationId {
    get { return conversationId_; }
    set {
      conversationId_ = value;
    }
  }

  /// <summary>Field number for the "easter_egg" field.</summary>
  public const int EasterEggFieldNumber = 3;
  private global::EasterEgg easterEgg_;
  public global::EasterEgg EasterEgg {
    get { return easterEgg_; }
    set {
      easterEgg_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as EasterEggNotification);
  }

  public bool Equals(EasterEggNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(SenderId, other.SenderId)) return false;
    if (!object.Equals(ConversationId, other.ConversationId)) return false;
    if (!object.Equals(EasterEgg, other.EasterEgg)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (senderId_ != null) hash ^= SenderId.GetHashCode();
    if (conversationId_ != null) hash ^= ConversationId.GetHashCode();
    if (easterEgg_ != null) hash ^= EasterEgg.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (senderId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(SenderId);
    }
    if (conversationId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ConversationId);
    }
    if (easterEgg_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(EasterEgg);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (senderId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SenderId);
    }
    if (conversationId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationId);
    }
    if (easterEgg_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EasterEgg);
    }
    return size;
  }

  public void MergeFrom(EasterEggNotification other) {
    if (other == null) {
      return;
    }
    if (other.senderId_ != null) {
      if (senderId_ == null) {
        senderId_ = new global::ParticipantId();
      }
      SenderId.MergeFrom(other.SenderId);
    }
    if (other.conversationId_ != null) {
      if (conversationId_ == null) {
        conversationId_ = new global::ConversationId();
      }
      ConversationId.MergeFrom(other.ConversationId);
    }
    if (other.easterEgg_ != null) {
      if (easterEgg_ == null) {
        easterEgg_ = new global::EasterEgg();
      }
      EasterEgg.MergeFrom(other.EasterEgg);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (senderId_ == null) {
            senderId_ = new global::ParticipantId();
          }
          input.ReadMessage(senderId_);
          break;
        }
        case 18: {
          if (conversationId_ == null) {
            conversationId_ = new global::ConversationId();
          }
          input.ReadMessage(conversationId_);
          break;
        }
        case 26: {
          if (easterEgg_ == null) {
            easterEgg_ = new global::EasterEgg();
          }
          input.ReadMessage(easterEgg_);
          break;
        }
      }
    }
  }

}

/// <summary>
///  Notifies the status of other clients and mood.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SelfPresenceNotification : pb::IMessage<SelfPresenceNotification> {
  private static readonly pb::MessageParser<SelfPresenceNotification> _parser = new pb::MessageParser<SelfPresenceNotification>(() => new SelfPresenceNotification());
  public static pb::MessageParser<SelfPresenceNotification> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[78]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SelfPresenceNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SelfPresenceNotification(SelfPresenceNotification other) : this() {
    ClientPresenceState = other.clientPresenceState_ != null ? other.ClientPresenceState.Clone() : null;
    DoNotDisturbSetting = other.doNotDisturbSetting_ != null ? other.DoNotDisturbSetting.Clone() : null;
    DesktopOffSetting = other.desktopOffSetting_ != null ? other.DesktopOffSetting.Clone() : null;
    DesktopOffState = other.desktopOffState_ != null ? other.DesktopOffState.Clone() : null;
    MoodState = other.moodState_ != null ? other.MoodState.Clone() : null;
  }

  public SelfPresenceNotification Clone() {
    return new SelfPresenceNotification(this);
  }

  /// <summary>Field number for the "client_presence_state" field.</summary>
  public const int ClientPresenceStateFieldNumber = 1;
  private global::ClientPresenceState clientPresenceState_;
  public global::ClientPresenceState ClientPresenceState {
    get { return clientPresenceState_; }
    set {
      clientPresenceState_ = value;
    }
  }

  /// <summary>Field number for the "do_not_disturb_setting" field.</summary>
  public const int DoNotDisturbSettingFieldNumber = 3;
  private global::DoNotDisturbSetting doNotDisturbSetting_;
  public global::DoNotDisturbSetting DoNotDisturbSetting {
    get { return doNotDisturbSetting_; }
    set {
      doNotDisturbSetting_ = value;
    }
  }

  /// <summary>Field number for the "desktop_off_setting" field.</summary>
  public const int DesktopOffSettingFieldNumber = 4;
  private global::DesktopOffSetting desktopOffSetting_;
  public global::DesktopOffSetting DesktopOffSetting {
    get { return desktopOffSetting_; }
    set {
      desktopOffSetting_ = value;
    }
  }

  /// <summary>Field number for the "desktop_off_state" field.</summary>
  public const int DesktopOffStateFieldNumber = 5;
  private global::DesktopOffState desktopOffState_;
  public global::DesktopOffState DesktopOffState {
    get { return desktopOffState_; }
    set {
      desktopOffState_ = value;
    }
  }

  /// <summary>Field number for the "mood_state" field.</summary>
  public const int MoodStateFieldNumber = 6;
  private global::MoodState moodState_;
  public global::MoodState MoodState {
    get { return moodState_; }
    set {
      moodState_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SelfPresenceNotification);
  }

  public bool Equals(SelfPresenceNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ClientPresenceState, other.ClientPresenceState)) return false;
    if (!object.Equals(DoNotDisturbSetting, other.DoNotDisturbSetting)) return false;
    if (!object.Equals(DesktopOffSetting, other.DesktopOffSetting)) return false;
    if (!object.Equals(DesktopOffState, other.DesktopOffState)) return false;
    if (!object.Equals(MoodState, other.MoodState)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (clientPresenceState_ != null) hash ^= ClientPresenceState.GetHashCode();
    if (doNotDisturbSetting_ != null) hash ^= DoNotDisturbSetting.GetHashCode();
    if (desktopOffSetting_ != null) hash ^= DesktopOffSetting.GetHashCode();
    if (desktopOffState_ != null) hash ^= DesktopOffState.GetHashCode();
    if (moodState_ != null) hash ^= MoodState.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (clientPresenceState_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ClientPresenceState);
    }
    if (doNotDisturbSetting_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(DoNotDisturbSetting);
    }
    if (desktopOffSetting_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(DesktopOffSetting);
    }
    if (desktopOffState_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(DesktopOffState);
    }
    if (moodState_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(MoodState);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (clientPresenceState_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientPresenceState);
    }
    if (doNotDisturbSetting_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DoNotDisturbSetting);
    }
    if (desktopOffSetting_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DesktopOffSetting);
    }
    if (desktopOffState_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DesktopOffState);
    }
    if (moodState_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoodState);
    }
    return size;
  }

  public void MergeFrom(SelfPresenceNotification other) {
    if (other == null) {
      return;
    }
    if (other.clientPresenceState_ != null) {
      if (clientPresenceState_ == null) {
        clientPresenceState_ = new global::ClientPresenceState();
      }
      ClientPresenceState.MergeFrom(other.ClientPresenceState);
    }
    if (other.doNotDisturbSetting_ != null) {
      if (doNotDisturbSetting_ == null) {
        doNotDisturbSetting_ = new global::DoNotDisturbSetting();
      }
      DoNotDisturbSetting.MergeFrom(other.DoNotDisturbSetting);
    }
    if (other.desktopOffSetting_ != null) {
      if (desktopOffSetting_ == null) {
        desktopOffSetting_ = new global::DesktopOffSetting();
      }
      DesktopOffSetting.MergeFrom(other.DesktopOffSetting);
    }
    if (other.desktopOffState_ != null) {
      if (desktopOffState_ == null) {
        desktopOffState_ = new global::DesktopOffState();
      }
      DesktopOffState.MergeFrom(other.DesktopOffState);
    }
    if (other.moodState_ != null) {
      if (moodState_ == null) {
        moodState_ = new global::MoodState();
      }
      MoodState.MergeFrom(other.MoodState);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (clientPresenceState_ == null) {
            clientPresenceState_ = new global::ClientPresenceState();
          }
          input.ReadMessage(clientPresenceState_);
          break;
        }
        case 26: {
          if (doNotDisturbSetting_ == null) {
            doNotDisturbSetting_ = new global::DoNotDisturbSetting();
          }
          input.ReadMessage(doNotDisturbSetting_);
          break;
        }
        case 34: {
          if (desktopOffSetting_ == null) {
            desktopOffSetting_ = new global::DesktopOffSetting();
          }
          input.ReadMessage(desktopOffSetting_);
          break;
        }
        case 42: {
          if (desktopOffState_ == null) {
            desktopOffState_ = new global::DesktopOffState();
          }
          input.ReadMessage(desktopOffState_);
          break;
        }
        case 50: {
          if (moodState_ == null) {
            moodState_ = new global::MoodState();
          }
          input.ReadMessage(moodState_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DeleteActionNotification : pb::IMessage<DeleteActionNotification> {
  private static readonly pb::MessageParser<DeleteActionNotification> _parser = new pb::MessageParser<DeleteActionNotification>(() => new DeleteActionNotification());
  public static pb::MessageParser<DeleteActionNotification> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[79]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public DeleteActionNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  public DeleteActionNotification(DeleteActionNotification other) : this() {
    ConversationId = other.conversationId_ != null ? other.ConversationId.Clone() : null;
    DeleteAction = other.deleteAction_ != null ? other.DeleteAction.Clone() : null;
  }

  public DeleteActionNotification Clone() {
    return new DeleteActionNotification(this);
  }

  /// <summary>Field number for the "conversation_id" field.</summary>
  public const int ConversationIdFieldNumber = 1;
  private global::ConversationId conversationId_;
  public global::ConversationId ConversationId {
    get { return conversationId_; }
    set {
      conversationId_ = value;
    }
  }

  /// <summary>Field number for the "delete_action" field.</summary>
  public const int DeleteActionFieldNumber = 2;
  private global::DeleteAction deleteAction_;
  public global::DeleteAction DeleteAction {
    get { return deleteAction_; }
    set {
      deleteAction_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as DeleteActionNotification);
  }

  public bool Equals(DeleteActionNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ConversationId, other.ConversationId)) return false;
    if (!object.Equals(DeleteAction, other.DeleteAction)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (conversationId_ != null) hash ^= ConversationId.GetHashCode();
    if (deleteAction_ != null) hash ^= DeleteAction.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (conversationId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ConversationId);
    }
    if (deleteAction_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DeleteAction);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (conversationId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationId);
    }
    if (deleteAction_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeleteAction);
    }
    return size;
  }

  public void MergeFrom(DeleteActionNotification other) {
    if (other == null) {
      return;
    }
    if (other.conversationId_ != null) {
      if (conversationId_ == null) {
        conversationId_ = new global::ConversationId();
      }
      ConversationId.MergeFrom(other.ConversationId);
    }
    if (other.deleteAction_ != null) {
      if (deleteAction_ == null) {
        deleteAction_ = new global::DeleteAction();
      }
      DeleteAction.MergeFrom(other.DeleteAction);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (conversationId_ == null) {
            conversationId_ = new global::ConversationId();
          }
          input.ReadMessage(conversationId_);
          break;
        }
        case 18: {
          if (deleteAction_ == null) {
            deleteAction_ = new global::DeleteAction();
          }
          input.ReadMessage(deleteAction_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PresenceNotification : pb::IMessage<PresenceNotification> {
  private static readonly pb::MessageParser<PresenceNotification> _parser = new pb::MessageParser<PresenceNotification>(() => new PresenceNotification());
  public static pb::MessageParser<PresenceNotification> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[80]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public PresenceNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  public PresenceNotification(PresenceNotification other) : this() {
    presence_ = other.presence_.Clone();
  }

  public PresenceNotification Clone() {
    return new PresenceNotification(this);
  }

  /// <summary>Field number for the "presence" field.</summary>
  public const int PresenceFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PresenceResult> _repeated_presence_codec
      = pb::FieldCodec.ForMessage(10, global::PresenceResult.Parser);
  private readonly pbc::RepeatedField<global::PresenceResult> presence_ = new pbc::RepeatedField<global::PresenceResult>();
  public pbc::RepeatedField<global::PresenceResult> Presence {
    get { return presence_; }
  }

  public override bool Equals(object other) {
    return Equals(other as PresenceNotification);
  }

  public bool Equals(PresenceNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!presence_.Equals(other.presence_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= presence_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    presence_.WriteTo(output, _repeated_presence_codec);
  }

  public int CalculateSize() {
    int size = 0;
    size += presence_.CalculateSize(_repeated_presence_codec);
    return size;
  }

  public void MergeFrom(PresenceNotification other) {
    if (other == null) {
      return;
    }
    presence_.Add(other.presence_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          presence_.AddEntriesFrom(input, _repeated_presence_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class BlockNotification : pb::IMessage<BlockNotification> {
  private static readonly pb::MessageParser<BlockNotification> _parser = new pb::MessageParser<BlockNotification>(() => new BlockNotification());
  public static pb::MessageParser<BlockNotification> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[81]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public BlockNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  public BlockNotification(BlockNotification other) : this() {
    blockStateChange_ = other.blockStateChange_.Clone();
  }

  public BlockNotification Clone() {
    return new BlockNotification(this);
  }

  /// <summary>Field number for the "block_state_change" field.</summary>
  public const int BlockStateChangeFieldNumber = 1;
  private static readonly pb::FieldCodec<global::BlockStateChange> _repeated_blockStateChange_codec
      = pb::FieldCodec.ForMessage(10, global::BlockStateChange.Parser);
  private readonly pbc::RepeatedField<global::BlockStateChange> blockStateChange_ = new pbc::RepeatedField<global::BlockStateChange>();
  public pbc::RepeatedField<global::BlockStateChange> BlockStateChange {
    get { return blockStateChange_; }
  }

  public override bool Equals(object other) {
    return Equals(other as BlockNotification);
  }

  public bool Equals(BlockNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!blockStateChange_.Equals(other.blockStateChange_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= blockStateChange_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    blockStateChange_.WriteTo(output, _repeated_blockStateChange_codec);
  }

  public int CalculateSize() {
    int size = 0;
    size += blockStateChange_.CalculateSize(_repeated_blockStateChange_codec);
    return size;
  }

  public void MergeFrom(BlockNotification other) {
    if (other == null) {
      return;
    }
    blockStateChange_.Add(other.blockStateChange_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          blockStateChange_.AddEntriesFrom(input, _repeated_blockStateChange_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SetNotificationSettingNotification : pb::IMessage<SetNotificationSettingNotification> {
  private static readonly pb::MessageParser<SetNotificationSettingNotification> _parser = new pb::MessageParser<SetNotificationSettingNotification>(() => new SetNotificationSettingNotification());
  public static pb::MessageParser<SetNotificationSettingNotification> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[82]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SetNotificationSettingNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SetNotificationSettingNotification(SetNotificationSettingNotification other) : this() {
    DesktopSoundSetting = other.desktopSoundSetting_ != null ? other.DesktopSoundSetting.Clone() : null;
  }

  public SetNotificationSettingNotification Clone() {
    return new SetNotificationSettingNotification(this);
  }

  /// <summary>Field number for the "desktop_sound_setting" field.</summary>
  public const int DesktopSoundSettingFieldNumber = 2;
  private global::DesktopSoundSetting desktopSoundSetting_;
  public global::DesktopSoundSetting DesktopSoundSetting {
    get { return desktopSoundSetting_; }
    set {
      desktopSoundSetting_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SetNotificationSettingNotification);
  }

  public bool Equals(SetNotificationSettingNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DesktopSoundSetting, other.DesktopSoundSetting)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (desktopSoundSetting_ != null) hash ^= DesktopSoundSetting.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (desktopSoundSetting_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DesktopSoundSetting);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (desktopSoundSetting_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DesktopSoundSetting);
    }
    return size;
  }

  public void MergeFrom(SetNotificationSettingNotification other) {
    if (other == null) {
      return;
    }
    if (other.desktopSoundSetting_ != null) {
      if (desktopSoundSetting_ == null) {
        desktopSoundSetting_ = new global::DesktopSoundSetting();
      }
      DesktopSoundSetting.MergeFrom(other.DesktopSoundSetting);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 18: {
          if (desktopSoundSetting_ == null) {
            desktopSoundSetting_ = new global::DesktopSoundSetting();
          }
          input.ReadMessage(desktopSoundSetting_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class RichPresenceEnabledStateNotification : pb::IMessage<RichPresenceEnabledStateNotification> {
  private static readonly pb::MessageParser<RichPresenceEnabledStateNotification> _parser = new pb::MessageParser<RichPresenceEnabledStateNotification>(() => new RichPresenceEnabledStateNotification());
  public static pb::MessageParser<RichPresenceEnabledStateNotification> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[83]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public RichPresenceEnabledStateNotification() {
    OnConstruction();
  }

  partial void OnConstruction();

  public RichPresenceEnabledStateNotification(RichPresenceEnabledStateNotification other) : this() {
    richPresenceEnabledState_ = other.richPresenceEnabledState_.Clone();
  }

  public RichPresenceEnabledStateNotification Clone() {
    return new RichPresenceEnabledStateNotification(this);
  }

  /// <summary>Field number for the "rich_presence_enabled_state" field.</summary>
  public const int RichPresenceEnabledStateFieldNumber = 1;
  private static readonly pb::FieldCodec<global::RichPresenceEnabledState> _repeated_richPresenceEnabledState_codec
      = pb::FieldCodec.ForMessage(10, global::RichPresenceEnabledState.Parser);
  private readonly pbc::RepeatedField<global::RichPresenceEnabledState> richPresenceEnabledState_ = new pbc::RepeatedField<global::RichPresenceEnabledState>();
  public pbc::RepeatedField<global::RichPresenceEnabledState> RichPresenceEnabledState {
    get { return richPresenceEnabledState_; }
  }

  public override bool Equals(object other) {
    return Equals(other as RichPresenceEnabledStateNotification);
  }

  public bool Equals(RichPresenceEnabledStateNotification other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!richPresenceEnabledState_.Equals(other.richPresenceEnabledState_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= richPresenceEnabledState_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    richPresenceEnabledState_.WriteTo(output, _repeated_richPresenceEnabledState_codec);
  }

  public int CalculateSize() {
    int size = 0;
    size += richPresenceEnabledState_.CalculateSize(_repeated_richPresenceEnabledState_codec);
    return size;
  }

  public void MergeFrom(RichPresenceEnabledStateNotification other) {
    if (other == null) {
      return;
    }
    richPresenceEnabledState_.Add(other.richPresenceEnabledState_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          richPresenceEnabledState_.AddEntriesFrom(input, _repeated_richPresenceEnabledState_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ConversationSpec : pb::IMessage<ConversationSpec> {
  private static readonly pb::MessageParser<ConversationSpec> _parser = new pb::MessageParser<ConversationSpec>(() => new ConversationSpec());
  public static pb::MessageParser<ConversationSpec> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[84]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public ConversationSpec() {
    OnConstruction();
  }

  partial void OnConstruction();

  public ConversationSpec(ConversationSpec other) : this() {
    ConversationId = other.conversationId_ != null ? other.ConversationId.Clone() : null;
  }

  public ConversationSpec Clone() {
    return new ConversationSpec(this);
  }

  /// <summary>Field number for the "conversation_id" field.</summary>
  public const int ConversationIdFieldNumber = 1;
  private global::ConversationId conversationId_;
  public global::ConversationId ConversationId {
    get { return conversationId_; }
    set {
      conversationId_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as ConversationSpec);
  }

  public bool Equals(ConversationSpec other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ConversationId, other.ConversationId)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (conversationId_ != null) hash ^= ConversationId.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (conversationId_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ConversationId);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (conversationId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationId);
    }
    return size;
  }

  public void MergeFrom(ConversationSpec other) {
    if (other == null) {
      return;
    }
    if (other.conversationId_ != null) {
      if (conversationId_ == null) {
        conversationId_ = new global::ConversationId();
      }
      ConversationId.MergeFrom(other.ConversationId);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (conversationId_ == null) {
            conversationId_ = new global::ConversationId();
          }
          input.ReadMessage(conversationId_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class AddUserRequest : pb::IMessage<AddUserRequest> {
  private static readonly pb::MessageParser<AddUserRequest> _parser = new pb::MessageParser<AddUserRequest>(() => new AddUserRequest());
  public static pb::MessageParser<AddUserRequest> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[85]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public AddUserRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  public AddUserRequest(AddUserRequest other) : this() {
    RequestHeader = other.requestHeader_ != null ? other.RequestHeader.Clone() : null;
    inviteeId_ = other.inviteeId_.Clone();
    EventRequestHeader = other.eventRequestHeader_ != null ? other.EventRequestHeader.Clone() : null;
  }

  public AddUserRequest Clone() {
    return new AddUserRequest(this);
  }

  /// <summary>Field number for the "request_header" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader requestHeader_;
  public global::RequestHeader RequestHeader {
    get { return requestHeader_; }
    set {
      requestHeader_ = value;
    }
  }

  /// <summary>Field number for the "invitee_id" field.</summary>
  public const int InviteeIdFieldNumber = 3;
  private static readonly pb::FieldCodec<global::InviteeID> _repeated_inviteeId_codec
      = pb::FieldCodec.ForMessage(26, global::InviteeID.Parser);
  private readonly pbc::RepeatedField<global::InviteeID> inviteeId_ = new pbc::RepeatedField<global::InviteeID>();
  public pbc::RepeatedField<global::InviteeID> InviteeId {
    get { return inviteeId_; }
  }

  /// <summary>Field number for the "event_request_header" field.</summary>
  public const int EventRequestHeaderFieldNumber = 5;
  private global::EventRequestHeader eventRequestHeader_;
  public global::EventRequestHeader EventRequestHeader {
    get { return eventRequestHeader_; }
    set {
      eventRequestHeader_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as AddUserRequest);
  }

  public bool Equals(AddUserRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if(!inviteeId_.Equals(other.inviteeId_)) return false;
    if (!object.Equals(EventRequestHeader, other.EventRequestHeader)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (requestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    hash ^= inviteeId_.GetHashCode();
    if (eventRequestHeader_ != null) hash ^= EventRequestHeader.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (requestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    inviteeId_.WriteTo(output, _repeated_inviteeId_codec);
    if (eventRequestHeader_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(EventRequestHeader);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (requestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    size += inviteeId_.CalculateSize(_repeated_inviteeId_codec);
    if (eventRequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventRequestHeader);
    }
    return size;
  }

  public void MergeFrom(AddUserRequest other) {
    if (other == null) {
      return;
    }
    if (other.requestHeader_ != null) {
      if (requestHeader_ == null) {
        requestHeader_ = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    inviteeId_.Add(other.inviteeId_);
    if (other.eventRequestHeader_ != null) {
      if (eventRequestHeader_ == null) {
        eventRequestHeader_ = new global::EventRequestHeader();
      }
      EventRequestHeader.MergeFrom(other.EventRequestHeader);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (requestHeader_ == null) {
            requestHeader_ = new global::RequestHeader();
          }
          input.ReadMessage(requestHeader_);
          break;
        }
        case 26: {
          inviteeId_.AddEntriesFrom(input, _repeated_inviteeId_codec);
          break;
        }
        case 42: {
          if (eventRequestHeader_ == null) {
            eventRequestHeader_ = new global::EventRequestHeader();
          }
          input.ReadMessage(eventRequestHeader_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class AddUserResponse : pb::IMessage<AddUserResponse> {
  private static readonly pb::MessageParser<AddUserResponse> _parser = new pb::MessageParser<AddUserResponse>(() => new AddUserResponse());
  public static pb::MessageParser<AddUserResponse> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[86]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public AddUserResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  public AddUserResponse(AddUserResponse other) : this() {
    ResponseHeader = other.responseHeader_ != null ? other.ResponseHeader.Clone() : null;
    CreatedEvent = other.createdEvent_ != null ? other.CreatedEvent.Clone() : null;
  }

  public AddUserResponse Clone() {
    return new AddUserResponse(this);
  }

  /// <summary>Field number for the "response_header" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader responseHeader_;
  public global::ResponseHeader ResponseHeader {
    get { return responseHeader_; }
    set {
      responseHeader_ = value;
    }
  }

  /// <summary>Field number for the "created_event" field.</summary>
  public const int CreatedEventFieldNumber = 5;
  private global::Event createdEvent_;
  public global::Event CreatedEvent {
    get { return createdEvent_; }
    set {
      createdEvent_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as AddUserResponse);
  }

  public bool Equals(AddUserResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(CreatedEvent, other.CreatedEvent)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (responseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (createdEvent_ != null) hash ^= CreatedEvent.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (responseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (createdEvent_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(CreatedEvent);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (responseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (createdEvent_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedEvent);
    }
    return size;
  }

  public void MergeFrom(AddUserResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseHeader_ != null) {
      if (responseHeader_ == null) {
        responseHeader_ = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.createdEvent_ != null) {
      if (createdEvent_ == null) {
        createdEvent_ = new global::Event();
      }
      CreatedEvent.MergeFrom(other.CreatedEvent);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (responseHeader_ == null) {
            responseHeader_ = new global::ResponseHeader();
          }
          input.ReadMessage(responseHeader_);
          break;
        }
        case 42: {
          if (createdEvent_ == null) {
            createdEvent_ = new global::Event();
          }
          input.ReadMessage(createdEvent_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CreateConversationRequest : pb::IMessage<CreateConversationRequest> {
  private static readonly pb::MessageParser<CreateConversationRequest> _parser = new pb::MessageParser<CreateConversationRequest>(() => new CreateConversationRequest());
  public static pb::MessageParser<CreateConversationRequest> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[87]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CreateConversationRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CreateConversationRequest(CreateConversationRequest other) : this() {
    RequestHeader = other.requestHeader_ != null ? other.RequestHeader.Clone() : null;
    type_ = other.type_;
    clientGeneratedId_ = other.clientGeneratedId_;
    name_ = other.name_;
    inviteeId_ = other.inviteeId_.Clone();
  }

  public CreateConversationRequest Clone() {
    return new CreateConversationRequest(this);
  }

  /// <summary>Field number for the "request_header" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader requestHeader_;
  public global::RequestHeader RequestHeader {
    get { return requestHeader_; }
    set {
      requestHeader_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private global::ConversationType type_ = global::ConversationType.CONVERSATION_TYPE_UNKNOWN;
  public global::ConversationType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "client_generated_id" field.</summary>
  public const int ClientGeneratedIdFieldNumber = 3;
  private ulong clientGeneratedId_;
  public ulong ClientGeneratedId {
    get { return clientGeneratedId_; }
    set {
      clientGeneratedId_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 4;
  private string name_ = "";
  public string Name {
    get { return name_; }
    set {
      name_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "invitee_id" field.</summary>
  public const int InviteeIdFieldNumber = 5;
  private static readonly pb::FieldCodec<global::InviteeID> _repeated_inviteeId_codec
      = pb::FieldCodec.ForMessage(42, global::InviteeID.Parser);
  private readonly pbc::RepeatedField<global::InviteeID> inviteeId_ = new pbc::RepeatedField<global::InviteeID>();
  public pbc::RepeatedField<global::InviteeID> InviteeId {
    get { return inviteeId_; }
  }

  public override bool Equals(object other) {
    return Equals(other as CreateConversationRequest);
  }

  public bool Equals(CreateConversationRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (Type != other.Type) return false;
    if (ClientGeneratedId != other.ClientGeneratedId) return false;
    if (Name != other.Name) return false;
    if(!inviteeId_.Equals(other.inviteeId_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (requestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (Type != global::ConversationType.CONVERSATION_TYPE_UNKNOWN) hash ^= Type.GetHashCode();
    if (ClientGeneratedId != 0UL) hash ^= ClientGeneratedId.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    hash ^= inviteeId_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (requestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    if (Type != global::ConversationType.CONVERSATION_TYPE_UNKNOWN) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Type);
    }
    if (ClientGeneratedId != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(ClientGeneratedId);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Name);
    }
    inviteeId_.WriteTo(output, _repeated_inviteeId_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (requestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (Type != global::ConversationType.CONVERSATION_TYPE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (ClientGeneratedId != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ClientGeneratedId);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    size += inviteeId_.CalculateSize(_repeated_inviteeId_codec);
    return size;
  }

  public void MergeFrom(CreateConversationRequest other) {
    if (other == null) {
      return;
    }
    if (other.requestHeader_ != null) {
      if (requestHeader_ == null) {
        requestHeader_ = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.Type != global::ConversationType.CONVERSATION_TYPE_UNKNOWN) {
      Type = other.Type;
    }
    if (other.ClientGeneratedId != 0UL) {
      ClientGeneratedId = other.ClientGeneratedId;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    inviteeId_.Add(other.inviteeId_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (requestHeader_ == null) {
            requestHeader_ = new global::RequestHeader();
          }
          input.ReadMessage(requestHeader_);
          break;
        }
        case 16: {
          type_ = (global::ConversationType) input.ReadEnum();
          break;
        }
        case 24: {
          ClientGeneratedId = input.ReadUInt64();
          break;
        }
        case 34: {
          Name = input.ReadString();
          break;
        }
        case 42: {
          inviteeId_.AddEntriesFrom(input, _repeated_inviteeId_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CreateConversationResponse : pb::IMessage<CreateConversationResponse> {
  private static readonly pb::MessageParser<CreateConversationResponse> _parser = new pb::MessageParser<CreateConversationResponse>(() => new CreateConversationResponse());
  public static pb::MessageParser<CreateConversationResponse> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[88]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CreateConversationResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CreateConversationResponse(CreateConversationResponse other) : this() {
    ResponseHeader = other.responseHeader_ != null ? other.ResponseHeader.Clone() : null;
    Conversation = other.conversation_ != null ? other.Conversation.Clone() : null;
    newConversationCreated_ = other.newConversationCreated_;
  }

  public CreateConversationResponse Clone() {
    return new CreateConversationResponse(this);
  }

  /// <summary>Field number for the "response_header" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader responseHeader_;
  public global::ResponseHeader ResponseHeader {
    get { return responseHeader_; }
    set {
      responseHeader_ = value;
    }
  }

  /// <summary>Field number for the "conversation" field.</summary>
  public const int ConversationFieldNumber = 2;
  private global::Conversation conversation_;
  public global::Conversation Conversation {
    get { return conversation_; }
    set {
      conversation_ = value;
    }
  }

  /// <summary>Field number for the "new_conversation_created" field.</summary>
  public const int NewConversationCreatedFieldNumber = 7;
  private bool newConversationCreated_;
  public bool NewConversationCreated {
    get { return newConversationCreated_; }
    set {
      newConversationCreated_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CreateConversationResponse);
  }

  public bool Equals(CreateConversationResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(Conversation, other.Conversation)) return false;
    if (NewConversationCreated != other.NewConversationCreated) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (responseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (conversation_ != null) hash ^= Conversation.GetHashCode();
    if (NewConversationCreated != false) hash ^= NewConversationCreated.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (responseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (conversation_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Conversation);
    }
    if (NewConversationCreated != false) {
      output.WriteRawTag(56);
      output.WriteBool(NewConversationCreated);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (responseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (conversation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Conversation);
    }
    if (NewConversationCreated != false) {
      size += 1 + 1;
    }
    return size;
  }

  public void MergeFrom(CreateConversationResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseHeader_ != null) {
      if (responseHeader_ == null) {
        responseHeader_ = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.conversation_ != null) {
      if (conversation_ == null) {
        conversation_ = new global::Conversation();
      }
      Conversation.MergeFrom(other.Conversation);
    }
    if (other.NewConversationCreated != false) {
      NewConversationCreated = other.NewConversationCreated;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (responseHeader_ == null) {
            responseHeader_ = new global::ResponseHeader();
          }
          input.ReadMessage(responseHeader_);
          break;
        }
        case 18: {
          if (conversation_ == null) {
            conversation_ = new global::Conversation();
          }
          input.ReadMessage(conversation_);
          break;
        }
        case 56: {
          NewConversationCreated = input.ReadBool();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DeleteConversationRequest : pb::IMessage<DeleteConversationRequest> {
  private static readonly pb::MessageParser<DeleteConversationRequest> _parser = new pb::MessageParser<DeleteConversationRequest>(() => new DeleteConversationRequest());
  public static pb::MessageParser<DeleteConversationRequest> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[89]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public DeleteConversationRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  public DeleteConversationRequest(DeleteConversationRequest other) : this() {
    RequestHeader = other.requestHeader_ != null ? other.RequestHeader.Clone() : null;
    ConversationId = other.conversationId_ != null ? other.ConversationId.Clone() : null;
    deleteUpperBoundTimestamp_ = other.deleteUpperBoundTimestamp_;
  }

  public DeleteConversationRequest Clone() {
    return new DeleteConversationRequest(this);
  }

  /// <summary>Field number for the "request_header" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader requestHeader_;
  public global::RequestHeader RequestHeader {
    get { return requestHeader_; }
    set {
      requestHeader_ = value;
    }
  }

  /// <summary>Field number for the "conversation_id" field.</summary>
  public const int ConversationIdFieldNumber = 2;
  private global::ConversationId conversationId_;
  public global::ConversationId ConversationId {
    get { return conversationId_; }
    set {
      conversationId_ = value;
    }
  }

  /// <summary>Field number for the "delete_upper_bound_timestamp" field.</summary>
  public const int DeleteUpperBoundTimestampFieldNumber = 3;
  private ulong deleteUpperBoundTimestamp_;
  public ulong DeleteUpperBoundTimestamp {
    get { return deleteUpperBoundTimestamp_; }
    set {
      deleteUpperBoundTimestamp_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as DeleteConversationRequest);
  }

  public bool Equals(DeleteConversationRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (!object.Equals(ConversationId, other.ConversationId)) return false;
    if (DeleteUpperBoundTimestamp != other.DeleteUpperBoundTimestamp) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (requestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (conversationId_ != null) hash ^= ConversationId.GetHashCode();
    if (DeleteUpperBoundTimestamp != 0UL) hash ^= DeleteUpperBoundTimestamp.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (requestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    if (conversationId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ConversationId);
    }
    if (DeleteUpperBoundTimestamp != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(DeleteUpperBoundTimestamp);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (requestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (conversationId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationId);
    }
    if (DeleteUpperBoundTimestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DeleteUpperBoundTimestamp);
    }
    return size;
  }

  public void MergeFrom(DeleteConversationRequest other) {
    if (other == null) {
      return;
    }
    if (other.requestHeader_ != null) {
      if (requestHeader_ == null) {
        requestHeader_ = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.conversationId_ != null) {
      if (conversationId_ == null) {
        conversationId_ = new global::ConversationId();
      }
      ConversationId.MergeFrom(other.ConversationId);
    }
    if (other.DeleteUpperBoundTimestamp != 0UL) {
      DeleteUpperBoundTimestamp = other.DeleteUpperBoundTimestamp;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (requestHeader_ == null) {
            requestHeader_ = new global::RequestHeader();
          }
          input.ReadMessage(requestHeader_);
          break;
        }
        case 18: {
          if (conversationId_ == null) {
            conversationId_ = new global::ConversationId();
          }
          input.ReadMessage(conversationId_);
          break;
        }
        case 24: {
          DeleteUpperBoundTimestamp = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DeleteConversationResponse : pb::IMessage<DeleteConversationResponse> {
  private static readonly pb::MessageParser<DeleteConversationResponse> _parser = new pb::MessageParser<DeleteConversationResponse>(() => new DeleteConversationResponse());
  public static pb::MessageParser<DeleteConversationResponse> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[90]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public DeleteConversationResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  public DeleteConversationResponse(DeleteConversationResponse other) : this() {
    ResponseHeader = other.responseHeader_ != null ? other.ResponseHeader.Clone() : null;
    DeleteAction = other.deleteAction_ != null ? other.DeleteAction.Clone() : null;
  }

  public DeleteConversationResponse Clone() {
    return new DeleteConversationResponse(this);
  }

  /// <summary>Field number for the "response_header" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader responseHeader_;
  public global::ResponseHeader ResponseHeader {
    get { return responseHeader_; }
    set {
      responseHeader_ = value;
    }
  }

  /// <summary>Field number for the "delete_action" field.</summary>
  public const int DeleteActionFieldNumber = 2;
  private global::DeleteAction deleteAction_;
  public global::DeleteAction DeleteAction {
    get { return deleteAction_; }
    set {
      deleteAction_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as DeleteConversationResponse);
  }

  public bool Equals(DeleteConversationResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(DeleteAction, other.DeleteAction)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (responseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (deleteAction_ != null) hash ^= DeleteAction.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (responseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (deleteAction_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(DeleteAction);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (responseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (deleteAction_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeleteAction);
    }
    return size;
  }

  public void MergeFrom(DeleteConversationResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseHeader_ != null) {
      if (responseHeader_ == null) {
        responseHeader_ = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.deleteAction_ != null) {
      if (deleteAction_ == null) {
        deleteAction_ = new global::DeleteAction();
      }
      DeleteAction.MergeFrom(other.DeleteAction);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (responseHeader_ == null) {
            responseHeader_ = new global::ResponseHeader();
          }
          input.ReadMessage(responseHeader_);
          break;
        }
        case 18: {
          if (deleteAction_ == null) {
            deleteAction_ = new global::DeleteAction();
          }
          input.ReadMessage(deleteAction_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class EasterEggRequest : pb::IMessage<EasterEggRequest> {
  private static readonly pb::MessageParser<EasterEggRequest> _parser = new pb::MessageParser<EasterEggRequest>(() => new EasterEggRequest());
  public static pb::MessageParser<EasterEggRequest> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[91]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public EasterEggRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  public EasterEggRequest(EasterEggRequest other) : this() {
    RequestHeader = other.requestHeader_ != null ? other.RequestHeader.Clone() : null;
    ConversationId = other.conversationId_ != null ? other.ConversationId.Clone() : null;
    EasterEgg = other.easterEgg_ != null ? other.EasterEgg.Clone() : null;
  }

  public EasterEggRequest Clone() {
    return new EasterEggRequest(this);
  }

  /// <summary>Field number for the "request_header" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader requestHeader_;
  public global::RequestHeader RequestHeader {
    get { return requestHeader_; }
    set {
      requestHeader_ = value;
    }
  }

  /// <summary>Field number for the "conversation_id" field.</summary>
  public const int ConversationIdFieldNumber = 2;
  private global::ConversationId conversationId_;
  public global::ConversationId ConversationId {
    get { return conversationId_; }
    set {
      conversationId_ = value;
    }
  }

  /// <summary>Field number for the "easter_egg" field.</summary>
  public const int EasterEggFieldNumber = 3;
  private global::EasterEgg easterEgg_;
  public global::EasterEgg EasterEgg {
    get { return easterEgg_; }
    set {
      easterEgg_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as EasterEggRequest);
  }

  public bool Equals(EasterEggRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (!object.Equals(ConversationId, other.ConversationId)) return false;
    if (!object.Equals(EasterEgg, other.EasterEgg)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (requestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (conversationId_ != null) hash ^= ConversationId.GetHashCode();
    if (easterEgg_ != null) hash ^= EasterEgg.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (requestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    if (conversationId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ConversationId);
    }
    if (easterEgg_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(EasterEgg);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (requestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (conversationId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationId);
    }
    if (easterEgg_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EasterEgg);
    }
    return size;
  }

  public void MergeFrom(EasterEggRequest other) {
    if (other == null) {
      return;
    }
    if (other.requestHeader_ != null) {
      if (requestHeader_ == null) {
        requestHeader_ = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.conversationId_ != null) {
      if (conversationId_ == null) {
        conversationId_ = new global::ConversationId();
      }
      ConversationId.MergeFrom(other.ConversationId);
    }
    if (other.easterEgg_ != null) {
      if (easterEgg_ == null) {
        easterEgg_ = new global::EasterEgg();
      }
      EasterEgg.MergeFrom(other.EasterEgg);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (requestHeader_ == null) {
            requestHeader_ = new global::RequestHeader();
          }
          input.ReadMessage(requestHeader_);
          break;
        }
        case 18: {
          if (conversationId_ == null) {
            conversationId_ = new global::ConversationId();
          }
          input.ReadMessage(conversationId_);
          break;
        }
        case 26: {
          if (easterEgg_ == null) {
            easterEgg_ = new global::EasterEgg();
          }
          input.ReadMessage(easterEgg_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class EasterEggResponse : pb::IMessage<EasterEggResponse> {
  private static readonly pb::MessageParser<EasterEggResponse> _parser = new pb::MessageParser<EasterEggResponse>(() => new EasterEggResponse());
  public static pb::MessageParser<EasterEggResponse> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[92]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public EasterEggResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  public EasterEggResponse(EasterEggResponse other) : this() {
    ResponseHeader = other.responseHeader_ != null ? other.ResponseHeader.Clone() : null;
    timestamp_ = other.timestamp_;
  }

  public EasterEggResponse Clone() {
    return new EasterEggResponse(this);
  }

  /// <summary>Field number for the "response_header" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader responseHeader_;
  public global::ResponseHeader ResponseHeader {
    get { return responseHeader_; }
    set {
      responseHeader_ = value;
    }
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 2;
  private ulong timestamp_;
  public ulong Timestamp {
    get { return timestamp_; }
    set {
      timestamp_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as EasterEggResponse);
  }

  public bool Equals(EasterEggResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (Timestamp != other.Timestamp) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (responseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (responseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (Timestamp != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Timestamp);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (responseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (Timestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
    }
    return size;
  }

  public void MergeFrom(EasterEggResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseHeader_ != null) {
      if (responseHeader_ == null) {
        responseHeader_ = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.Timestamp != 0UL) {
      Timestamp = other.Timestamp;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (responseHeader_ == null) {
            responseHeader_ = new global::ResponseHeader();
          }
          input.ReadMessage(responseHeader_);
          break;
        }
        case 16: {
          Timestamp = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GetConversationRequest : pb::IMessage<GetConversationRequest> {
  private static readonly pb::MessageParser<GetConversationRequest> _parser = new pb::MessageParser<GetConversationRequest>(() => new GetConversationRequest());
  public static pb::MessageParser<GetConversationRequest> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[93]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public GetConversationRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  public GetConversationRequest(GetConversationRequest other) : this() {
    RequestHeader = other.requestHeader_ != null ? other.RequestHeader.Clone() : null;
    ConversationSpec = other.conversationSpec_ != null ? other.ConversationSpec.Clone() : null;
    includeEvent_ = other.includeEvent_;
    maxEventsPerConversation_ = other.maxEventsPerConversation_;
    EventContinuationToken = other.eventContinuationToken_ != null ? other.EventContinuationToken.Clone() : null;
  }

  public GetConversationRequest Clone() {
    return new GetConversationRequest(this);
  }

  /// <summary>Field number for the "request_header" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader requestHeader_;
  public global::RequestHeader RequestHeader {
    get { return requestHeader_; }
    set {
      requestHeader_ = value;
    }
  }

  /// <summary>Field number for the "conversation_spec" field.</summary>
  public const int ConversationSpecFieldNumber = 2;
  private global::ConversationSpec conversationSpec_;
  public global::ConversationSpec ConversationSpec {
    get { return conversationSpec_; }
    set {
      conversationSpec_ = value;
    }
  }

  /// <summary>Field number for the "include_event" field.</summary>
  public const int IncludeEventFieldNumber = 4;
  private bool includeEvent_;
  public bool IncludeEvent {
    get { return includeEvent_; }
    set {
      includeEvent_ = value;
    }
  }

  /// <summary>Field number for the "max_events_per_conversation" field.</summary>
  public const int MaxEventsPerConversationFieldNumber = 6;
  private ulong maxEventsPerConversation_;
  public ulong MaxEventsPerConversation {
    get { return maxEventsPerConversation_; }
    set {
      maxEventsPerConversation_ = value;
    }
  }

  /// <summary>Field number for the "event_continuation_token" field.</summary>
  public const int EventContinuationTokenFieldNumber = 7;
  private global::EventContinuationToken eventContinuationToken_;
  public global::EventContinuationToken EventContinuationToken {
    get { return eventContinuationToken_; }
    set {
      eventContinuationToken_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as GetConversationRequest);
  }

  public bool Equals(GetConversationRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (!object.Equals(ConversationSpec, other.ConversationSpec)) return false;
    if (IncludeEvent != other.IncludeEvent) return false;
    if (MaxEventsPerConversation != other.MaxEventsPerConversation) return false;
    if (!object.Equals(EventContinuationToken, other.EventContinuationToken)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (requestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (conversationSpec_ != null) hash ^= ConversationSpec.GetHashCode();
    if (IncludeEvent != false) hash ^= IncludeEvent.GetHashCode();
    if (MaxEventsPerConversation != 0UL) hash ^= MaxEventsPerConversation.GetHashCode();
    if (eventContinuationToken_ != null) hash ^= EventContinuationToken.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (requestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    if (conversationSpec_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ConversationSpec);
    }
    if (IncludeEvent != false) {
      output.WriteRawTag(32);
      output.WriteBool(IncludeEvent);
    }
    if (MaxEventsPerConversation != 0UL) {
      output.WriteRawTag(48);
      output.WriteUInt64(MaxEventsPerConversation);
    }
    if (eventContinuationToken_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(EventContinuationToken);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (requestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (conversationSpec_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationSpec);
    }
    if (IncludeEvent != false) {
      size += 1 + 1;
    }
    if (MaxEventsPerConversation != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxEventsPerConversation);
    }
    if (eventContinuationToken_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventContinuationToken);
    }
    return size;
  }

  public void MergeFrom(GetConversationRequest other) {
    if (other == null) {
      return;
    }
    if (other.requestHeader_ != null) {
      if (requestHeader_ == null) {
        requestHeader_ = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.conversationSpec_ != null) {
      if (conversationSpec_ == null) {
        conversationSpec_ = new global::ConversationSpec();
      }
      ConversationSpec.MergeFrom(other.ConversationSpec);
    }
    if (other.IncludeEvent != false) {
      IncludeEvent = other.IncludeEvent;
    }
    if (other.MaxEventsPerConversation != 0UL) {
      MaxEventsPerConversation = other.MaxEventsPerConversation;
    }
    if (other.eventContinuationToken_ != null) {
      if (eventContinuationToken_ == null) {
        eventContinuationToken_ = new global::EventContinuationToken();
      }
      EventContinuationToken.MergeFrom(other.EventContinuationToken);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (requestHeader_ == null) {
            requestHeader_ = new global::RequestHeader();
          }
          input.ReadMessage(requestHeader_);
          break;
        }
        case 18: {
          if (conversationSpec_ == null) {
            conversationSpec_ = new global::ConversationSpec();
          }
          input.ReadMessage(conversationSpec_);
          break;
        }
        case 32: {
          IncludeEvent = input.ReadBool();
          break;
        }
        case 48: {
          MaxEventsPerConversation = input.ReadUInt64();
          break;
        }
        case 58: {
          if (eventContinuationToken_ == null) {
            eventContinuationToken_ = new global::EventContinuationToken();
          }
          input.ReadMessage(eventContinuationToken_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GetConversationResponse : pb::IMessage<GetConversationResponse> {
  private static readonly pb::MessageParser<GetConversationResponse> _parser = new pb::MessageParser<GetConversationResponse>(() => new GetConversationResponse());
  public static pb::MessageParser<GetConversationResponse> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[94]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public GetConversationResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  public GetConversationResponse(GetConversationResponse other) : this() {
    ResponseHeader = other.responseHeader_ != null ? other.ResponseHeader.Clone() : null;
    ConversationState = other.conversationState_ != null ? other.ConversationState.Clone() : null;
  }

  public GetConversationResponse Clone() {
    return new GetConversationResponse(this);
  }

  /// <summary>Field number for the "response_header" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader responseHeader_;
  public global::ResponseHeader ResponseHeader {
    get { return responseHeader_; }
    set {
      responseHeader_ = value;
    }
  }

  /// <summary>Field number for the "conversation_state" field.</summary>
  public const int ConversationStateFieldNumber = 2;
  private global::ConversationState conversationState_;
  public global::ConversationState ConversationState {
    get { return conversationState_; }
    set {
      conversationState_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as GetConversationResponse);
  }

  public bool Equals(GetConversationResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(ConversationState, other.ConversationState)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (responseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (conversationState_ != null) hash ^= ConversationState.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (responseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (conversationState_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ConversationState);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (responseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (conversationState_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationState);
    }
    return size;
  }

  public void MergeFrom(GetConversationResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseHeader_ != null) {
      if (responseHeader_ == null) {
        responseHeader_ = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.conversationState_ != null) {
      if (conversationState_ == null) {
        conversationState_ = new global::ConversationState();
      }
      ConversationState.MergeFrom(other.ConversationState);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (responseHeader_ == null) {
            responseHeader_ = new global::ResponseHeader();
          }
          input.ReadMessage(responseHeader_);
          break;
        }
        case 18: {
          if (conversationState_ == null) {
            conversationState_ = new global::ConversationState();
          }
          input.ReadMessage(conversationState_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GetEntityByIdRequest : pb::IMessage<GetEntityByIdRequest> {
  private static readonly pb::MessageParser<GetEntityByIdRequest> _parser = new pb::MessageParser<GetEntityByIdRequest>(() => new GetEntityByIdRequest());
  public static pb::MessageParser<GetEntityByIdRequest> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[95]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public GetEntityByIdRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  public GetEntityByIdRequest(GetEntityByIdRequest other) : this() {
    RequestHeader = other.requestHeader_ != null ? other.RequestHeader.Clone() : null;
    batchLookupSpec_ = other.batchLookupSpec_.Clone();
  }

  public GetEntityByIdRequest Clone() {
    return new GetEntityByIdRequest(this);
  }

  /// <summary>Field number for the "request_header" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader requestHeader_;
  public global::RequestHeader RequestHeader {
    get { return requestHeader_; }
    set {
      requestHeader_ = value;
    }
  }

  /// <summary>Field number for the "batch_lookup_spec" field.</summary>
  public const int BatchLookupSpecFieldNumber = 3;
  private static readonly pb::FieldCodec<global::EntityLookupSpec> _repeated_batchLookupSpec_codec
      = pb::FieldCodec.ForMessage(26, global::EntityLookupSpec.Parser);
  private readonly pbc::RepeatedField<global::EntityLookupSpec> batchLookupSpec_ = new pbc::RepeatedField<global::EntityLookupSpec>();
  public pbc::RepeatedField<global::EntityLookupSpec> BatchLookupSpec {
    get { return batchLookupSpec_; }
  }

  public override bool Equals(object other) {
    return Equals(other as GetEntityByIdRequest);
  }

  public bool Equals(GetEntityByIdRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if(!batchLookupSpec_.Equals(other.batchLookupSpec_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (requestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    hash ^= batchLookupSpec_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (requestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    batchLookupSpec_.WriteTo(output, _repeated_batchLookupSpec_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (requestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    size += batchLookupSpec_.CalculateSize(_repeated_batchLookupSpec_codec);
    return size;
  }

  public void MergeFrom(GetEntityByIdRequest other) {
    if (other == null) {
      return;
    }
    if (other.requestHeader_ != null) {
      if (requestHeader_ == null) {
        requestHeader_ = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    batchLookupSpec_.Add(other.batchLookupSpec_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (requestHeader_ == null) {
            requestHeader_ = new global::RequestHeader();
          }
          input.ReadMessage(requestHeader_);
          break;
        }
        case 26: {
          batchLookupSpec_.AddEntriesFrom(input, _repeated_batchLookupSpec_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GetEntityByIdResponse : pb::IMessage<GetEntityByIdResponse> {
  private static readonly pb::MessageParser<GetEntityByIdResponse> _parser = new pb::MessageParser<GetEntityByIdResponse>(() => new GetEntityByIdResponse());
  public static pb::MessageParser<GetEntityByIdResponse> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[96]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public GetEntityByIdResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  public GetEntityByIdResponse(GetEntityByIdResponse other) : this() {
    ResponseHeader = other.responseHeader_ != null ? other.ResponseHeader.Clone() : null;
    entity_ = other.entity_.Clone();
  }

  public GetEntityByIdResponse Clone() {
    return new GetEntityByIdResponse(this);
  }

  /// <summary>Field number for the "response_header" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader responseHeader_;
  public global::ResponseHeader ResponseHeader {
    get { return responseHeader_; }
    set {
      responseHeader_ = value;
    }
  }

  /// <summary>Field number for the "entity" field.</summary>
  public const int EntityFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Entity> _repeated_entity_codec
      = pb::FieldCodec.ForMessage(18, global::Entity.Parser);
  private readonly pbc::RepeatedField<global::Entity> entity_ = new pbc::RepeatedField<global::Entity>();
  public pbc::RepeatedField<global::Entity> Entity {
    get { return entity_; }
  }

  public override bool Equals(object other) {
    return Equals(other as GetEntityByIdResponse);
  }

  public bool Equals(GetEntityByIdResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if(!entity_.Equals(other.entity_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (responseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    hash ^= entity_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (responseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    entity_.WriteTo(output, _repeated_entity_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (responseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    size += entity_.CalculateSize(_repeated_entity_codec);
    return size;
  }

  public void MergeFrom(GetEntityByIdResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseHeader_ != null) {
      if (responseHeader_ == null) {
        responseHeader_ = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    entity_.Add(other.entity_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (responseHeader_ == null) {
            responseHeader_ = new global::ResponseHeader();
          }
          input.ReadMessage(responseHeader_);
          break;
        }
        case 18: {
          entity_.AddEntriesFrom(input, _repeated_entity_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GetSuggestedEntitiesRequest : pb::IMessage<GetSuggestedEntitiesRequest> {
  private static readonly pb::MessageParser<GetSuggestedEntitiesRequest> _parser = new pb::MessageParser<GetSuggestedEntitiesRequest>(() => new GetSuggestedEntitiesRequest());
  public static pb::MessageParser<GetSuggestedEntitiesRequest> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[97]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public GetSuggestedEntitiesRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  public GetSuggestedEntitiesRequest(GetSuggestedEntitiesRequest other) : this() {
    RequestHeader = other.requestHeader_ != null ? other.RequestHeader.Clone() : null;
    Favorites = other.favorites_ != null ? other.Favorites.Clone() : null;
    ContactsYouHangoutWith = other.contactsYouHangoutWith_ != null ? other.ContactsYouHangoutWith.Clone() : null;
    OtherContactsOnHangouts = other.otherContactsOnHangouts_ != null ? other.OtherContactsOnHangouts.Clone() : null;
    OtherContacts = other.otherContacts_ != null ? other.OtherContacts.Clone() : null;
    DismissedContacts = other.dismissedContacts_ != null ? other.DismissedContacts.Clone() : null;
    PinnedFavorites = other.pinnedFavorites_ != null ? other.PinnedFavorites.Clone() : null;
  }

  public GetSuggestedEntitiesRequest Clone() {
    return new GetSuggestedEntitiesRequest(this);
  }

  /// <summary>Field number for the "request_header" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader requestHeader_;
  public global::RequestHeader RequestHeader {
    get { return requestHeader_; }
    set {
      requestHeader_ = value;
    }
  }

  /// <summary>Field number for the "favorites" field.</summary>
  public const int FavoritesFieldNumber = 8;
  private global::SuggestedContactGroupHash favorites_;
  public global::SuggestedContactGroupHash Favorites {
    get { return favorites_; }
    set {
      favorites_ = value;
    }
  }

  /// <summary>Field number for the "contacts_you_hangout_with" field.</summary>
  public const int ContactsYouHangoutWithFieldNumber = 9;
  private global::SuggestedContactGroupHash contactsYouHangoutWith_;
  public global::SuggestedContactGroupHash ContactsYouHangoutWith {
    get { return contactsYouHangoutWith_; }
    set {
      contactsYouHangoutWith_ = value;
    }
  }

  /// <summary>Field number for the "other_contacts_on_hangouts" field.</summary>
  public const int OtherContactsOnHangoutsFieldNumber = 10;
  private global::SuggestedContactGroupHash otherContactsOnHangouts_;
  public global::SuggestedContactGroupHash OtherContactsOnHangouts {
    get { return otherContactsOnHangouts_; }
    set {
      otherContactsOnHangouts_ = value;
    }
  }

  /// <summary>Field number for the "other_contacts" field.</summary>
  public const int OtherContactsFieldNumber = 11;
  private global::SuggestedContactGroupHash otherContacts_;
  public global::SuggestedContactGroupHash OtherContacts {
    get { return otherContacts_; }
    set {
      otherContacts_ = value;
    }
  }

  /// <summary>Field number for the "dismissed_contacts" field.</summary>
  public const int DismissedContactsFieldNumber = 12;
  private global::SuggestedContactGroupHash dismissedContacts_;
  public global::SuggestedContactGroupHash DismissedContacts {
    get { return dismissedContacts_; }
    set {
      dismissedContacts_ = value;
    }
  }

  /// <summary>Field number for the "pinned_favorites" field.</summary>
  public const int PinnedFavoritesFieldNumber = 13;
  private global::SuggestedContactGroupHash pinnedFavorites_;
  public global::SuggestedContactGroupHash PinnedFavorites {
    get { return pinnedFavorites_; }
    set {
      pinnedFavorites_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as GetSuggestedEntitiesRequest);
  }

  public bool Equals(GetSuggestedEntitiesRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (!object.Equals(Favorites, other.Favorites)) return false;
    if (!object.Equals(ContactsYouHangoutWith, other.ContactsYouHangoutWith)) return false;
    if (!object.Equals(OtherContactsOnHangouts, other.OtherContactsOnHangouts)) return false;
    if (!object.Equals(OtherContacts, other.OtherContacts)) return false;
    if (!object.Equals(DismissedContacts, other.DismissedContacts)) return false;
    if (!object.Equals(PinnedFavorites, other.PinnedFavorites)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (requestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (favorites_ != null) hash ^= Favorites.GetHashCode();
    if (contactsYouHangoutWith_ != null) hash ^= ContactsYouHangoutWith.GetHashCode();
    if (otherContactsOnHangouts_ != null) hash ^= OtherContactsOnHangouts.GetHashCode();
    if (otherContacts_ != null) hash ^= OtherContacts.GetHashCode();
    if (dismissedContacts_ != null) hash ^= DismissedContacts.GetHashCode();
    if (pinnedFavorites_ != null) hash ^= PinnedFavorites.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (requestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    if (favorites_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Favorites);
    }
    if (contactsYouHangoutWith_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(ContactsYouHangoutWith);
    }
    if (otherContactsOnHangouts_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(OtherContactsOnHangouts);
    }
    if (otherContacts_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(OtherContacts);
    }
    if (dismissedContacts_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(DismissedContacts);
    }
    if (pinnedFavorites_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(PinnedFavorites);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (requestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (favorites_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Favorites);
    }
    if (contactsYouHangoutWith_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContactsYouHangoutWith);
    }
    if (otherContactsOnHangouts_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtherContactsOnHangouts);
    }
    if (otherContacts_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtherContacts);
    }
    if (dismissedContacts_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DismissedContacts);
    }
    if (pinnedFavorites_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PinnedFavorites);
    }
    return size;
  }

  public void MergeFrom(GetSuggestedEntitiesRequest other) {
    if (other == null) {
      return;
    }
    if (other.requestHeader_ != null) {
      if (requestHeader_ == null) {
        requestHeader_ = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.favorites_ != null) {
      if (favorites_ == null) {
        favorites_ = new global::SuggestedContactGroupHash();
      }
      Favorites.MergeFrom(other.Favorites);
    }
    if (other.contactsYouHangoutWith_ != null) {
      if (contactsYouHangoutWith_ == null) {
        contactsYouHangoutWith_ = new global::SuggestedContactGroupHash();
      }
      ContactsYouHangoutWith.MergeFrom(other.ContactsYouHangoutWith);
    }
    if (other.otherContactsOnHangouts_ != null) {
      if (otherContactsOnHangouts_ == null) {
        otherContactsOnHangouts_ = new global::SuggestedContactGroupHash();
      }
      OtherContactsOnHangouts.MergeFrom(other.OtherContactsOnHangouts);
    }
    if (other.otherContacts_ != null) {
      if (otherContacts_ == null) {
        otherContacts_ = new global::SuggestedContactGroupHash();
      }
      OtherContacts.MergeFrom(other.OtherContacts);
    }
    if (other.dismissedContacts_ != null) {
      if (dismissedContacts_ == null) {
        dismissedContacts_ = new global::SuggestedContactGroupHash();
      }
      DismissedContacts.MergeFrom(other.DismissedContacts);
    }
    if (other.pinnedFavorites_ != null) {
      if (pinnedFavorites_ == null) {
        pinnedFavorites_ = new global::SuggestedContactGroupHash();
      }
      PinnedFavorites.MergeFrom(other.PinnedFavorites);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (requestHeader_ == null) {
            requestHeader_ = new global::RequestHeader();
          }
          input.ReadMessage(requestHeader_);
          break;
        }
        case 66: {
          if (favorites_ == null) {
            favorites_ = new global::SuggestedContactGroupHash();
          }
          input.ReadMessage(favorites_);
          break;
        }
        case 74: {
          if (contactsYouHangoutWith_ == null) {
            contactsYouHangoutWith_ = new global::SuggestedContactGroupHash();
          }
          input.ReadMessage(contactsYouHangoutWith_);
          break;
        }
        case 82: {
          if (otherContactsOnHangouts_ == null) {
            otherContactsOnHangouts_ = new global::SuggestedContactGroupHash();
          }
          input.ReadMessage(otherContactsOnHangouts_);
          break;
        }
        case 90: {
          if (otherContacts_ == null) {
            otherContacts_ = new global::SuggestedContactGroupHash();
          }
          input.ReadMessage(otherContacts_);
          break;
        }
        case 98: {
          if (dismissedContacts_ == null) {
            dismissedContacts_ = new global::SuggestedContactGroupHash();
          }
          input.ReadMessage(dismissedContacts_);
          break;
        }
        case 106: {
          if (pinnedFavorites_ == null) {
            pinnedFavorites_ = new global::SuggestedContactGroupHash();
          }
          input.ReadMessage(pinnedFavorites_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GetSuggestedEntitiesResponse : pb::IMessage<GetSuggestedEntitiesResponse> {
  private static readonly pb::MessageParser<GetSuggestedEntitiesResponse> _parser = new pb::MessageParser<GetSuggestedEntitiesResponse>(() => new GetSuggestedEntitiesResponse());
  public static pb::MessageParser<GetSuggestedEntitiesResponse> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[98]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public GetSuggestedEntitiesResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  public GetSuggestedEntitiesResponse(GetSuggestedEntitiesResponse other) : this() {
    ResponseHeader = other.responseHeader_ != null ? other.ResponseHeader.Clone() : null;
    entity_ = other.entity_.Clone();
    Favorites = other.favorites_ != null ? other.Favorites.Clone() : null;
    ContactsYouHangoutWith = other.contactsYouHangoutWith_ != null ? other.ContactsYouHangoutWith.Clone() : null;
    OtherContactsOnHangouts = other.otherContactsOnHangouts_ != null ? other.OtherContactsOnHangouts.Clone() : null;
    OtherContacts = other.otherContacts_ != null ? other.OtherContacts.Clone() : null;
    DismissedContacts = other.dismissedContacts_ != null ? other.DismissedContacts.Clone() : null;
    PinnedFavorites = other.pinnedFavorites_ != null ? other.PinnedFavorites.Clone() : null;
  }

  public GetSuggestedEntitiesResponse Clone() {
    return new GetSuggestedEntitiesResponse(this);
  }

  /// <summary>Field number for the "response_header" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader responseHeader_;
  public global::ResponseHeader ResponseHeader {
    get { return responseHeader_; }
    set {
      responseHeader_ = value;
    }
  }

  /// <summary>Field number for the "entity" field.</summary>
  public const int EntityFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Entity> _repeated_entity_codec
      = pb::FieldCodec.ForMessage(18, global::Entity.Parser);
  private readonly pbc::RepeatedField<global::Entity> entity_ = new pbc::RepeatedField<global::Entity>();
  public pbc::RepeatedField<global::Entity> Entity {
    get { return entity_; }
  }

  /// <summary>Field number for the "favorites" field.</summary>
  public const int FavoritesFieldNumber = 4;
  private global::SuggestedContactGroup favorites_;
  public global::SuggestedContactGroup Favorites {
    get { return favorites_; }
    set {
      favorites_ = value;
    }
  }

  /// <summary>Field number for the "contacts_you_hangout_with" field.</summary>
  public const int ContactsYouHangoutWithFieldNumber = 5;
  private global::SuggestedContactGroup contactsYouHangoutWith_;
  public global::SuggestedContactGroup ContactsYouHangoutWith {
    get { return contactsYouHangoutWith_; }
    set {
      contactsYouHangoutWith_ = value;
    }
  }

  /// <summary>Field number for the "other_contacts_on_hangouts" field.</summary>
  public const int OtherContactsOnHangoutsFieldNumber = 6;
  private global::SuggestedContactGroup otherContactsOnHangouts_;
  public global::SuggestedContactGroup OtherContactsOnHangouts {
    get { return otherContactsOnHangouts_; }
    set {
      otherContactsOnHangouts_ = value;
    }
  }

  /// <summary>Field number for the "other_contacts" field.</summary>
  public const int OtherContactsFieldNumber = 7;
  private global::SuggestedContactGroup otherContacts_;
  public global::SuggestedContactGroup OtherContacts {
    get { return otherContacts_; }
    set {
      otherContacts_ = value;
    }
  }

  /// <summary>Field number for the "dismissed_contacts" field.</summary>
  public const int DismissedContactsFieldNumber = 8;
  private global::SuggestedContactGroup dismissedContacts_;
  public global::SuggestedContactGroup DismissedContacts {
    get { return dismissedContacts_; }
    set {
      dismissedContacts_ = value;
    }
  }

  /// <summary>Field number for the "pinned_favorites" field.</summary>
  public const int PinnedFavoritesFieldNumber = 9;
  private global::SuggestedContactGroup pinnedFavorites_;
  public global::SuggestedContactGroup PinnedFavorites {
    get { return pinnedFavorites_; }
    set {
      pinnedFavorites_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as GetSuggestedEntitiesResponse);
  }

  public bool Equals(GetSuggestedEntitiesResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if(!entity_.Equals(other.entity_)) return false;
    if (!object.Equals(Favorites, other.Favorites)) return false;
    if (!object.Equals(ContactsYouHangoutWith, other.ContactsYouHangoutWith)) return false;
    if (!object.Equals(OtherContactsOnHangouts, other.OtherContactsOnHangouts)) return false;
    if (!object.Equals(OtherContacts, other.OtherContacts)) return false;
    if (!object.Equals(DismissedContacts, other.DismissedContacts)) return false;
    if (!object.Equals(PinnedFavorites, other.PinnedFavorites)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (responseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    hash ^= entity_.GetHashCode();
    if (favorites_ != null) hash ^= Favorites.GetHashCode();
    if (contactsYouHangoutWith_ != null) hash ^= ContactsYouHangoutWith.GetHashCode();
    if (otherContactsOnHangouts_ != null) hash ^= OtherContactsOnHangouts.GetHashCode();
    if (otherContacts_ != null) hash ^= OtherContacts.GetHashCode();
    if (dismissedContacts_ != null) hash ^= DismissedContacts.GetHashCode();
    if (pinnedFavorites_ != null) hash ^= PinnedFavorites.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (responseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    entity_.WriteTo(output, _repeated_entity_codec);
    if (favorites_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Favorites);
    }
    if (contactsYouHangoutWith_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(ContactsYouHangoutWith);
    }
    if (otherContactsOnHangouts_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(OtherContactsOnHangouts);
    }
    if (otherContacts_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(OtherContacts);
    }
    if (dismissedContacts_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(DismissedContacts);
    }
    if (pinnedFavorites_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(PinnedFavorites);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (responseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    size += entity_.CalculateSize(_repeated_entity_codec);
    if (favorites_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Favorites);
    }
    if (contactsYouHangoutWith_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContactsYouHangoutWith);
    }
    if (otherContactsOnHangouts_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtherContactsOnHangouts);
    }
    if (otherContacts_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtherContacts);
    }
    if (dismissedContacts_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DismissedContacts);
    }
    if (pinnedFavorites_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PinnedFavorites);
    }
    return size;
  }

  public void MergeFrom(GetSuggestedEntitiesResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseHeader_ != null) {
      if (responseHeader_ == null) {
        responseHeader_ = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    entity_.Add(other.entity_);
    if (other.favorites_ != null) {
      if (favorites_ == null) {
        favorites_ = new global::SuggestedContactGroup();
      }
      Favorites.MergeFrom(other.Favorites);
    }
    if (other.contactsYouHangoutWith_ != null) {
      if (contactsYouHangoutWith_ == null) {
        contactsYouHangoutWith_ = new global::SuggestedContactGroup();
      }
      ContactsYouHangoutWith.MergeFrom(other.ContactsYouHangoutWith);
    }
    if (other.otherContactsOnHangouts_ != null) {
      if (otherContactsOnHangouts_ == null) {
        otherContactsOnHangouts_ = new global::SuggestedContactGroup();
      }
      OtherContactsOnHangouts.MergeFrom(other.OtherContactsOnHangouts);
    }
    if (other.otherContacts_ != null) {
      if (otherContacts_ == null) {
        otherContacts_ = new global::SuggestedContactGroup();
      }
      OtherContacts.MergeFrom(other.OtherContacts);
    }
    if (other.dismissedContacts_ != null) {
      if (dismissedContacts_ == null) {
        dismissedContacts_ = new global::SuggestedContactGroup();
      }
      DismissedContacts.MergeFrom(other.DismissedContacts);
    }
    if (other.pinnedFavorites_ != null) {
      if (pinnedFavorites_ == null) {
        pinnedFavorites_ = new global::SuggestedContactGroup();
      }
      PinnedFavorites.MergeFrom(other.PinnedFavorites);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (responseHeader_ == null) {
            responseHeader_ = new global::ResponseHeader();
          }
          input.ReadMessage(responseHeader_);
          break;
        }
        case 18: {
          entity_.AddEntriesFrom(input, _repeated_entity_codec);
          break;
        }
        case 34: {
          if (favorites_ == null) {
            favorites_ = new global::SuggestedContactGroup();
          }
          input.ReadMessage(favorites_);
          break;
        }
        case 42: {
          if (contactsYouHangoutWith_ == null) {
            contactsYouHangoutWith_ = new global::SuggestedContactGroup();
          }
          input.ReadMessage(contactsYouHangoutWith_);
          break;
        }
        case 50: {
          if (otherContactsOnHangouts_ == null) {
            otherContactsOnHangouts_ = new global::SuggestedContactGroup();
          }
          input.ReadMessage(otherContactsOnHangouts_);
          break;
        }
        case 58: {
          if (otherContacts_ == null) {
            otherContacts_ = new global::SuggestedContactGroup();
          }
          input.ReadMessage(otherContacts_);
          break;
        }
        case 66: {
          if (dismissedContacts_ == null) {
            dismissedContacts_ = new global::SuggestedContactGroup();
          }
          input.ReadMessage(dismissedContacts_);
          break;
        }
        case 74: {
          if (pinnedFavorites_ == null) {
            pinnedFavorites_ = new global::SuggestedContactGroup();
          }
          input.ReadMessage(pinnedFavorites_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GetSelfInfoRequest : pb::IMessage<GetSelfInfoRequest> {
  private static readonly pb::MessageParser<GetSelfInfoRequest> _parser = new pb::MessageParser<GetSelfInfoRequest>(() => new GetSelfInfoRequest());
  public static pb::MessageParser<GetSelfInfoRequest> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[99]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public GetSelfInfoRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  public GetSelfInfoRequest(GetSelfInfoRequest other) : this() {
    RequestHeader = other.requestHeader_ != null ? other.RequestHeader.Clone() : null;
  }

  public GetSelfInfoRequest Clone() {
    return new GetSelfInfoRequest(this);
  }

  /// <summary>Field number for the "request_header" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader requestHeader_;
  public global::RequestHeader RequestHeader {
    get { return requestHeader_; }
    set {
      requestHeader_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as GetSelfInfoRequest);
  }

  public bool Equals(GetSelfInfoRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (requestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (requestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (requestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    return size;
  }

  public void MergeFrom(GetSelfInfoRequest other) {
    if (other == null) {
      return;
    }
    if (other.requestHeader_ != null) {
      if (requestHeader_ == null) {
        requestHeader_ = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (requestHeader_ == null) {
            requestHeader_ = new global::RequestHeader();
          }
          input.ReadMessage(requestHeader_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GetSelfInfoResponse : pb::IMessage<GetSelfInfoResponse> {
  private static readonly pb::MessageParser<GetSelfInfoResponse> _parser = new pb::MessageParser<GetSelfInfoResponse>(() => new GetSelfInfoResponse());
  public static pb::MessageParser<GetSelfInfoResponse> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[100]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public GetSelfInfoResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  public GetSelfInfoResponse(GetSelfInfoResponse other) : this() {
    ResponseHeader = other.responseHeader_ != null ? other.ResponseHeader.Clone() : null;
    SelfEntity = other.selfEntity_ != null ? other.SelfEntity.Clone() : null;
    isKnownMinor_ = other.isKnownMinor_;
    DndState = other.dndState_ != null ? other.DndState.Clone() : null;
    DesktopOffSetting = other.desktopOffSetting_ != null ? other.DesktopOffSetting.Clone() : null;
    PhoneData = other.phoneData_ != null ? other.PhoneData.Clone() : null;
    configurationBit_ = other.configurationBit_.Clone();
    DesktopOffState = other.desktopOffState_ != null ? other.DesktopOffState.Clone() : null;
    googlePlusUser_ = other.googlePlusUser_;
    DesktopSoundSetting = other.desktopSoundSetting_ != null ? other.DesktopSoundSetting.Clone() : null;
    RichPresenceState = other.richPresenceState_ != null ? other.RichPresenceState.Clone() : null;
    DefaultCountry = other.defaultCountry_ != null ? other.DefaultCountry.Clone() : null;
  }

  public GetSelfInfoResponse Clone() {
    return new GetSelfInfoResponse(this);
  }

  /// <summary>Field number for the "response_header" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader responseHeader_;
  public global::ResponseHeader ResponseHeader {
    get { return responseHeader_; }
    set {
      responseHeader_ = value;
    }
  }

  /// <summary>Field number for the "self_entity" field.</summary>
  public const int SelfEntityFieldNumber = 2;
  private global::Entity selfEntity_;
  public global::Entity SelfEntity {
    get { return selfEntity_; }
    set {
      selfEntity_ = value;
    }
  }

  /// <summary>Field number for the "is_known_minor" field.</summary>
  public const int IsKnownMinorFieldNumber = 3;
  private bool isKnownMinor_;
  public bool IsKnownMinor {
    get { return isKnownMinor_; }
    set {
      isKnownMinor_ = value;
    }
  }

  /// <summary>Field number for the "dnd_state" field.</summary>
  public const int DndStateFieldNumber = 5;
  private global::DoNotDisturbSetting dndState_;
  public global::DoNotDisturbSetting DndState {
    get { return dndState_; }
    set {
      dndState_ = value;
    }
  }

  /// <summary>Field number for the "desktop_off_setting" field.</summary>
  public const int DesktopOffSettingFieldNumber = 6;
  private global::DesktopOffSetting desktopOffSetting_;
  public global::DesktopOffSetting DesktopOffSetting {
    get { return desktopOffSetting_; }
    set {
      desktopOffSetting_ = value;
    }
  }

  /// <summary>Field number for the "phone_data" field.</summary>
  public const int PhoneDataFieldNumber = 7;
  private global::PhoneData phoneData_;
  public global::PhoneData PhoneData {
    get { return phoneData_; }
    set {
      phoneData_ = value;
    }
  }

  /// <summary>Field number for the "configuration_bit" field.</summary>
  public const int ConfigurationBitFieldNumber = 8;
  private static readonly pb::FieldCodec<global::ConfigurationBit> _repeated_configurationBit_codec
      = pb::FieldCodec.ForMessage(66, global::ConfigurationBit.Parser);
  private readonly pbc::RepeatedField<global::ConfigurationBit> configurationBit_ = new pbc::RepeatedField<global::ConfigurationBit>();
  public pbc::RepeatedField<global::ConfigurationBit> ConfigurationBit {
    get { return configurationBit_; }
  }

  /// <summary>Field number for the "desktop_off_state" field.</summary>
  public const int DesktopOffStateFieldNumber = 9;
  private global::DesktopOffState desktopOffState_;
  public global::DesktopOffState DesktopOffState {
    get { return desktopOffState_; }
    set {
      desktopOffState_ = value;
    }
  }

  /// <summary>Field number for the "google_plus_user" field.</summary>
  public const int GooglePlusUserFieldNumber = 10;
  private bool googlePlusUser_;
  public bool GooglePlusUser {
    get { return googlePlusUser_; }
    set {
      googlePlusUser_ = value;
    }
  }

  /// <summary>Field number for the "desktop_sound_setting" field.</summary>
  public const int DesktopSoundSettingFieldNumber = 11;
  private global::DesktopSoundSetting desktopSoundSetting_;
  public global::DesktopSoundSetting DesktopSoundSetting {
    get { return desktopSoundSetting_; }
    set {
      desktopSoundSetting_ = value;
    }
  }

  /// <summary>Field number for the "rich_presence_state" field.</summary>
  public const int RichPresenceStateFieldNumber = 12;
  private global::RichPresenceState richPresenceState_;
  public global::RichPresenceState RichPresenceState {
    get { return richPresenceState_; }
    set {
      richPresenceState_ = value;
    }
  }

  /// <summary>Field number for the "default_country" field.</summary>
  public const int DefaultCountryFieldNumber = 19;
  private global::Country defaultCountry_;
  public global::Country DefaultCountry {
    get { return defaultCountry_; }
    set {
      defaultCountry_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as GetSelfInfoResponse);
  }

  public bool Equals(GetSelfInfoResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(SelfEntity, other.SelfEntity)) return false;
    if (IsKnownMinor != other.IsKnownMinor) return false;
    if (!object.Equals(DndState, other.DndState)) return false;
    if (!object.Equals(DesktopOffSetting, other.DesktopOffSetting)) return false;
    if (!object.Equals(PhoneData, other.PhoneData)) return false;
    if(!configurationBit_.Equals(other.configurationBit_)) return false;
    if (!object.Equals(DesktopOffState, other.DesktopOffState)) return false;
    if (GooglePlusUser != other.GooglePlusUser) return false;
    if (!object.Equals(DesktopSoundSetting, other.DesktopSoundSetting)) return false;
    if (!object.Equals(RichPresenceState, other.RichPresenceState)) return false;
    if (!object.Equals(DefaultCountry, other.DefaultCountry)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (responseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (selfEntity_ != null) hash ^= SelfEntity.GetHashCode();
    if (IsKnownMinor != false) hash ^= IsKnownMinor.GetHashCode();
    if (dndState_ != null) hash ^= DndState.GetHashCode();
    if (desktopOffSetting_ != null) hash ^= DesktopOffSetting.GetHashCode();
    if (phoneData_ != null) hash ^= PhoneData.GetHashCode();
    hash ^= configurationBit_.GetHashCode();
    if (desktopOffState_ != null) hash ^= DesktopOffState.GetHashCode();
    if (GooglePlusUser != false) hash ^= GooglePlusUser.GetHashCode();
    if (desktopSoundSetting_ != null) hash ^= DesktopSoundSetting.GetHashCode();
    if (richPresenceState_ != null) hash ^= RichPresenceState.GetHashCode();
    if (defaultCountry_ != null) hash ^= DefaultCountry.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (responseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (selfEntity_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(SelfEntity);
    }
    if (IsKnownMinor != false) {
      output.WriteRawTag(24);
      output.WriteBool(IsKnownMinor);
    }
    if (dndState_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(DndState);
    }
    if (desktopOffSetting_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(DesktopOffSetting);
    }
    if (phoneData_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(PhoneData);
    }
    configurationBit_.WriteTo(output, _repeated_configurationBit_codec);
    if (desktopOffState_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(DesktopOffState);
    }
    if (GooglePlusUser != false) {
      output.WriteRawTag(80);
      output.WriteBool(GooglePlusUser);
    }
    if (desktopSoundSetting_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(DesktopSoundSetting);
    }
    if (richPresenceState_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(RichPresenceState);
    }
    if (defaultCountry_ != null) {
      output.WriteRawTag(154, 1);
      output.WriteMessage(DefaultCountry);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (responseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (selfEntity_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfEntity);
    }
    if (IsKnownMinor != false) {
      size += 1 + 1;
    }
    if (dndState_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DndState);
    }
    if (desktopOffSetting_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DesktopOffSetting);
    }
    if (phoneData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PhoneData);
    }
    size += configurationBit_.CalculateSize(_repeated_configurationBit_codec);
    if (desktopOffState_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DesktopOffState);
    }
    if (GooglePlusUser != false) {
      size += 1 + 1;
    }
    if (desktopSoundSetting_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DesktopSoundSetting);
    }
    if (richPresenceState_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RichPresenceState);
    }
    if (defaultCountry_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(DefaultCountry);
    }
    return size;
  }

  public void MergeFrom(GetSelfInfoResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseHeader_ != null) {
      if (responseHeader_ == null) {
        responseHeader_ = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.selfEntity_ != null) {
      if (selfEntity_ == null) {
        selfEntity_ = new global::Entity();
      }
      SelfEntity.MergeFrom(other.SelfEntity);
    }
    if (other.IsKnownMinor != false) {
      IsKnownMinor = other.IsKnownMinor;
    }
    if (other.dndState_ != null) {
      if (dndState_ == null) {
        dndState_ = new global::DoNotDisturbSetting();
      }
      DndState.MergeFrom(other.DndState);
    }
    if (other.desktopOffSetting_ != null) {
      if (desktopOffSetting_ == null) {
        desktopOffSetting_ = new global::DesktopOffSetting();
      }
      DesktopOffSetting.MergeFrom(other.DesktopOffSetting);
    }
    if (other.phoneData_ != null) {
      if (phoneData_ == null) {
        phoneData_ = new global::PhoneData();
      }
      PhoneData.MergeFrom(other.PhoneData);
    }
    configurationBit_.Add(other.configurationBit_);
    if (other.desktopOffState_ != null) {
      if (desktopOffState_ == null) {
        desktopOffState_ = new global::DesktopOffState();
      }
      DesktopOffState.MergeFrom(other.DesktopOffState);
    }
    if (other.GooglePlusUser != false) {
      GooglePlusUser = other.GooglePlusUser;
    }
    if (other.desktopSoundSetting_ != null) {
      if (desktopSoundSetting_ == null) {
        desktopSoundSetting_ = new global::DesktopSoundSetting();
      }
      DesktopSoundSetting.MergeFrom(other.DesktopSoundSetting);
    }
    if (other.richPresenceState_ != null) {
      if (richPresenceState_ == null) {
        richPresenceState_ = new global::RichPresenceState();
      }
      RichPresenceState.MergeFrom(other.RichPresenceState);
    }
    if (other.defaultCountry_ != null) {
      if (defaultCountry_ == null) {
        defaultCountry_ = new global::Country();
      }
      DefaultCountry.MergeFrom(other.DefaultCountry);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (responseHeader_ == null) {
            responseHeader_ = new global::ResponseHeader();
          }
          input.ReadMessage(responseHeader_);
          break;
        }
        case 18: {
          if (selfEntity_ == null) {
            selfEntity_ = new global::Entity();
          }
          input.ReadMessage(selfEntity_);
          break;
        }
        case 24: {
          IsKnownMinor = input.ReadBool();
          break;
        }
        case 42: {
          if (dndState_ == null) {
            dndState_ = new global::DoNotDisturbSetting();
          }
          input.ReadMessage(dndState_);
          break;
        }
        case 50: {
          if (desktopOffSetting_ == null) {
            desktopOffSetting_ = new global::DesktopOffSetting();
          }
          input.ReadMessage(desktopOffSetting_);
          break;
        }
        case 58: {
          if (phoneData_ == null) {
            phoneData_ = new global::PhoneData();
          }
          input.ReadMessage(phoneData_);
          break;
        }
        case 66: {
          configurationBit_.AddEntriesFrom(input, _repeated_configurationBit_codec);
          break;
        }
        case 74: {
          if (desktopOffState_ == null) {
            desktopOffState_ = new global::DesktopOffState();
          }
          input.ReadMessage(desktopOffState_);
          break;
        }
        case 80: {
          GooglePlusUser = input.ReadBool();
          break;
        }
        case 90: {
          if (desktopSoundSetting_ == null) {
            desktopSoundSetting_ = new global::DesktopSoundSetting();
          }
          input.ReadMessage(desktopSoundSetting_);
          break;
        }
        case 98: {
          if (richPresenceState_ == null) {
            richPresenceState_ = new global::RichPresenceState();
          }
          input.ReadMessage(richPresenceState_);
          break;
        }
        case 154: {
          if (defaultCountry_ == null) {
            defaultCountry_ = new global::Country();
          }
          input.ReadMessage(defaultCountry_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class QueryPresenceRequest : pb::IMessage<QueryPresenceRequest> {
  private static readonly pb::MessageParser<QueryPresenceRequest> _parser = new pb::MessageParser<QueryPresenceRequest>(() => new QueryPresenceRequest());
  public static pb::MessageParser<QueryPresenceRequest> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[101]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public QueryPresenceRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  public QueryPresenceRequest(QueryPresenceRequest other) : this() {
    RequestHeader = other.requestHeader_ != null ? other.RequestHeader.Clone() : null;
    participantId_ = other.participantId_.Clone();
    fieldMask_ = other.fieldMask_.Clone();
  }

  public QueryPresenceRequest Clone() {
    return new QueryPresenceRequest(this);
  }

  /// <summary>Field number for the "request_header" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader requestHeader_;
  public global::RequestHeader RequestHeader {
    get { return requestHeader_; }
    set {
      requestHeader_ = value;
    }
  }

  /// <summary>Field number for the "participant_id" field.</summary>
  public const int ParticipantIdFieldNumber = 2;
  private static readonly pb::FieldCodec<global::ParticipantId> _repeated_participantId_codec
      = pb::FieldCodec.ForMessage(18, global::ParticipantId.Parser);
  private readonly pbc::RepeatedField<global::ParticipantId> participantId_ = new pbc::RepeatedField<global::ParticipantId>();
  public pbc::RepeatedField<global::ParticipantId> ParticipantId {
    get { return participantId_; }
  }

  /// <summary>Field number for the "field_mask" field.</summary>
  public const int FieldMaskFieldNumber = 3;
  private static readonly pb::FieldCodec<global::FieldMask> _repeated_fieldMask_codec
      = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::FieldMask) x);
  private readonly pbc::RepeatedField<global::FieldMask> fieldMask_ = new pbc::RepeatedField<global::FieldMask>();
  public pbc::RepeatedField<global::FieldMask> FieldMask {
    get { return fieldMask_; }
  }

  public override bool Equals(object other) {
    return Equals(other as QueryPresenceRequest);
  }

  public bool Equals(QueryPresenceRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if(!participantId_.Equals(other.participantId_)) return false;
    if(!fieldMask_.Equals(other.fieldMask_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (requestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    hash ^= participantId_.GetHashCode();
    hash ^= fieldMask_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (requestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    participantId_.WriteTo(output, _repeated_participantId_codec);
    fieldMask_.WriteTo(output, _repeated_fieldMask_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (requestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    size += participantId_.CalculateSize(_repeated_participantId_codec);
    size += fieldMask_.CalculateSize(_repeated_fieldMask_codec);
    return size;
  }

  public void MergeFrom(QueryPresenceRequest other) {
    if (other == null) {
      return;
    }
    if (other.requestHeader_ != null) {
      if (requestHeader_ == null) {
        requestHeader_ = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    participantId_.Add(other.participantId_);
    fieldMask_.Add(other.fieldMask_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (requestHeader_ == null) {
            requestHeader_ = new global::RequestHeader();
          }
          input.ReadMessage(requestHeader_);
          break;
        }
        case 18: {
          participantId_.AddEntriesFrom(input, _repeated_participantId_codec);
          break;
        }
        case 26:
        case 24: {
          fieldMask_.AddEntriesFrom(input, _repeated_fieldMask_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class QueryPresenceResponse : pb::IMessage<QueryPresenceResponse> {
  private static readonly pb::MessageParser<QueryPresenceResponse> _parser = new pb::MessageParser<QueryPresenceResponse>(() => new QueryPresenceResponse());
  public static pb::MessageParser<QueryPresenceResponse> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[102]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public QueryPresenceResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  public QueryPresenceResponse(QueryPresenceResponse other) : this() {
    ResponseHeader = other.responseHeader_ != null ? other.ResponseHeader.Clone() : null;
    presenceResult_ = other.presenceResult_.Clone();
  }

  public QueryPresenceResponse Clone() {
    return new QueryPresenceResponse(this);
  }

  /// <summary>Field number for the "response_header" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader responseHeader_;
  public global::ResponseHeader ResponseHeader {
    get { return responseHeader_; }
    set {
      responseHeader_ = value;
    }
  }

  /// <summary>Field number for the "presence_result" field.</summary>
  public const int PresenceResultFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PresenceResult> _repeated_presenceResult_codec
      = pb::FieldCodec.ForMessage(18, global::PresenceResult.Parser);
  private readonly pbc::RepeatedField<global::PresenceResult> presenceResult_ = new pbc::RepeatedField<global::PresenceResult>();
  public pbc::RepeatedField<global::PresenceResult> PresenceResult {
    get { return presenceResult_; }
  }

  public override bool Equals(object other) {
    return Equals(other as QueryPresenceResponse);
  }

  public bool Equals(QueryPresenceResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if(!presenceResult_.Equals(other.presenceResult_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (responseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    hash ^= presenceResult_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (responseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    presenceResult_.WriteTo(output, _repeated_presenceResult_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (responseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    size += presenceResult_.CalculateSize(_repeated_presenceResult_codec);
    return size;
  }

  public void MergeFrom(QueryPresenceResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseHeader_ != null) {
      if (responseHeader_ == null) {
        responseHeader_ = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    presenceResult_.Add(other.presenceResult_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (responseHeader_ == null) {
            responseHeader_ = new global::ResponseHeader();
          }
          input.ReadMessage(responseHeader_);
          break;
        }
        case 18: {
          presenceResult_.AddEntriesFrom(input, _repeated_presenceResult_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class RemoveUserRequest : pb::IMessage<RemoveUserRequest> {
  private static readonly pb::MessageParser<RemoveUserRequest> _parser = new pb::MessageParser<RemoveUserRequest>(() => new RemoveUserRequest());
  public static pb::MessageParser<RemoveUserRequest> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[103]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public RemoveUserRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  public RemoveUserRequest(RemoveUserRequest other) : this() {
    RequestHeader = other.requestHeader_ != null ? other.RequestHeader.Clone() : null;
    EventRequestHeader = other.eventRequestHeader_ != null ? other.EventRequestHeader.Clone() : null;
  }

  public RemoveUserRequest Clone() {
    return new RemoveUserRequest(this);
  }

  /// <summary>Field number for the "request_header" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader requestHeader_;
  public global::RequestHeader RequestHeader {
    get { return requestHeader_; }
    set {
      requestHeader_ = value;
    }
  }

  /// <summary>Field number for the "event_request_header" field.</summary>
  public const int EventRequestHeaderFieldNumber = 5;
  private global::EventRequestHeader eventRequestHeader_;
  public global::EventRequestHeader EventRequestHeader {
    get { return eventRequestHeader_; }
    set {
      eventRequestHeader_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as RemoveUserRequest);
  }

  public bool Equals(RemoveUserRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (!object.Equals(EventRequestHeader, other.EventRequestHeader)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (requestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (eventRequestHeader_ != null) hash ^= EventRequestHeader.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (requestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    if (eventRequestHeader_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(EventRequestHeader);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (requestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (eventRequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventRequestHeader);
    }
    return size;
  }

  public void MergeFrom(RemoveUserRequest other) {
    if (other == null) {
      return;
    }
    if (other.requestHeader_ != null) {
      if (requestHeader_ == null) {
        requestHeader_ = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.eventRequestHeader_ != null) {
      if (eventRequestHeader_ == null) {
        eventRequestHeader_ = new global::EventRequestHeader();
      }
      EventRequestHeader.MergeFrom(other.EventRequestHeader);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (requestHeader_ == null) {
            requestHeader_ = new global::RequestHeader();
          }
          input.ReadMessage(requestHeader_);
          break;
        }
        case 42: {
          if (eventRequestHeader_ == null) {
            eventRequestHeader_ = new global::EventRequestHeader();
          }
          input.ReadMessage(eventRequestHeader_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class RemoveUserResponse : pb::IMessage<RemoveUserResponse> {
  private static readonly pb::MessageParser<RemoveUserResponse> _parser = new pb::MessageParser<RemoveUserResponse>(() => new RemoveUserResponse());
  public static pb::MessageParser<RemoveUserResponse> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[104]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public RemoveUserResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  public RemoveUserResponse(RemoveUserResponse other) : this() {
    ResponseHeader = other.responseHeader_ != null ? other.ResponseHeader.Clone() : null;
    CreatedEvent = other.createdEvent_ != null ? other.CreatedEvent.Clone() : null;
  }

  public RemoveUserResponse Clone() {
    return new RemoveUserResponse(this);
  }

  /// <summary>Field number for the "response_header" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader responseHeader_;
  public global::ResponseHeader ResponseHeader {
    get { return responseHeader_; }
    set {
      responseHeader_ = value;
    }
  }

  /// <summary>Field number for the "created_event" field.</summary>
  public const int CreatedEventFieldNumber = 4;
  private global::Event createdEvent_;
  public global::Event CreatedEvent {
    get { return createdEvent_; }
    set {
      createdEvent_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as RemoveUserResponse);
  }

  public bool Equals(RemoveUserResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(CreatedEvent, other.CreatedEvent)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (responseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (createdEvent_ != null) hash ^= CreatedEvent.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (responseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (createdEvent_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(CreatedEvent);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (responseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (createdEvent_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedEvent);
    }
    return size;
  }

  public void MergeFrom(RemoveUserResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseHeader_ != null) {
      if (responseHeader_ == null) {
        responseHeader_ = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.createdEvent_ != null) {
      if (createdEvent_ == null) {
        createdEvent_ = new global::Event();
      }
      CreatedEvent.MergeFrom(other.CreatedEvent);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (responseHeader_ == null) {
            responseHeader_ = new global::ResponseHeader();
          }
          input.ReadMessage(responseHeader_);
          break;
        }
        case 34: {
          if (createdEvent_ == null) {
            createdEvent_ = new global::Event();
          }
          input.ReadMessage(createdEvent_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class RenameConversationRequest : pb::IMessage<RenameConversationRequest> {
  private static readonly pb::MessageParser<RenameConversationRequest> _parser = new pb::MessageParser<RenameConversationRequest>(() => new RenameConversationRequest());
  public static pb::MessageParser<RenameConversationRequest> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[105]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public RenameConversationRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  public RenameConversationRequest(RenameConversationRequest other) : this() {
    RequestHeader = other.requestHeader_ != null ? other.RequestHeader.Clone() : null;
    newName_ = other.newName_;
    EventRequestHeader = other.eventRequestHeader_ != null ? other.EventRequestHeader.Clone() : null;
  }

  public RenameConversationRequest Clone() {
    return new RenameConversationRequest(this);
  }

  /// <summary>Field number for the "request_header" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader requestHeader_;
  public global::RequestHeader RequestHeader {
    get { return requestHeader_; }
    set {
      requestHeader_ = value;
    }
  }

  /// <summary>Field number for the "new_name" field.</summary>
  public const int NewNameFieldNumber = 3;
  private string newName_ = "";
  public string NewName {
    get { return newName_; }
    set {
      newName_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "event_request_header" field.</summary>
  public const int EventRequestHeaderFieldNumber = 5;
  private global::EventRequestHeader eventRequestHeader_;
  public global::EventRequestHeader EventRequestHeader {
    get { return eventRequestHeader_; }
    set {
      eventRequestHeader_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as RenameConversationRequest);
  }

  public bool Equals(RenameConversationRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (NewName != other.NewName) return false;
    if (!object.Equals(EventRequestHeader, other.EventRequestHeader)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (requestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (NewName.Length != 0) hash ^= NewName.GetHashCode();
    if (eventRequestHeader_ != null) hash ^= EventRequestHeader.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (requestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    if (NewName.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(NewName);
    }
    if (eventRequestHeader_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(EventRequestHeader);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (requestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (NewName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NewName);
    }
    if (eventRequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventRequestHeader);
    }
    return size;
  }

  public void MergeFrom(RenameConversationRequest other) {
    if (other == null) {
      return;
    }
    if (other.requestHeader_ != null) {
      if (requestHeader_ == null) {
        requestHeader_ = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.NewName.Length != 0) {
      NewName = other.NewName;
    }
    if (other.eventRequestHeader_ != null) {
      if (eventRequestHeader_ == null) {
        eventRequestHeader_ = new global::EventRequestHeader();
      }
      EventRequestHeader.MergeFrom(other.EventRequestHeader);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (requestHeader_ == null) {
            requestHeader_ = new global::RequestHeader();
          }
          input.ReadMessage(requestHeader_);
          break;
        }
        case 26: {
          NewName = input.ReadString();
          break;
        }
        case 42: {
          if (eventRequestHeader_ == null) {
            eventRequestHeader_ = new global::EventRequestHeader();
          }
          input.ReadMessage(eventRequestHeader_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class RenameConversationResponse : pb::IMessage<RenameConversationResponse> {
  private static readonly pb::MessageParser<RenameConversationResponse> _parser = new pb::MessageParser<RenameConversationResponse>(() => new RenameConversationResponse());
  public static pb::MessageParser<RenameConversationResponse> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[106]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public RenameConversationResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  public RenameConversationResponse(RenameConversationResponse other) : this() {
    ResponseHeader = other.responseHeader_ != null ? other.ResponseHeader.Clone() : null;
    CreatedEvent = other.createdEvent_ != null ? other.CreatedEvent.Clone() : null;
  }

  public RenameConversationResponse Clone() {
    return new RenameConversationResponse(this);
  }

  /// <summary>Field number for the "response_header" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader responseHeader_;
  public global::ResponseHeader ResponseHeader {
    get { return responseHeader_; }
    set {
      responseHeader_ = value;
    }
  }

  /// <summary>Field number for the "created_event" field.</summary>
  public const int CreatedEventFieldNumber = 4;
  private global::Event createdEvent_;
  public global::Event CreatedEvent {
    get { return createdEvent_; }
    set {
      createdEvent_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as RenameConversationResponse);
  }

  public bool Equals(RenameConversationResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(CreatedEvent, other.CreatedEvent)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (responseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (createdEvent_ != null) hash ^= CreatedEvent.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (responseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (createdEvent_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(CreatedEvent);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (responseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (createdEvent_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedEvent);
    }
    return size;
  }

  public void MergeFrom(RenameConversationResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseHeader_ != null) {
      if (responseHeader_ == null) {
        responseHeader_ = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.createdEvent_ != null) {
      if (createdEvent_ == null) {
        createdEvent_ = new global::Event();
      }
      CreatedEvent.MergeFrom(other.CreatedEvent);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (responseHeader_ == null) {
            responseHeader_ = new global::ResponseHeader();
          }
          input.ReadMessage(responseHeader_);
          break;
        }
        case 34: {
          if (createdEvent_ == null) {
            createdEvent_ = new global::Event();
          }
          input.ReadMessage(createdEvent_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SearchEntitiesRequest : pb::IMessage<SearchEntitiesRequest> {
  private static readonly pb::MessageParser<SearchEntitiesRequest> _parser = new pb::MessageParser<SearchEntitiesRequest>(() => new SearchEntitiesRequest());
  public static pb::MessageParser<SearchEntitiesRequest> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[107]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SearchEntitiesRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SearchEntitiesRequest(SearchEntitiesRequest other) : this() {
    RequestHeader = other.requestHeader_ != null ? other.RequestHeader.Clone() : null;
    query_ = other.query_;
    maxCount_ = other.maxCount_;
  }

  public SearchEntitiesRequest Clone() {
    return new SearchEntitiesRequest(this);
  }

  /// <summary>Field number for the "request_header" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader requestHeader_;
  public global::RequestHeader RequestHeader {
    get { return requestHeader_; }
    set {
      requestHeader_ = value;
    }
  }

  /// <summary>Field number for the "query" field.</summary>
  public const int QueryFieldNumber = 3;
  private string query_ = "";
  public string Query {
    get { return query_; }
    set {
      query_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "max_count" field.</summary>
  public const int MaxCountFieldNumber = 4;
  private ulong maxCount_;
  public ulong MaxCount {
    get { return maxCount_; }
    set {
      maxCount_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SearchEntitiesRequest);
  }

  public bool Equals(SearchEntitiesRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (Query != other.Query) return false;
    if (MaxCount != other.MaxCount) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (requestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (Query.Length != 0) hash ^= Query.GetHashCode();
    if (MaxCount != 0UL) hash ^= MaxCount.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (requestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    if (Query.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Query);
    }
    if (MaxCount != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(MaxCount);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (requestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (Query.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
    }
    if (MaxCount != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxCount);
    }
    return size;
  }

  public void MergeFrom(SearchEntitiesRequest other) {
    if (other == null) {
      return;
    }
    if (other.requestHeader_ != null) {
      if (requestHeader_ == null) {
        requestHeader_ = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.Query.Length != 0) {
      Query = other.Query;
    }
    if (other.MaxCount != 0UL) {
      MaxCount = other.MaxCount;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (requestHeader_ == null) {
            requestHeader_ = new global::RequestHeader();
          }
          input.ReadMessage(requestHeader_);
          break;
        }
        case 26: {
          Query = input.ReadString();
          break;
        }
        case 32: {
          MaxCount = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SearchEntitiesResponse : pb::IMessage<SearchEntitiesResponse> {
  private static readonly pb::MessageParser<SearchEntitiesResponse> _parser = new pb::MessageParser<SearchEntitiesResponse>(() => new SearchEntitiesResponse());
  public static pb::MessageParser<SearchEntitiesResponse> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[108]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SearchEntitiesResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SearchEntitiesResponse(SearchEntitiesResponse other) : this() {
    ResponseHeader = other.responseHeader_ != null ? other.ResponseHeader.Clone() : null;
    entity_ = other.entity_.Clone();
  }

  public SearchEntitiesResponse Clone() {
    return new SearchEntitiesResponse(this);
  }

  /// <summary>Field number for the "response_header" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader responseHeader_;
  public global::ResponseHeader ResponseHeader {
    get { return responseHeader_; }
    set {
      responseHeader_ = value;
    }
  }

  /// <summary>Field number for the "entity" field.</summary>
  public const int EntityFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Entity> _repeated_entity_codec
      = pb::FieldCodec.ForMessage(18, global::Entity.Parser);
  private readonly pbc::RepeatedField<global::Entity> entity_ = new pbc::RepeatedField<global::Entity>();
  public pbc::RepeatedField<global::Entity> Entity {
    get { return entity_; }
  }

  public override bool Equals(object other) {
    return Equals(other as SearchEntitiesResponse);
  }

  public bool Equals(SearchEntitiesResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if(!entity_.Equals(other.entity_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (responseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    hash ^= entity_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (responseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    entity_.WriteTo(output, _repeated_entity_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (responseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    size += entity_.CalculateSize(_repeated_entity_codec);
    return size;
  }

  public void MergeFrom(SearchEntitiesResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseHeader_ != null) {
      if (responseHeader_ == null) {
        responseHeader_ = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    entity_.Add(other.entity_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (responseHeader_ == null) {
            responseHeader_ = new global::ResponseHeader();
          }
          input.ReadMessage(responseHeader_);
          break;
        }
        case 18: {
          entity_.AddEntriesFrom(input, _repeated_entity_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendChatMessageRequest : pb::IMessage<SendChatMessageRequest> {
  private static readonly pb::MessageParser<SendChatMessageRequest> _parser = new pb::MessageParser<SendChatMessageRequest>(() => new SendChatMessageRequest());
  public static pb::MessageParser<SendChatMessageRequest> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[109]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SendChatMessageRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SendChatMessageRequest(SendChatMessageRequest other) : this() {
    RequestHeader = other.requestHeader_ != null ? other.RequestHeader.Clone() : null;
    annotation_ = other.annotation_.Clone();
    MessageContent = other.messageContent_ != null ? other.MessageContent.Clone() : null;
    ExistingMedia = other.existingMedia_ != null ? other.ExistingMedia.Clone() : null;
    EventRequestHeader = other.eventRequestHeader_ != null ? other.EventRequestHeader.Clone() : null;
  }

  public SendChatMessageRequest Clone() {
    return new SendChatMessageRequest(this);
  }

  /// <summary>Field number for the "request_header" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader requestHeader_;
  public global::RequestHeader RequestHeader {
    get { return requestHeader_; }
    set {
      requestHeader_ = value;
    }
  }

  /// <summary>Field number for the "annotation" field.</summary>
  public const int AnnotationFieldNumber = 5;
  private static readonly pb::FieldCodec<global::EventAnnotation> _repeated_annotation_codec
      = pb::FieldCodec.ForMessage(42, global::EventAnnotation.Parser);
  private readonly pbc::RepeatedField<global::EventAnnotation> annotation_ = new pbc::RepeatedField<global::EventAnnotation>();
  public pbc::RepeatedField<global::EventAnnotation> Annotation {
    get { return annotation_; }
  }

  /// <summary>Field number for the "message_content" field.</summary>
  public const int MessageContentFieldNumber = 6;
  private global::MessageContent messageContent_;
  public global::MessageContent MessageContent {
    get { return messageContent_; }
    set {
      messageContent_ = value;
    }
  }

  /// <summary>Field number for the "existing_media" field.</summary>
  public const int ExistingMediaFieldNumber = 7;
  private global::ExistingMedia existingMedia_;
  public global::ExistingMedia ExistingMedia {
    get { return existingMedia_; }
    set {
      existingMedia_ = value;
    }
  }

  /// <summary>Field number for the "event_request_header" field.</summary>
  public const int EventRequestHeaderFieldNumber = 8;
  private global::EventRequestHeader eventRequestHeader_;
  public global::EventRequestHeader EventRequestHeader {
    get { return eventRequestHeader_; }
    set {
      eventRequestHeader_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SendChatMessageRequest);
  }

  public bool Equals(SendChatMessageRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if(!annotation_.Equals(other.annotation_)) return false;
    if (!object.Equals(MessageContent, other.MessageContent)) return false;
    if (!object.Equals(ExistingMedia, other.ExistingMedia)) return false;
    if (!object.Equals(EventRequestHeader, other.EventRequestHeader)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (requestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    hash ^= annotation_.GetHashCode();
    if (messageContent_ != null) hash ^= MessageContent.GetHashCode();
    if (existingMedia_ != null) hash ^= ExistingMedia.GetHashCode();
    if (eventRequestHeader_ != null) hash ^= EventRequestHeader.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (requestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    annotation_.WriteTo(output, _repeated_annotation_codec);
    if (messageContent_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(MessageContent);
    }
    if (existingMedia_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(ExistingMedia);
    }
    if (eventRequestHeader_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(EventRequestHeader);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (requestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    size += annotation_.CalculateSize(_repeated_annotation_codec);
    if (messageContent_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MessageContent);
    }
    if (existingMedia_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExistingMedia);
    }
    if (eventRequestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EventRequestHeader);
    }
    return size;
  }

  public void MergeFrom(SendChatMessageRequest other) {
    if (other == null) {
      return;
    }
    if (other.requestHeader_ != null) {
      if (requestHeader_ == null) {
        requestHeader_ = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    annotation_.Add(other.annotation_);
    if (other.messageContent_ != null) {
      if (messageContent_ == null) {
        messageContent_ = new global::MessageContent();
      }
      MessageContent.MergeFrom(other.MessageContent);
    }
    if (other.existingMedia_ != null) {
      if (existingMedia_ == null) {
        existingMedia_ = new global::ExistingMedia();
      }
      ExistingMedia.MergeFrom(other.ExistingMedia);
    }
    if (other.eventRequestHeader_ != null) {
      if (eventRequestHeader_ == null) {
        eventRequestHeader_ = new global::EventRequestHeader();
      }
      EventRequestHeader.MergeFrom(other.EventRequestHeader);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (requestHeader_ == null) {
            requestHeader_ = new global::RequestHeader();
          }
          input.ReadMessage(requestHeader_);
          break;
        }
        case 42: {
          annotation_.AddEntriesFrom(input, _repeated_annotation_codec);
          break;
        }
        case 50: {
          if (messageContent_ == null) {
            messageContent_ = new global::MessageContent();
          }
          input.ReadMessage(messageContent_);
          break;
        }
        case 58: {
          if (existingMedia_ == null) {
            existingMedia_ = new global::ExistingMedia();
          }
          input.ReadMessage(existingMedia_);
          break;
        }
        case 66: {
          if (eventRequestHeader_ == null) {
            eventRequestHeader_ = new global::EventRequestHeader();
          }
          input.ReadMessage(eventRequestHeader_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SendChatMessageResponse : pb::IMessage<SendChatMessageResponse> {
  private static readonly pb::MessageParser<SendChatMessageResponse> _parser = new pb::MessageParser<SendChatMessageResponse>(() => new SendChatMessageResponse());
  public static pb::MessageParser<SendChatMessageResponse> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[110]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SendChatMessageResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SendChatMessageResponse(SendChatMessageResponse other) : this() {
    ResponseHeader = other.responseHeader_ != null ? other.ResponseHeader.Clone() : null;
    CreatedEvent = other.createdEvent_ != null ? other.CreatedEvent.Clone() : null;
  }

  public SendChatMessageResponse Clone() {
    return new SendChatMessageResponse(this);
  }

  /// <summary>Field number for the "response_header" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader responseHeader_;
  public global::ResponseHeader ResponseHeader {
    get { return responseHeader_; }
    set {
      responseHeader_ = value;
    }
  }

  /// <summary>Field number for the "created_event" field.</summary>
  public const int CreatedEventFieldNumber = 6;
  private global::Event createdEvent_;
  public global::Event CreatedEvent {
    get { return createdEvent_; }
    set {
      createdEvent_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SendChatMessageResponse);
  }

  public bool Equals(SendChatMessageResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (!object.Equals(CreatedEvent, other.CreatedEvent)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (responseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (createdEvent_ != null) hash ^= CreatedEvent.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (responseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (createdEvent_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(CreatedEvent);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (responseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (createdEvent_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedEvent);
    }
    return size;
  }

  public void MergeFrom(SendChatMessageResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseHeader_ != null) {
      if (responseHeader_ == null) {
        responseHeader_ = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.createdEvent_ != null) {
      if (createdEvent_ == null) {
        createdEvent_ = new global::Event();
      }
      CreatedEvent.MergeFrom(other.CreatedEvent);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (responseHeader_ == null) {
            responseHeader_ = new global::ResponseHeader();
          }
          input.ReadMessage(responseHeader_);
          break;
        }
        case 50: {
          if (createdEvent_ == null) {
            createdEvent_ = new global::Event();
          }
          input.ReadMessage(createdEvent_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SetActiveClientRequest : pb::IMessage<SetActiveClientRequest> {
  private static readonly pb::MessageParser<SetActiveClientRequest> _parser = new pb::MessageParser<SetActiveClientRequest>(() => new SetActiveClientRequest());
  public static pb::MessageParser<SetActiveClientRequest> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[111]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SetActiveClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SetActiveClientRequest(SetActiveClientRequest other) : this() {
    RequestHeader = other.requestHeader_ != null ? other.RequestHeader.Clone() : null;
    isActive_ = other.isActive_;
    fullJid_ = other.fullJid_;
    timeoutSecs_ = other.timeoutSecs_;
  }

  public SetActiveClientRequest Clone() {
    return new SetActiveClientRequest(this);
  }

  /// <summary>Field number for the "request_header" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader requestHeader_;
  public global::RequestHeader RequestHeader {
    get { return requestHeader_; }
    set {
      requestHeader_ = value;
    }
  }

  /// <summary>Field number for the "is_active" field.</summary>
  public const int IsActiveFieldNumber = 2;
  private bool isActive_;
  /// <summary>
  ///  Whether to set the client as active or inactive.
  /// </summary>
  public bool IsActive {
    get { return isActive_; }
    set {
      isActive_ = value;
    }
  }

  /// <summary>Field number for the "full_jid" field.</summary>
  public const int FullJidFieldNumber = 3;
  private string fullJid_ = "";
  /// <summary>
  ///  'email/resource'.
  /// </summary>
  public string FullJid {
    get { return fullJid_; }
    set {
      fullJid_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "timeout_secs" field.</summary>
  public const int TimeoutSecsFieldNumber = 4;
  private ulong timeoutSecs_;
  /// <summary>
  ///  Timeout in seconds for client to remain active.
  /// </summary>
  public ulong TimeoutSecs {
    get { return timeoutSecs_; }
    set {
      timeoutSecs_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SetActiveClientRequest);
  }

  public bool Equals(SetActiveClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (IsActive != other.IsActive) return false;
    if (FullJid != other.FullJid) return false;
    if (TimeoutSecs != other.TimeoutSecs) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (requestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (IsActive != false) hash ^= IsActive.GetHashCode();
    if (FullJid.Length != 0) hash ^= FullJid.GetHashCode();
    if (TimeoutSecs != 0UL) hash ^= TimeoutSecs.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (requestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    if (IsActive != false) {
      output.WriteRawTag(16);
      output.WriteBool(IsActive);
    }
    if (FullJid.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(FullJid);
    }
    if (TimeoutSecs != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(TimeoutSecs);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (requestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (IsActive != false) {
      size += 1 + 1;
    }
    if (FullJid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FullJid);
    }
    if (TimeoutSecs != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeoutSecs);
    }
    return size;
  }

  public void MergeFrom(SetActiveClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.requestHeader_ != null) {
      if (requestHeader_ == null) {
        requestHeader_ = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.IsActive != false) {
      IsActive = other.IsActive;
    }
    if (other.FullJid.Length != 0) {
      FullJid = other.FullJid;
    }
    if (other.TimeoutSecs != 0UL) {
      TimeoutSecs = other.TimeoutSecs;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (requestHeader_ == null) {
            requestHeader_ = new global::RequestHeader();
          }
          input.ReadMessage(requestHeader_);
          break;
        }
        case 16: {
          IsActive = input.ReadBool();
          break;
        }
        case 26: {
          FullJid = input.ReadString();
          break;
        }
        case 32: {
          TimeoutSecs = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SetActiveClientResponse : pb::IMessage<SetActiveClientResponse> {
  private static readonly pb::MessageParser<SetActiveClientResponse> _parser = new pb::MessageParser<SetActiveClientResponse>(() => new SetActiveClientResponse());
  public static pb::MessageParser<SetActiveClientResponse> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[112]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SetActiveClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SetActiveClientResponse(SetActiveClientResponse other) : this() {
    ResponseHeader = other.responseHeader_ != null ? other.ResponseHeader.Clone() : null;
  }

  public SetActiveClientResponse Clone() {
    return new SetActiveClientResponse(this);
  }

  /// <summary>Field number for the "response_header" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader responseHeader_;
  public global::ResponseHeader ResponseHeader {
    get { return responseHeader_; }
    set {
      responseHeader_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SetActiveClientResponse);
  }

  public bool Equals(SetActiveClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (responseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (responseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (responseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    return size;
  }

  public void MergeFrom(SetActiveClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseHeader_ != null) {
      if (responseHeader_ == null) {
        responseHeader_ = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (responseHeader_ == null) {
            responseHeader_ = new global::ResponseHeader();
          }
          input.ReadMessage(responseHeader_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SetConversationLevelRequest : pb::IMessage<SetConversationLevelRequest> {
  private static readonly pb::MessageParser<SetConversationLevelRequest> _parser = new pb::MessageParser<SetConversationLevelRequest>(() => new SetConversationLevelRequest());
  public static pb::MessageParser<SetConversationLevelRequest> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[113]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SetConversationLevelRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SetConversationLevelRequest(SetConversationLevelRequest other) : this() {
    RequestHeader = other.requestHeader_ != null ? other.RequestHeader.Clone() : null;
  }

  public SetConversationLevelRequest Clone() {
    return new SetConversationLevelRequest(this);
  }

  /// <summary>Field number for the "request_header" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader requestHeader_;
  public global::RequestHeader RequestHeader {
    get { return requestHeader_; }
    set {
      requestHeader_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SetConversationLevelRequest);
  }

  public bool Equals(SetConversationLevelRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (requestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (requestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (requestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    return size;
  }

  public void MergeFrom(SetConversationLevelRequest other) {
    if (other == null) {
      return;
    }
    if (other.requestHeader_ != null) {
      if (requestHeader_ == null) {
        requestHeader_ = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (requestHeader_ == null) {
            requestHeader_ = new global::RequestHeader();
          }
          input.ReadMessage(requestHeader_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SetConversationLevelResponse : pb::IMessage<SetConversationLevelResponse> {
  private static readonly pb::MessageParser<SetConversationLevelResponse> _parser = new pb::MessageParser<SetConversationLevelResponse>(() => new SetConversationLevelResponse());
  public static pb::MessageParser<SetConversationLevelResponse> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[114]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SetConversationLevelResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SetConversationLevelResponse(SetConversationLevelResponse other) : this() {
    ResponseHeader = other.responseHeader_ != null ? other.ResponseHeader.Clone() : null;
  }

  public SetConversationLevelResponse Clone() {
    return new SetConversationLevelResponse(this);
  }

  /// <summary>Field number for the "response_header" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader responseHeader_;
  public global::ResponseHeader ResponseHeader {
    get { return responseHeader_; }
    set {
      responseHeader_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SetConversationLevelResponse);
  }

  public bool Equals(SetConversationLevelResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (responseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (responseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (responseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    return size;
  }

  public void MergeFrom(SetConversationLevelResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseHeader_ != null) {
      if (responseHeader_ == null) {
        responseHeader_ = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (responseHeader_ == null) {
            responseHeader_ = new global::ResponseHeader();
          }
          input.ReadMessage(responseHeader_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SetConversationNotificationLevelRequest : pb::IMessage<SetConversationNotificationLevelRequest> {
  private static readonly pb::MessageParser<SetConversationNotificationLevelRequest> _parser = new pb::MessageParser<SetConversationNotificationLevelRequest>(() => new SetConversationNotificationLevelRequest());
  public static pb::MessageParser<SetConversationNotificationLevelRequest> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[115]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SetConversationNotificationLevelRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SetConversationNotificationLevelRequest(SetConversationNotificationLevelRequest other) : this() {
    RequestHeader = other.requestHeader_ != null ? other.RequestHeader.Clone() : null;
    ConversationId = other.conversationId_ != null ? other.ConversationId.Clone() : null;
    level_ = other.level_;
  }

  public SetConversationNotificationLevelRequest Clone() {
    return new SetConversationNotificationLevelRequest(this);
  }

  /// <summary>Field number for the "request_header" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader requestHeader_;
  public global::RequestHeader RequestHeader {
    get { return requestHeader_; }
    set {
      requestHeader_ = value;
    }
  }

  /// <summary>Field number for the "conversation_id" field.</summary>
  public const int ConversationIdFieldNumber = 2;
  private global::ConversationId conversationId_;
  public global::ConversationId ConversationId {
    get { return conversationId_; }
    set {
      conversationId_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 3;
  private global::NotificationLevel level_ = global::NotificationLevel.NOTIFICATION_LEVEL_UNKNOWN;
  public global::NotificationLevel Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SetConversationNotificationLevelRequest);
  }

  public bool Equals(SetConversationNotificationLevelRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (!object.Equals(ConversationId, other.ConversationId)) return false;
    if (Level != other.Level) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (requestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (conversationId_ != null) hash ^= ConversationId.GetHashCode();
    if (Level != global::NotificationLevel.NOTIFICATION_LEVEL_UNKNOWN) hash ^= Level.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (requestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    if (conversationId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ConversationId);
    }
    if (Level != global::NotificationLevel.NOTIFICATION_LEVEL_UNKNOWN) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Level);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (requestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (conversationId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationId);
    }
    if (Level != global::NotificationLevel.NOTIFICATION_LEVEL_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Level);
    }
    return size;
  }

  public void MergeFrom(SetConversationNotificationLevelRequest other) {
    if (other == null) {
      return;
    }
    if (other.requestHeader_ != null) {
      if (requestHeader_ == null) {
        requestHeader_ = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.conversationId_ != null) {
      if (conversationId_ == null) {
        conversationId_ = new global::ConversationId();
      }
      ConversationId.MergeFrom(other.ConversationId);
    }
    if (other.Level != global::NotificationLevel.NOTIFICATION_LEVEL_UNKNOWN) {
      Level = other.Level;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (requestHeader_ == null) {
            requestHeader_ = new global::RequestHeader();
          }
          input.ReadMessage(requestHeader_);
          break;
        }
        case 18: {
          if (conversationId_ == null) {
            conversationId_ = new global::ConversationId();
          }
          input.ReadMessage(conversationId_);
          break;
        }
        case 24: {
          level_ = (global::NotificationLevel) input.ReadEnum();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SetConversationNotificationLevelResponse : pb::IMessage<SetConversationNotificationLevelResponse> {
  private static readonly pb::MessageParser<SetConversationNotificationLevelResponse> _parser = new pb::MessageParser<SetConversationNotificationLevelResponse>(() => new SetConversationNotificationLevelResponse());
  public static pb::MessageParser<SetConversationNotificationLevelResponse> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[116]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SetConversationNotificationLevelResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SetConversationNotificationLevelResponse(SetConversationNotificationLevelResponse other) : this() {
    ResponseHeader = other.responseHeader_ != null ? other.ResponseHeader.Clone() : null;
    timestamp_ = other.timestamp_;
  }

  public SetConversationNotificationLevelResponse Clone() {
    return new SetConversationNotificationLevelResponse(this);
  }

  /// <summary>Field number for the "response_header" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader responseHeader_;
  public global::ResponseHeader ResponseHeader {
    get { return responseHeader_; }
    set {
      responseHeader_ = value;
    }
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 2;
  private ulong timestamp_;
  public ulong Timestamp {
    get { return timestamp_; }
    set {
      timestamp_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SetConversationNotificationLevelResponse);
  }

  public bool Equals(SetConversationNotificationLevelResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (Timestamp != other.Timestamp) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (responseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (responseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (Timestamp != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Timestamp);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (responseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (Timestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
    }
    return size;
  }

  public void MergeFrom(SetConversationNotificationLevelResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseHeader_ != null) {
      if (responseHeader_ == null) {
        responseHeader_ = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.Timestamp != 0UL) {
      Timestamp = other.Timestamp;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (responseHeader_ == null) {
            responseHeader_ = new global::ResponseHeader();
          }
          input.ReadMessage(responseHeader_);
          break;
        }
        case 16: {
          Timestamp = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SetFocusRequest : pb::IMessage<SetFocusRequest> {
  private static readonly pb::MessageParser<SetFocusRequest> _parser = new pb::MessageParser<SetFocusRequest>(() => new SetFocusRequest());
  public static pb::MessageParser<SetFocusRequest> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[117]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SetFocusRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SetFocusRequest(SetFocusRequest other) : this() {
    RequestHeader = other.requestHeader_ != null ? other.RequestHeader.Clone() : null;
    ConversationId = other.conversationId_ != null ? other.ConversationId.Clone() : null;
    type_ = other.type_;
    timeoutSecs_ = other.timeoutSecs_;
  }

  public SetFocusRequest Clone() {
    return new SetFocusRequest(this);
  }

  /// <summary>Field number for the "request_header" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader requestHeader_;
  public global::RequestHeader RequestHeader {
    get { return requestHeader_; }
    set {
      requestHeader_ = value;
    }
  }

  /// <summary>Field number for the "conversation_id" field.</summary>
  public const int ConversationIdFieldNumber = 2;
  private global::ConversationId conversationId_;
  public global::ConversationId ConversationId {
    get { return conversationId_; }
    set {
      conversationId_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private global::FocusType type_ = global::FocusType.FOCUS_TYPE_UNKNOWN;
  public global::FocusType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "timeout_secs" field.</summary>
  public const int TimeoutSecsFieldNumber = 4;
  private uint timeoutSecs_;
  public uint TimeoutSecs {
    get { return timeoutSecs_; }
    set {
      timeoutSecs_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SetFocusRequest);
  }

  public bool Equals(SetFocusRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (!object.Equals(ConversationId, other.ConversationId)) return false;
    if (Type != other.Type) return false;
    if (TimeoutSecs != other.TimeoutSecs) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (requestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (conversationId_ != null) hash ^= ConversationId.GetHashCode();
    if (Type != global::FocusType.FOCUS_TYPE_UNKNOWN) hash ^= Type.GetHashCode();
    if (TimeoutSecs != 0) hash ^= TimeoutSecs.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (requestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    if (conversationId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ConversationId);
    }
    if (Type != global::FocusType.FOCUS_TYPE_UNKNOWN) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Type);
    }
    if (TimeoutSecs != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(TimeoutSecs);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (requestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (conversationId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationId);
    }
    if (Type != global::FocusType.FOCUS_TYPE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (TimeoutSecs != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeoutSecs);
    }
    return size;
  }

  public void MergeFrom(SetFocusRequest other) {
    if (other == null) {
      return;
    }
    if (other.requestHeader_ != null) {
      if (requestHeader_ == null) {
        requestHeader_ = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.conversationId_ != null) {
      if (conversationId_ == null) {
        conversationId_ = new global::ConversationId();
      }
      ConversationId.MergeFrom(other.ConversationId);
    }
    if (other.Type != global::FocusType.FOCUS_TYPE_UNKNOWN) {
      Type = other.Type;
    }
    if (other.TimeoutSecs != 0) {
      TimeoutSecs = other.TimeoutSecs;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (requestHeader_ == null) {
            requestHeader_ = new global::RequestHeader();
          }
          input.ReadMessage(requestHeader_);
          break;
        }
        case 18: {
          if (conversationId_ == null) {
            conversationId_ = new global::ConversationId();
          }
          input.ReadMessage(conversationId_);
          break;
        }
        case 24: {
          type_ = (global::FocusType) input.ReadEnum();
          break;
        }
        case 32: {
          TimeoutSecs = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SetFocusResponse : pb::IMessage<SetFocusResponse> {
  private static readonly pb::MessageParser<SetFocusResponse> _parser = new pb::MessageParser<SetFocusResponse>(() => new SetFocusResponse());
  public static pb::MessageParser<SetFocusResponse> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[118]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SetFocusResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SetFocusResponse(SetFocusResponse other) : this() {
    ResponseHeader = other.responseHeader_ != null ? other.ResponseHeader.Clone() : null;
    timestamp_ = other.timestamp_;
  }

  public SetFocusResponse Clone() {
    return new SetFocusResponse(this);
  }

  /// <summary>Field number for the "response_header" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader responseHeader_;
  public global::ResponseHeader ResponseHeader {
    get { return responseHeader_; }
    set {
      responseHeader_ = value;
    }
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 2;
  private ulong timestamp_;
  public ulong Timestamp {
    get { return timestamp_; }
    set {
      timestamp_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SetFocusResponse);
  }

  public bool Equals(SetFocusResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (Timestamp != other.Timestamp) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (responseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (responseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (Timestamp != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Timestamp);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (responseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (Timestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
    }
    return size;
  }

  public void MergeFrom(SetFocusResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseHeader_ != null) {
      if (responseHeader_ == null) {
        responseHeader_ = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.Timestamp != 0UL) {
      Timestamp = other.Timestamp;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (responseHeader_ == null) {
            responseHeader_ = new global::ResponseHeader();
          }
          input.ReadMessage(responseHeader_);
          break;
        }
        case 16: {
          Timestamp = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///  Allows setting one or more of the included presence-related settings.
/// </summary>
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SetPresenceRequest : pb::IMessage<SetPresenceRequest> {
  private static readonly pb::MessageParser<SetPresenceRequest> _parser = new pb::MessageParser<SetPresenceRequest>(() => new SetPresenceRequest());
  public static pb::MessageParser<SetPresenceRequest> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[119]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SetPresenceRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SetPresenceRequest(SetPresenceRequest other) : this() {
    RequestHeader = other.requestHeader_ != null ? other.RequestHeader.Clone() : null;
    PresenceStateSetting = other.presenceStateSetting_ != null ? other.PresenceStateSetting.Clone() : null;
    DndSetting = other.dndSetting_ != null ? other.DndSetting.Clone() : null;
    DesktopOffSetting = other.desktopOffSetting_ != null ? other.DesktopOffSetting.Clone() : null;
    MoodSetting = other.moodSetting_ != null ? other.MoodSetting.Clone() : null;
  }

  public SetPresenceRequest Clone() {
    return new SetPresenceRequest(this);
  }

  /// <summary>Field number for the "request_header" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader requestHeader_;
  public global::RequestHeader RequestHeader {
    get { return requestHeader_; }
    set {
      requestHeader_ = value;
    }
  }

  /// <summary>Field number for the "presence_state_setting" field.</summary>
  public const int PresenceStateSettingFieldNumber = 2;
  private global::PresenceStateSetting presenceStateSetting_;
  public global::PresenceStateSetting PresenceStateSetting {
    get { return presenceStateSetting_; }
    set {
      presenceStateSetting_ = value;
    }
  }

  /// <summary>Field number for the "dnd_setting" field.</summary>
  public const int DndSettingFieldNumber = 3;
  private global::DndSetting dndSetting_;
  public global::DndSetting DndSetting {
    get { return dndSetting_; }
    set {
      dndSetting_ = value;
    }
  }

  /// <summary>Field number for the "desktop_off_setting" field.</summary>
  public const int DesktopOffSettingFieldNumber = 5;
  private global::DesktopOffSetting desktopOffSetting_;
  public global::DesktopOffSetting DesktopOffSetting {
    get { return desktopOffSetting_; }
    set {
      desktopOffSetting_ = value;
    }
  }

  /// <summary>Field number for the "mood_setting" field.</summary>
  public const int MoodSettingFieldNumber = 8;
  private global::MoodSetting moodSetting_;
  public global::MoodSetting MoodSetting {
    get { return moodSetting_; }
    set {
      moodSetting_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SetPresenceRequest);
  }

  public bool Equals(SetPresenceRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (!object.Equals(PresenceStateSetting, other.PresenceStateSetting)) return false;
    if (!object.Equals(DndSetting, other.DndSetting)) return false;
    if (!object.Equals(DesktopOffSetting, other.DesktopOffSetting)) return false;
    if (!object.Equals(MoodSetting, other.MoodSetting)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (requestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (presenceStateSetting_ != null) hash ^= PresenceStateSetting.GetHashCode();
    if (dndSetting_ != null) hash ^= DndSetting.GetHashCode();
    if (desktopOffSetting_ != null) hash ^= DesktopOffSetting.GetHashCode();
    if (moodSetting_ != null) hash ^= MoodSetting.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (requestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    if (presenceStateSetting_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(PresenceStateSetting);
    }
    if (dndSetting_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(DndSetting);
    }
    if (desktopOffSetting_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(DesktopOffSetting);
    }
    if (moodSetting_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(MoodSetting);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (requestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (presenceStateSetting_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PresenceStateSetting);
    }
    if (dndSetting_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DndSetting);
    }
    if (desktopOffSetting_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DesktopOffSetting);
    }
    if (moodSetting_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MoodSetting);
    }
    return size;
  }

  public void MergeFrom(SetPresenceRequest other) {
    if (other == null) {
      return;
    }
    if (other.requestHeader_ != null) {
      if (requestHeader_ == null) {
        requestHeader_ = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.presenceStateSetting_ != null) {
      if (presenceStateSetting_ == null) {
        presenceStateSetting_ = new global::PresenceStateSetting();
      }
      PresenceStateSetting.MergeFrom(other.PresenceStateSetting);
    }
    if (other.dndSetting_ != null) {
      if (dndSetting_ == null) {
        dndSetting_ = new global::DndSetting();
      }
      DndSetting.MergeFrom(other.DndSetting);
    }
    if (other.desktopOffSetting_ != null) {
      if (desktopOffSetting_ == null) {
        desktopOffSetting_ = new global::DesktopOffSetting();
      }
      DesktopOffSetting.MergeFrom(other.DesktopOffSetting);
    }
    if (other.moodSetting_ != null) {
      if (moodSetting_ == null) {
        moodSetting_ = new global::MoodSetting();
      }
      MoodSetting.MergeFrom(other.MoodSetting);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (requestHeader_ == null) {
            requestHeader_ = new global::RequestHeader();
          }
          input.ReadMessage(requestHeader_);
          break;
        }
        case 18: {
          if (presenceStateSetting_ == null) {
            presenceStateSetting_ = new global::PresenceStateSetting();
          }
          input.ReadMessage(presenceStateSetting_);
          break;
        }
        case 26: {
          if (dndSetting_ == null) {
            dndSetting_ = new global::DndSetting();
          }
          input.ReadMessage(dndSetting_);
          break;
        }
        case 42: {
          if (desktopOffSetting_ == null) {
            desktopOffSetting_ = new global::DesktopOffSetting();
          }
          input.ReadMessage(desktopOffSetting_);
          break;
        }
        case 66: {
          if (moodSetting_ == null) {
            moodSetting_ = new global::MoodSetting();
          }
          input.ReadMessage(moodSetting_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SetPresenceResponse : pb::IMessage<SetPresenceResponse> {
  private static readonly pb::MessageParser<SetPresenceResponse> _parser = new pb::MessageParser<SetPresenceResponse>(() => new SetPresenceResponse());
  public static pb::MessageParser<SetPresenceResponse> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[120]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SetPresenceResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SetPresenceResponse(SetPresenceResponse other) : this() {
    ResponseHeader = other.responseHeader_ != null ? other.ResponseHeader.Clone() : null;
  }

  public SetPresenceResponse Clone() {
    return new SetPresenceResponse(this);
  }

  /// <summary>Field number for the "response_header" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader responseHeader_;
  public global::ResponseHeader ResponseHeader {
    get { return responseHeader_; }
    set {
      responseHeader_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SetPresenceResponse);
  }

  public bool Equals(SetPresenceResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (responseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (responseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (responseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    return size;
  }

  public void MergeFrom(SetPresenceResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseHeader_ != null) {
      if (responseHeader_ == null) {
        responseHeader_ = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (responseHeader_ == null) {
            responseHeader_ = new global::ResponseHeader();
          }
          input.ReadMessage(responseHeader_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SetTypingRequest : pb::IMessage<SetTypingRequest> {
  private static readonly pb::MessageParser<SetTypingRequest> _parser = new pb::MessageParser<SetTypingRequest>(() => new SetTypingRequest());
  public static pb::MessageParser<SetTypingRequest> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[121]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SetTypingRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SetTypingRequest(SetTypingRequest other) : this() {
    RequestHeader = other.requestHeader_ != null ? other.RequestHeader.Clone() : null;
    ConversationId = other.conversationId_ != null ? other.ConversationId.Clone() : null;
    type_ = other.type_;
  }

  public SetTypingRequest Clone() {
    return new SetTypingRequest(this);
  }

  /// <summary>Field number for the "request_header" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader requestHeader_;
  public global::RequestHeader RequestHeader {
    get { return requestHeader_; }
    set {
      requestHeader_ = value;
    }
  }

  /// <summary>Field number for the "conversation_id" field.</summary>
  public const int ConversationIdFieldNumber = 2;
  private global::ConversationId conversationId_;
  public global::ConversationId ConversationId {
    get { return conversationId_; }
    set {
      conversationId_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private global::TypingType type_ = global::TypingType.TYPING_TYPE_UNKNOWN;
  public global::TypingType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SetTypingRequest);
  }

  public bool Equals(SetTypingRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (!object.Equals(ConversationId, other.ConversationId)) return false;
    if (Type != other.Type) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (requestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (conversationId_ != null) hash ^= ConversationId.GetHashCode();
    if (Type != global::TypingType.TYPING_TYPE_UNKNOWN) hash ^= Type.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (requestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    if (conversationId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ConversationId);
    }
    if (Type != global::TypingType.TYPING_TYPE_UNKNOWN) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Type);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (requestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (conversationId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationId);
    }
    if (Type != global::TypingType.TYPING_TYPE_UNKNOWN) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    return size;
  }

  public void MergeFrom(SetTypingRequest other) {
    if (other == null) {
      return;
    }
    if (other.requestHeader_ != null) {
      if (requestHeader_ == null) {
        requestHeader_ = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.conversationId_ != null) {
      if (conversationId_ == null) {
        conversationId_ = new global::ConversationId();
      }
      ConversationId.MergeFrom(other.ConversationId);
    }
    if (other.Type != global::TypingType.TYPING_TYPE_UNKNOWN) {
      Type = other.Type;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (requestHeader_ == null) {
            requestHeader_ = new global::RequestHeader();
          }
          input.ReadMessage(requestHeader_);
          break;
        }
        case 18: {
          if (conversationId_ == null) {
            conversationId_ = new global::ConversationId();
          }
          input.ReadMessage(conversationId_);
          break;
        }
        case 24: {
          type_ = (global::TypingType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SetTypingResponse : pb::IMessage<SetTypingResponse> {
  private static readonly pb::MessageParser<SetTypingResponse> _parser = new pb::MessageParser<SetTypingResponse>(() => new SetTypingResponse());
  public static pb::MessageParser<SetTypingResponse> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[122]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SetTypingResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SetTypingResponse(SetTypingResponse other) : this() {
    ResponseHeader = other.responseHeader_ != null ? other.ResponseHeader.Clone() : null;
    timestamp_ = other.timestamp_;
  }

  public SetTypingResponse Clone() {
    return new SetTypingResponse(this);
  }

  /// <summary>Field number for the "response_header" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader responseHeader_;
  public global::ResponseHeader ResponseHeader {
    get { return responseHeader_; }
    set {
      responseHeader_ = value;
    }
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 2;
  private ulong timestamp_;
  public ulong Timestamp {
    get { return timestamp_; }
    set {
      timestamp_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SetTypingResponse);
  }

  public bool Equals(SetTypingResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (Timestamp != other.Timestamp) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (responseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (responseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (Timestamp != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(Timestamp);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (responseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (Timestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
    }
    return size;
  }

  public void MergeFrom(SetTypingResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseHeader_ != null) {
      if (responseHeader_ == null) {
        responseHeader_ = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.Timestamp != 0UL) {
      Timestamp = other.Timestamp;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (responseHeader_ == null) {
            responseHeader_ = new global::ResponseHeader();
          }
          input.ReadMessage(responseHeader_);
          break;
        }
        case 16: {
          Timestamp = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SyncAllNewEventsRequest : pb::IMessage<SyncAllNewEventsRequest> {
  private static readonly pb::MessageParser<SyncAllNewEventsRequest> _parser = new pb::MessageParser<SyncAllNewEventsRequest>(() => new SyncAllNewEventsRequest());
  public static pb::MessageParser<SyncAllNewEventsRequest> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[123]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SyncAllNewEventsRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SyncAllNewEventsRequest(SyncAllNewEventsRequest other) : this() {
    RequestHeader = other.requestHeader_ != null ? other.RequestHeader.Clone() : null;
    lastSyncTimestamp_ = other.lastSyncTimestamp_;
    maxResponseSizeBytes_ = other.maxResponseSizeBytes_;
  }

  public SyncAllNewEventsRequest Clone() {
    return new SyncAllNewEventsRequest(this);
  }

  /// <summary>Field number for the "request_header" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader requestHeader_;
  public global::RequestHeader RequestHeader {
    get { return requestHeader_; }
    set {
      requestHeader_ = value;
    }
  }

  /// <summary>Field number for the "last_sync_timestamp" field.</summary>
  public const int LastSyncTimestampFieldNumber = 2;
  private ulong lastSyncTimestamp_;
  /// <summary>
  ///  Timestamp after which to return all new events.
  /// </summary>
  public ulong LastSyncTimestamp {
    get { return lastSyncTimestamp_; }
    set {
      lastSyncTimestamp_ = value;
    }
  }

  /// <summary>Field number for the "max_response_size_bytes" field.</summary>
  public const int MaxResponseSizeBytesFieldNumber = 8;
  private ulong maxResponseSizeBytes_;
  public ulong MaxResponseSizeBytes {
    get { return maxResponseSizeBytes_; }
    set {
      maxResponseSizeBytes_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as SyncAllNewEventsRequest);
  }

  public bool Equals(SyncAllNewEventsRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (LastSyncTimestamp != other.LastSyncTimestamp) return false;
    if (MaxResponseSizeBytes != other.MaxResponseSizeBytes) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (requestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (LastSyncTimestamp != 0UL) hash ^= LastSyncTimestamp.GetHashCode();
    if (MaxResponseSizeBytes != 0UL) hash ^= MaxResponseSizeBytes.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (requestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    if (LastSyncTimestamp != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(LastSyncTimestamp);
    }
    if (MaxResponseSizeBytes != 0UL) {
      output.WriteRawTag(64);
      output.WriteUInt64(MaxResponseSizeBytes);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (requestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (LastSyncTimestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastSyncTimestamp);
    }
    if (MaxResponseSizeBytes != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxResponseSizeBytes);
    }
    return size;
  }

  public void MergeFrom(SyncAllNewEventsRequest other) {
    if (other == null) {
      return;
    }
    if (other.requestHeader_ != null) {
      if (requestHeader_ == null) {
        requestHeader_ = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.LastSyncTimestamp != 0UL) {
      LastSyncTimestamp = other.LastSyncTimestamp;
    }
    if (other.MaxResponseSizeBytes != 0UL) {
      MaxResponseSizeBytes = other.MaxResponseSizeBytes;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (requestHeader_ == null) {
            requestHeader_ = new global::RequestHeader();
          }
          input.ReadMessage(requestHeader_);
          break;
        }
        case 16: {
          LastSyncTimestamp = input.ReadUInt64();
          break;
        }
        case 64: {
          MaxResponseSizeBytes = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SyncAllNewEventsResponse : pb::IMessage<SyncAllNewEventsResponse> {
  private static readonly pb::MessageParser<SyncAllNewEventsResponse> _parser = new pb::MessageParser<SyncAllNewEventsResponse>(() => new SyncAllNewEventsResponse());
  public static pb::MessageParser<SyncAllNewEventsResponse> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[124]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SyncAllNewEventsResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SyncAllNewEventsResponse(SyncAllNewEventsResponse other) : this() {
    ResponseHeader = other.responseHeader_ != null ? other.ResponseHeader.Clone() : null;
    syncTimestamp_ = other.syncTimestamp_;
    conversationState_ = other.conversationState_.Clone();
  }

  public SyncAllNewEventsResponse Clone() {
    return new SyncAllNewEventsResponse(this);
  }

  /// <summary>Field number for the "response_header" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader responseHeader_;
  public global::ResponseHeader ResponseHeader {
    get { return responseHeader_; }
    set {
      responseHeader_ = value;
    }
  }

  /// <summary>Field number for the "sync_timestamp" field.</summary>
  public const int SyncTimestampFieldNumber = 2;
  private ulong syncTimestamp_;
  public ulong SyncTimestamp {
    get { return syncTimestamp_; }
    set {
      syncTimestamp_ = value;
    }
  }

  /// <summary>Field number for the "conversation_state" field.</summary>
  public const int ConversationStateFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ConversationState> _repeated_conversationState_codec
      = pb::FieldCodec.ForMessage(26, global::ConversationState.Parser);
  private readonly pbc::RepeatedField<global::ConversationState> conversationState_ = new pbc::RepeatedField<global::ConversationState>();
  public pbc::RepeatedField<global::ConversationState> ConversationState {
    get { return conversationState_; }
  }

  public override bool Equals(object other) {
    return Equals(other as SyncAllNewEventsResponse);
  }

  public bool Equals(SyncAllNewEventsResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (SyncTimestamp != other.SyncTimestamp) return false;
    if(!conversationState_.Equals(other.conversationState_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (responseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (SyncTimestamp != 0UL) hash ^= SyncTimestamp.GetHashCode();
    hash ^= conversationState_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (responseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (SyncTimestamp != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(SyncTimestamp);
    }
    conversationState_.WriteTo(output, _repeated_conversationState_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (responseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (SyncTimestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SyncTimestamp);
    }
    size += conversationState_.CalculateSize(_repeated_conversationState_codec);
    return size;
  }

  public void MergeFrom(SyncAllNewEventsResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseHeader_ != null) {
      if (responseHeader_ == null) {
        responseHeader_ = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.SyncTimestamp != 0UL) {
      SyncTimestamp = other.SyncTimestamp;
    }
    conversationState_.Add(other.conversationState_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (responseHeader_ == null) {
            responseHeader_ = new global::ResponseHeader();
          }
          input.ReadMessage(responseHeader_);
          break;
        }
        case 16: {
          SyncTimestamp = input.ReadUInt64();
          break;
        }
        case 26: {
          conversationState_.AddEntriesFrom(input, _repeated_conversationState_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SyncRecentConversationsRequest : pb::IMessage<SyncRecentConversationsRequest> {
  private static readonly pb::MessageParser<SyncRecentConversationsRequest> _parser = new pb::MessageParser<SyncRecentConversationsRequest>(() => new SyncRecentConversationsRequest());
  public static pb::MessageParser<SyncRecentConversationsRequest> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[125]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SyncRecentConversationsRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SyncRecentConversationsRequest(SyncRecentConversationsRequest other) : this() {
    RequestHeader = other.requestHeader_ != null ? other.RequestHeader.Clone() : null;
    maxConversations_ = other.maxConversations_;
    maxEventsPerConversation_ = other.maxEventsPerConversation_;
    syncFilter_ = other.syncFilter_.Clone();
  }

  public SyncRecentConversationsRequest Clone() {
    return new SyncRecentConversationsRequest(this);
  }

  /// <summary>Field number for the "request_header" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader requestHeader_;
  public global::RequestHeader RequestHeader {
    get { return requestHeader_; }
    set {
      requestHeader_ = value;
    }
  }

  /// <summary>Field number for the "max_conversations" field.</summary>
  public const int MaxConversationsFieldNumber = 3;
  private ulong maxConversations_;
  public ulong MaxConversations {
    get { return maxConversations_; }
    set {
      maxConversations_ = value;
    }
  }

  /// <summary>Field number for the "max_events_per_conversation" field.</summary>
  public const int MaxEventsPerConversationFieldNumber = 4;
  private ulong maxEventsPerConversation_;
  public ulong MaxEventsPerConversation {
    get { return maxEventsPerConversation_; }
    set {
      maxEventsPerConversation_ = value;
    }
  }

  /// <summary>Field number for the "sync_filter" field.</summary>
  public const int SyncFilterFieldNumber = 5;
  private static readonly pb::FieldCodec<global::SyncFilter> _repeated_syncFilter_codec
      = pb::FieldCodec.ForEnum(42, x => (int) x, x => (global::SyncFilter) x);
  private readonly pbc::RepeatedField<global::SyncFilter> syncFilter_ = new pbc::RepeatedField<global::SyncFilter>();
  public pbc::RepeatedField<global::SyncFilter> SyncFilter {
    get { return syncFilter_; }
  }

  public override bool Equals(object other) {
    return Equals(other as SyncRecentConversationsRequest);
  }

  public bool Equals(SyncRecentConversationsRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (MaxConversations != other.MaxConversations) return false;
    if (MaxEventsPerConversation != other.MaxEventsPerConversation) return false;
    if(!syncFilter_.Equals(other.syncFilter_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (requestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (MaxConversations != 0UL) hash ^= MaxConversations.GetHashCode();
    if (MaxEventsPerConversation != 0UL) hash ^= MaxEventsPerConversation.GetHashCode();
    hash ^= syncFilter_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (requestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    if (MaxConversations != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(MaxConversations);
    }
    if (MaxEventsPerConversation != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(MaxEventsPerConversation);
    }
    syncFilter_.WriteTo(output, _repeated_syncFilter_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (requestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (MaxConversations != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxConversations);
    }
    if (MaxEventsPerConversation != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxEventsPerConversation);
    }
    size += syncFilter_.CalculateSize(_repeated_syncFilter_codec);
    return size;
  }

  public void MergeFrom(SyncRecentConversationsRequest other) {
    if (other == null) {
      return;
    }
    if (other.requestHeader_ != null) {
      if (requestHeader_ == null) {
        requestHeader_ = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.MaxConversations != 0UL) {
      MaxConversations = other.MaxConversations;
    }
    if (other.MaxEventsPerConversation != 0UL) {
      MaxEventsPerConversation = other.MaxEventsPerConversation;
    }
    syncFilter_.Add(other.syncFilter_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (requestHeader_ == null) {
            requestHeader_ = new global::RequestHeader();
          }
          input.ReadMessage(requestHeader_);
          break;
        }
        case 24: {
          MaxConversations = input.ReadUInt64();
          break;
        }
        case 32: {
          MaxEventsPerConversation = input.ReadUInt64();
          break;
        }
        case 42:
        case 40: {
          syncFilter_.AddEntriesFrom(input, _repeated_syncFilter_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SyncRecentConversationsResponse : pb::IMessage<SyncRecentConversationsResponse> {
  private static readonly pb::MessageParser<SyncRecentConversationsResponse> _parser = new pb::MessageParser<SyncRecentConversationsResponse>(() => new SyncRecentConversationsResponse());
  public static pb::MessageParser<SyncRecentConversationsResponse> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[126]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public SyncRecentConversationsResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  public SyncRecentConversationsResponse(SyncRecentConversationsResponse other) : this() {
    ResponseHeader = other.responseHeader_ != null ? other.ResponseHeader.Clone() : null;
    syncTimestamp_ = other.syncTimestamp_;
    conversationState_ = other.conversationState_.Clone();
  }

  public SyncRecentConversationsResponse Clone() {
    return new SyncRecentConversationsResponse(this);
  }

  /// <summary>Field number for the "response_header" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader responseHeader_;
  public global::ResponseHeader ResponseHeader {
    get { return responseHeader_; }
    set {
      responseHeader_ = value;
    }
  }

  /// <summary>Field number for the "sync_timestamp" field.</summary>
  public const int SyncTimestampFieldNumber = 2;
  private ulong syncTimestamp_;
  public ulong SyncTimestamp {
    get { return syncTimestamp_; }
    set {
      syncTimestamp_ = value;
    }
  }

  /// <summary>Field number for the "conversation_state" field.</summary>
  public const int ConversationStateFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ConversationState> _repeated_conversationState_codec
      = pb::FieldCodec.ForMessage(26, global::ConversationState.Parser);
  private readonly pbc::RepeatedField<global::ConversationState> conversationState_ = new pbc::RepeatedField<global::ConversationState>();
  public pbc::RepeatedField<global::ConversationState> ConversationState {
    get { return conversationState_; }
  }

  public override bool Equals(object other) {
    return Equals(other as SyncRecentConversationsResponse);
  }

  public bool Equals(SyncRecentConversationsResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    if (SyncTimestamp != other.SyncTimestamp) return false;
    if(!conversationState_.Equals(other.conversationState_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (responseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    if (SyncTimestamp != 0UL) hash ^= SyncTimestamp.GetHashCode();
    hash ^= conversationState_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (responseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
    if (SyncTimestamp != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(SyncTimestamp);
    }
    conversationState_.WriteTo(output, _repeated_conversationState_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (responseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    if (SyncTimestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SyncTimestamp);
    }
    size += conversationState_.CalculateSize(_repeated_conversationState_codec);
    return size;
  }

  public void MergeFrom(SyncRecentConversationsResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseHeader_ != null) {
      if (responseHeader_ == null) {
        responseHeader_ = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
    if (other.SyncTimestamp != 0UL) {
      SyncTimestamp = other.SyncTimestamp;
    }
    conversationState_.Add(other.conversationState_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (responseHeader_ == null) {
            responseHeader_ = new global::ResponseHeader();
          }
          input.ReadMessage(responseHeader_);
          break;
        }
        case 16: {
          SyncTimestamp = input.ReadUInt64();
          break;
        }
        case 26: {
          conversationState_.AddEntriesFrom(input, _repeated_conversationState_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class UpdateWatermarkRequest : pb::IMessage<UpdateWatermarkRequest> {
  private static readonly pb::MessageParser<UpdateWatermarkRequest> _parser = new pb::MessageParser<UpdateWatermarkRequest>(() => new UpdateWatermarkRequest());
  public static pb::MessageParser<UpdateWatermarkRequest> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[127]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public UpdateWatermarkRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  public UpdateWatermarkRequest(UpdateWatermarkRequest other) : this() {
    RequestHeader = other.requestHeader_ != null ? other.RequestHeader.Clone() : null;
    ConversationId = other.conversationId_ != null ? other.ConversationId.Clone() : null;
    lastReadTimestamp_ = other.lastReadTimestamp_;
  }

  public UpdateWatermarkRequest Clone() {
    return new UpdateWatermarkRequest(this);
  }

  /// <summary>Field number for the "request_header" field.</summary>
  public const int RequestHeaderFieldNumber = 1;
  private global::RequestHeader requestHeader_;
  public global::RequestHeader RequestHeader {
    get { return requestHeader_; }
    set {
      requestHeader_ = value;
    }
  }

  /// <summary>Field number for the "conversation_id" field.</summary>
  public const int ConversationIdFieldNumber = 2;
  private global::ConversationId conversationId_;
  public global::ConversationId ConversationId {
    get { return conversationId_; }
    set {
      conversationId_ = value;
    }
  }

  /// <summary>Field number for the "last_read_timestamp" field.</summary>
  public const int LastReadTimestampFieldNumber = 3;
  private ulong lastReadTimestamp_;
  public ulong LastReadTimestamp {
    get { return lastReadTimestamp_; }
    set {
      lastReadTimestamp_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as UpdateWatermarkRequest);
  }

  public bool Equals(UpdateWatermarkRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RequestHeader, other.RequestHeader)) return false;
    if (!object.Equals(ConversationId, other.ConversationId)) return false;
    if (LastReadTimestamp != other.LastReadTimestamp) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (requestHeader_ != null) hash ^= RequestHeader.GetHashCode();
    if (conversationId_ != null) hash ^= ConversationId.GetHashCode();
    if (LastReadTimestamp != 0UL) hash ^= LastReadTimestamp.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (requestHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RequestHeader);
    }
    if (conversationId_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ConversationId);
    }
    if (LastReadTimestamp != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(LastReadTimestamp);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (requestHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RequestHeader);
    }
    if (conversationId_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConversationId);
    }
    if (LastReadTimestamp != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastReadTimestamp);
    }
    return size;
  }

  public void MergeFrom(UpdateWatermarkRequest other) {
    if (other == null) {
      return;
    }
    if (other.requestHeader_ != null) {
      if (requestHeader_ == null) {
        requestHeader_ = new global::RequestHeader();
      }
      RequestHeader.MergeFrom(other.RequestHeader);
    }
    if (other.conversationId_ != null) {
      if (conversationId_ == null) {
        conversationId_ = new global::ConversationId();
      }
      ConversationId.MergeFrom(other.ConversationId);
    }
    if (other.LastReadTimestamp != 0UL) {
      LastReadTimestamp = other.LastReadTimestamp;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (requestHeader_ == null) {
            requestHeader_ = new global::RequestHeader();
          }
          input.ReadMessage(requestHeader_);
          break;
        }
        case 18: {
          if (conversationId_ == null) {
            conversationId_ = new global::ConversationId();
          }
          input.ReadMessage(conversationId_);
          break;
        }
        case 24: {
          LastReadTimestamp = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class UpdateWatermarkResponse : pb::IMessage<UpdateWatermarkResponse> {
  private static readonly pb::MessageParser<UpdateWatermarkResponse> _parser = new pb::MessageParser<UpdateWatermarkResponse>(() => new UpdateWatermarkResponse());
  public static pb::MessageParser<UpdateWatermarkResponse> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::HangoutsReflection.Descriptor.MessageTypes[128]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public UpdateWatermarkResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  public UpdateWatermarkResponse(UpdateWatermarkResponse other) : this() {
    ResponseHeader = other.responseHeader_ != null ? other.ResponseHeader.Clone() : null;
  }

  public UpdateWatermarkResponse Clone() {
    return new UpdateWatermarkResponse(this);
  }

  /// <summary>Field number for the "response_header" field.</summary>
  public const int ResponseHeaderFieldNumber = 1;
  private global::ResponseHeader responseHeader_;
  public global::ResponseHeader ResponseHeader {
    get { return responseHeader_; }
    set {
      responseHeader_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as UpdateWatermarkResponse);
  }

  public bool Equals(UpdateWatermarkResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseHeader, other.ResponseHeader)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (responseHeader_ != null) hash ^= ResponseHeader.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (responseHeader_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseHeader);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (responseHeader_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseHeader);
    }
    return size;
  }

  public void MergeFrom(UpdateWatermarkResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseHeader_ != null) {
      if (responseHeader_ == null) {
        responseHeader_ = new global::ResponseHeader();
      }
      ResponseHeader.MergeFrom(other.ResponseHeader);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (responseHeader_ == null) {
            responseHeader_ = new global::ResponseHeader();
          }
          input.ReadMessage(responseHeader_);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
